
ota_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08006000  08006000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f3c  0800610c  0800610c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800b048  0800b048  00006048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b084  0800b084  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  0800b084  0800b084  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b084  0800b084  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b084  0800b084  00006084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b088  0800b088  00006088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800b08c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a90  20000010  0800b09c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  0800b09c  00007aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f657  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291f  00000000  00000000  00016690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00018fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb6  00000000  00000000  00019ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018567  00000000  00000000  0001aa96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012afb  00000000  00000000  00032ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d318  00000000  00000000  00045af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2e10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd0  00000000  00000000  000d2e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000d6c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800610c <__do_global_dtors_aux>:
 800610c:	b510      	push	{r4, lr}
 800610e:	4c05      	ldr	r4, [pc, #20]	@ (8006124 <__do_global_dtors_aux+0x18>)
 8006110:	7823      	ldrb	r3, [r4, #0]
 8006112:	b933      	cbnz	r3, 8006122 <__do_global_dtors_aux+0x16>
 8006114:	4b04      	ldr	r3, [pc, #16]	@ (8006128 <__do_global_dtors_aux+0x1c>)
 8006116:	b113      	cbz	r3, 800611e <__do_global_dtors_aux+0x12>
 8006118:	4804      	ldr	r0, [pc, #16]	@ (800612c <__do_global_dtors_aux+0x20>)
 800611a:	f3af 8000 	nop.w
 800611e:	2301      	movs	r3, #1
 8006120:	7023      	strb	r3, [r4, #0]
 8006122:	bd10      	pop	{r4, pc}
 8006124:	20000010 	.word	0x20000010
 8006128:	00000000 	.word	0x00000000
 800612c:	0800b030 	.word	0x0800b030

08006130 <frame_dummy>:
 8006130:	b508      	push	{r3, lr}
 8006132:	4b03      	ldr	r3, [pc, #12]	@ (8006140 <frame_dummy+0x10>)
 8006134:	b11b      	cbz	r3, 800613e <frame_dummy+0xe>
 8006136:	4903      	ldr	r1, [pc, #12]	@ (8006144 <frame_dummy+0x14>)
 8006138:	4803      	ldr	r0, [pc, #12]	@ (8006148 <frame_dummy+0x18>)
 800613a:	f3af 8000 	nop.w
 800613e:	bd08      	pop	{r3, pc}
 8006140:	00000000 	.word	0x00000000
 8006144:	20000014 	.word	0x20000014
 8006148:	0800b030 	.word	0x0800b030

0800614c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006150:	f000 fc66 	bl	8006a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006154:	f000 f836 	bl	80061c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006158:	f000 fa02 	bl	8006560 <MX_GPIO_Init>
  MX_CAN_Init();
 800615c:	f000 f878 	bl	8006250 <MX_CAN_Init>
  MX_TIM1_Init();
 8006160:	f000 f8ac 	bl	80062bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8006164:	f000 f94e 	bl	8006404 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8006168:	f000 f9d0 	bl	800650c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  COM_Proc_Init();
 800616c:	f004 fa80 	bl	800a670 <COM_Proc_Init>
  DCM_Proc_Init();
 8006170:	f004 f9a4 	bl	800a4bc <DCM_Proc_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  COM_Proc_1ms();
 8006174:	f004 fa82 	bl	800a67c <COM_Proc_1ms>
	  HAL_Delay(1);
 8006178:	2001      	movs	r0, #1
 800617a:	f000 fcb3 	bl	8006ae4 <HAL_Delay>

	  static uint16_t counter = 0;
	  if ((counter++ % 500) == 0)
 800617e:	4b0d      	ldr	r3, [pc, #52]	@ (80061b4 <main+0x68>)
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	b291      	uxth	r1, r2
 8006186:	4a0b      	ldr	r2, [pc, #44]	@ (80061b4 <main+0x68>)
 8006188:	8011      	strh	r1, [r2, #0]
 800618a:	4a0b      	ldr	r2, [pc, #44]	@ (80061b8 <main+0x6c>)
 800618c:	fba2 1203 	umull	r1, r2, r2, r3
 8006190:	0952      	lsrs	r2, r2, #5
 8006192:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8006196:	fb01 f202 	mul.w	r2, r1, r2
 800619a:	1a9b      	subs	r3, r3, r2
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e8      	bne.n	8006174 <main+0x28>
		{
		  HAL_UART_Transmit(&huart2, "App running\r\n", sizeof("App running\r\n"), 1000);
 80061a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80061a6:	220e      	movs	r2, #14
 80061a8:	4904      	ldr	r1, [pc, #16]	@ (80061bc <main+0x70>)
 80061aa:	4805      	ldr	r0, [pc, #20]	@ (80061c0 <main+0x74>)
 80061ac:	f003 fbb3 	bl	8009916 <HAL_UART_Transmit>
  {
 80061b0:	e7e0      	b.n	8006174 <main+0x28>
 80061b2:	bf00      	nop
 80061b4:	2000012c 	.word	0x2000012c
 80061b8:	10624dd3 	.word	0x10624dd3
 80061bc:	0800b048 	.word	0x0800b048
 80061c0:	200000e4 	.word	0x200000e4

080061c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b090      	sub	sp, #64	@ 0x40
 80061c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061ca:	f107 0318 	add.w	r3, r7, #24
 80061ce:	2228      	movs	r2, #40	@ 0x28
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f004 fef2 	bl	800afbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061d8:	1d3b      	adds	r3, r7, #4
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	605a      	str	r2, [r3, #4]
 80061e0:	609a      	str	r2, [r3, #8]
 80061e2:	60da      	str	r2, [r3, #12]
 80061e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80061e6:	2301      	movs	r3, #1
 80061e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80061ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80061ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80061f0:	2300      	movs	r3, #0
 80061f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80061f4:	2301      	movs	r3, #1
 80061f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80061f8:	2302      	movs	r3, #2
 80061fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80061fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006200:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8006202:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006208:	f107 0318 	add.w	r3, r7, #24
 800620c:	4618      	mov	r0, r3
 800620e:	f001 fe5d 	bl	8007ecc <HAL_RCC_OscConfig>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d001      	beq.n	800621c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8006218:	f000 f9fa 	bl	8006610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800621c:	230f      	movs	r3, #15
 800621e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006220:	2302      	movs	r3, #2
 8006222:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800622c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800622e:	2300      	movs	r3, #0
 8006230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006232:	1d3b      	adds	r3, r7, #4
 8006234:	2102      	movs	r1, #2
 8006236:	4618      	mov	r0, r3
 8006238:	f002 f8ca 	bl	80083d0 <HAL_RCC_ClockConfig>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8006242:	f000 f9e5 	bl	8006610 <Error_Handler>
  }
}
 8006246:	bf00      	nop
 8006248:	3740      	adds	r7, #64	@ 0x40
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8006254:	4b17      	ldr	r3, [pc, #92]	@ (80062b4 <MX_CAN_Init+0x64>)
 8006256:	4a18      	ldr	r2, [pc, #96]	@ (80062b8 <MX_CAN_Init+0x68>)
 8006258:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800625a:	4b16      	ldr	r3, [pc, #88]	@ (80062b4 <MX_CAN_Init+0x64>)
 800625c:	2204      	movs	r2, #4
 800625e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8006260:	4b14      	ldr	r3, [pc, #80]	@ (80062b4 <MX_CAN_Init+0x64>)
 8006262:	2200      	movs	r2, #0
 8006264:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006266:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <MX_CAN_Init+0x64>)
 8006268:	2200      	movs	r2, #0
 800626a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 800626c:	4b11      	ldr	r3, [pc, #68]	@ (80062b4 <MX_CAN_Init+0x64>)
 800626e:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8006272:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8006274:	4b0f      	ldr	r3, [pc, #60]	@ (80062b4 <MX_CAN_Init+0x64>)
 8006276:	2200      	movs	r2, #0
 8006278:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800627a:	4b0e      	ldr	r3, [pc, #56]	@ (80062b4 <MX_CAN_Init+0x64>)
 800627c:	2200      	movs	r2, #0
 800627e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8006280:	4b0c      	ldr	r3, [pc, #48]	@ (80062b4 <MX_CAN_Init+0x64>)
 8006282:	2201      	movs	r2, #1
 8006284:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8006286:	4b0b      	ldr	r3, [pc, #44]	@ (80062b4 <MX_CAN_Init+0x64>)
 8006288:	2200      	movs	r2, #0
 800628a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800628c:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <MX_CAN_Init+0x64>)
 800628e:	2200      	movs	r2, #0
 8006290:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8006292:	4b08      	ldr	r3, [pc, #32]	@ (80062b4 <MX_CAN_Init+0x64>)
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8006298:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <MX_CAN_Init+0x64>)
 800629a:	2200      	movs	r2, #0
 800629c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800629e:	4805      	ldr	r0, [pc, #20]	@ (80062b4 <MX_CAN_Init+0x64>)
 80062a0:	f000 fc44 	bl	8006b2c <HAL_CAN_Init>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80062aa:	f000 f9b1 	bl	8006610 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80062ae:	bf00      	nop
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	2000002c 	.word	0x2000002c
 80062b8:	40006400 	.word	0x40006400

080062bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b096      	sub	sp, #88	@ 0x58
 80062c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
//
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	605a      	str	r2, [r3, #4]
 80062cc:	609a      	str	r2, [r3, #8]
 80062ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	605a      	str	r2, [r3, #4]
 80062e4:	609a      	str	r2, [r3, #8]
 80062e6:	60da      	str	r2, [r3, #12]
 80062e8:	611a      	str	r2, [r3, #16]
 80062ea:	615a      	str	r2, [r3, #20]
 80062ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	2220      	movs	r2, #32
 80062f2:	2100      	movs	r1, #0
 80062f4:	4618      	mov	r0, r3
 80062f6:	f004 fe61 	bl	800afbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
//
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80062fa:	4b40      	ldr	r3, [pc, #256]	@ (80063fc <MX_TIM1_Init+0x140>)
 80062fc:	4a40      	ldr	r2, [pc, #256]	@ (8006400 <MX_TIM1_Init+0x144>)
 80062fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006300:	4b3e      	ldr	r3, [pc, #248]	@ (80063fc <MX_TIM1_Init+0x140>)
 8006302:	2200      	movs	r2, #0
 8006304:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006306:	4b3d      	ldr	r3, [pc, #244]	@ (80063fc <MX_TIM1_Init+0x140>)
 8006308:	2200      	movs	r2, #0
 800630a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 800630c:	4b3b      	ldr	r3, [pc, #236]	@ (80063fc <MX_TIM1_Init+0x140>)
 800630e:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8006312:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006314:	4b39      	ldr	r3, [pc, #228]	@ (80063fc <MX_TIM1_Init+0x140>)
 8006316:	2200      	movs	r2, #0
 8006318:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800631a:	4b38      	ldr	r3, [pc, #224]	@ (80063fc <MX_TIM1_Init+0x140>)
 800631c:	2200      	movs	r2, #0
 800631e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006320:	4b36      	ldr	r3, [pc, #216]	@ (80063fc <MX_TIM1_Init+0x140>)
 8006322:	2280      	movs	r2, #128	@ 0x80
 8006324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006326:	4835      	ldr	r0, [pc, #212]	@ (80063fc <MX_TIM1_Init+0x140>)
 8006328:	f002 f9e0 	bl	80086ec <HAL_TIM_Base_Init>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006332:	f000 f96d 	bl	8006610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006336:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800633a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800633c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8006340:	4619      	mov	r1, r3
 8006342:	482e      	ldr	r0, [pc, #184]	@ (80063fc <MX_TIM1_Init+0x140>)
 8006344:	f002 fd38 	bl	8008db8 <HAL_TIM_ConfigClockSource>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800634e:	f000 f95f 	bl	8006610 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006352:	482a      	ldr	r0, [pc, #168]	@ (80063fc <MX_TIM1_Init+0x140>)
 8006354:	f002 fa19 	bl	800878a <HAL_TIM_PWM_Init>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800635e:	f000 f957 	bl	8006610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006362:	2300      	movs	r3, #0
 8006364:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006366:	2300      	movs	r3, #0
 8006368:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800636a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800636e:	4619      	mov	r1, r3
 8006370:	4822      	ldr	r0, [pc, #136]	@ (80063fc <MX_TIM1_Init+0x140>)
 8006372:	f003 f9bf 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800637c:	f000 f948 	bl	8006610 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006380:	2360      	movs	r3, #96	@ 0x60
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006388:	2300      	movs	r3, #0
 800638a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800638c:	2300      	movs	r3, #0
 800638e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006390:	2300      	movs	r3, #0
 8006392:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006394:	2300      	movs	r3, #0
 8006396:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006398:	2300      	movs	r3, #0
 800639a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800639c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063a0:	2200      	movs	r2, #0
 80063a2:	4619      	mov	r1, r3
 80063a4:	4815      	ldr	r0, [pc, #84]	@ (80063fc <MX_TIM1_Init+0x140>)
 80063a6:	f002 fc45 	bl	8008c34 <HAL_TIM_PWM_ConfigChannel>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80063b0:	f000 f92e 	bl	8006610 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80063b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80063b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80063ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 36;
 80063c4:	2324      	movs	r3, #36	@ 0x24
 80063c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80063d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80063d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80063d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80063d8:	1d3b      	adds	r3, r7, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4807      	ldr	r0, [pc, #28]	@ (80063fc <MX_TIM1_Init+0x140>)
 80063de:	f003 f9e7 	bl	80097b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80063e8:	f000 f912 	bl	8006610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
//
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80063ec:	4803      	ldr	r0, [pc, #12]	@ (80063fc <MX_TIM1_Init+0x140>)
 80063ee:	f000 fa07 	bl	8006800 <HAL_TIM_MspPostInit>

}
 80063f2:	bf00      	nop
 80063f4:	3758      	adds	r7, #88	@ 0x58
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20000054 	.word	0x20000054
 8006400:	40012c00 	.word	0x40012c00

08006404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08a      	sub	sp, #40	@ 0x28
 8006408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
//
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800640a:	f107 0318 	add.w	r3, r7, #24
 800640e:	2200      	movs	r2, #0
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	609a      	str	r2, [r3, #8]
 8006416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006418:	f107 0310 	add.w	r3, r7, #16
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006422:	463b      	mov	r3, r7
 8006424:	2200      	movs	r2, #0
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	605a      	str	r2, [r3, #4]
 800642a:	609a      	str	r2, [r3, #8]
 800642c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */
//
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800642e:	4b36      	ldr	r3, [pc, #216]	@ (8006508 <MX_TIM2_Init+0x104>)
 8006430:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006434:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 8006436:	4b34      	ldr	r3, [pc, #208]	@ (8006508 <MX_TIM2_Init+0x104>)
 8006438:	22c7      	movs	r2, #199	@ 0xc7
 800643a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800643c:	4b32      	ldr	r3, [pc, #200]	@ (8006508 <MX_TIM2_Init+0x104>)
 800643e:	2200      	movs	r2, #0
 8006440:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8006442:	4b31      	ldr	r3, [pc, #196]	@ (8006508 <MX_TIM2_Init+0x104>)
 8006444:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006448:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800644a:	4b2f      	ldr	r3, [pc, #188]	@ (8006508 <MX_TIM2_Init+0x104>)
 800644c:	2200      	movs	r2, #0
 800644e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006450:	4b2d      	ldr	r3, [pc, #180]	@ (8006508 <MX_TIM2_Init+0x104>)
 8006452:	2200      	movs	r2, #0
 8006454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006456:	482c      	ldr	r0, [pc, #176]	@ (8006508 <MX_TIM2_Init+0x104>)
 8006458:	f002 f948 	bl	80086ec <HAL_TIM_Base_Init>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8006462:	f000 f8d5 	bl	8006610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006466:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800646a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800646c:	f107 0318 	add.w	r3, r7, #24
 8006470:	4619      	mov	r1, r3
 8006472:	4825      	ldr	r0, [pc, #148]	@ (8006508 <MX_TIM2_Init+0x104>)
 8006474:	f002 fca0 	bl	8008db8 <HAL_TIM_ConfigClockSource>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800647e:	f000 f8c7 	bl	8006610 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8006482:	4821      	ldr	r0, [pc, #132]	@ (8006508 <MX_TIM2_Init+0x104>)
 8006484:	f002 f9d9 	bl	800883a <HAL_TIM_IC_Init>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800648e:	f000 f8bf 	bl	8006610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006492:	2300      	movs	r3, #0
 8006494:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800649a:	f107 0310 	add.w	r3, r7, #16
 800649e:	4619      	mov	r1, r3
 80064a0:	4819      	ldr	r0, [pc, #100]	@ (8006508 <MX_TIM2_Init+0x104>)
 80064a2:	f003 f927 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80064ac:	f000 f8b0 	bl	8006610 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80064b0:	2300      	movs	r3, #0
 80064b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80064b4:	2301      	movs	r3, #1
 80064b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80064bc:	230f      	movs	r3, #15
 80064be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80064c0:	463b      	mov	r3, r7
 80064c2:	2200      	movs	r2, #0
 80064c4:	4619      	mov	r1, r3
 80064c6:	4810      	ldr	r0, [pc, #64]	@ (8006508 <MX_TIM2_Init+0x104>)
 80064c8:	f002 fb17 	bl	8008afa <HAL_TIM_IC_ConfigChannel>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80064d2:	f000 f89d 	bl	8006610 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80064d6:	463b      	mov	r3, r7
 80064d8:	2204      	movs	r2, #4
 80064da:	4619      	mov	r1, r3
 80064dc:	480a      	ldr	r0, [pc, #40]	@ (8006508 <MX_TIM2_Init+0x104>)
 80064de:	f002 fb0c 	bl	8008afa <HAL_TIM_IC_ConfigChannel>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80064e8:	f000 f892 	bl	8006610 <Error_Handler>
  }
  if (HAL_TIM_ConfigTI1Input(&htim2, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 80064ec:	2180      	movs	r1, #128	@ 0x80
 80064ee:	4806      	ldr	r0, [pc, #24]	@ (8006508 <MX_TIM2_Init+0x104>)
 80064f0:	f002 fd29 	bl	8008f46 <HAL_TIM_ConfigTI1Input>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80064fa:	f000 f889 	bl	8006610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//
  /* USER CODE END TIM2_Init 2 */

}
 80064fe:	bf00      	nop
 8006500:	3728      	adds	r7, #40	@ 0x28
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	2000009c 	.word	0x2000009c

0800650c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006510:	4b11      	ldr	r3, [pc, #68]	@ (8006558 <MX_USART2_UART_Init+0x4c>)
 8006512:	4a12      	ldr	r2, [pc, #72]	@ (800655c <MX_USART2_UART_Init+0x50>)
 8006514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006516:	4b10      	ldr	r3, [pc, #64]	@ (8006558 <MX_USART2_UART_Init+0x4c>)
 8006518:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800651c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800651e:	4b0e      	ldr	r3, [pc, #56]	@ (8006558 <MX_USART2_UART_Init+0x4c>)
 8006520:	2200      	movs	r2, #0
 8006522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006524:	4b0c      	ldr	r3, [pc, #48]	@ (8006558 <MX_USART2_UART_Init+0x4c>)
 8006526:	2200      	movs	r2, #0
 8006528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800652a:	4b0b      	ldr	r3, [pc, #44]	@ (8006558 <MX_USART2_UART_Init+0x4c>)
 800652c:	2200      	movs	r2, #0
 800652e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006530:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <MX_USART2_UART_Init+0x4c>)
 8006532:	220c      	movs	r2, #12
 8006534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006536:	4b08      	ldr	r3, [pc, #32]	@ (8006558 <MX_USART2_UART_Init+0x4c>)
 8006538:	2200      	movs	r2, #0
 800653a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <MX_USART2_UART_Init+0x4c>)
 800653e:	2200      	movs	r2, #0
 8006540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006542:	4805      	ldr	r0, [pc, #20]	@ (8006558 <MX_USART2_UART_Init+0x4c>)
 8006544:	f003 f997 	bl	8009876 <HAL_UART_Init>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800654e:	f000 f85f 	bl	8006610 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006552:	bf00      	nop
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	200000e4 	.word	0x200000e4
 800655c:	40004400 	.word	0x40004400

08006560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006566:	f107 0310 	add.w	r3, r7, #16
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]
 800656e:	605a      	str	r2, [r3, #4]
 8006570:	609a      	str	r2, [r3, #8]
 8006572:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006574:	4b24      	ldr	r3, [pc, #144]	@ (8006608 <MX_GPIO_Init+0xa8>)
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	4a23      	ldr	r2, [pc, #140]	@ (8006608 <MX_GPIO_Init+0xa8>)
 800657a:	f043 0310 	orr.w	r3, r3, #16
 800657e:	6193      	str	r3, [r2, #24]
 8006580:	4b21      	ldr	r3, [pc, #132]	@ (8006608 <MX_GPIO_Init+0xa8>)
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800658c:	4b1e      	ldr	r3, [pc, #120]	@ (8006608 <MX_GPIO_Init+0xa8>)
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	4a1d      	ldr	r2, [pc, #116]	@ (8006608 <MX_GPIO_Init+0xa8>)
 8006592:	f043 0320 	orr.w	r3, r3, #32
 8006596:	6193      	str	r3, [r2, #24]
 8006598:	4b1b      	ldr	r3, [pc, #108]	@ (8006608 <MX_GPIO_Init+0xa8>)
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	60bb      	str	r3, [r7, #8]
 80065a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80065a4:	4b18      	ldr	r3, [pc, #96]	@ (8006608 <MX_GPIO_Init+0xa8>)
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	4a17      	ldr	r2, [pc, #92]	@ (8006608 <MX_GPIO_Init+0xa8>)
 80065aa:	f043 0304 	orr.w	r3, r3, #4
 80065ae:	6193      	str	r3, [r2, #24]
 80065b0:	4b15      	ldr	r3, [pc, #84]	@ (8006608 <MX_GPIO_Init+0xa8>)
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80065bc:	4b12      	ldr	r3, [pc, #72]	@ (8006608 <MX_GPIO_Init+0xa8>)
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	4a11      	ldr	r2, [pc, #68]	@ (8006608 <MX_GPIO_Init+0xa8>)
 80065c2:	f043 0308 	orr.w	r3, r3, #8
 80065c6:	6193      	str	r3, [r2, #24]
 80065c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006608 <MX_GPIO_Init+0xa8>)
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80065d4:	2200      	movs	r2, #0
 80065d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80065da:	480c      	ldr	r0, [pc, #48]	@ (800660c <MX_GPIO_Init+0xac>)
 80065dc:	f001 fc44 	bl	8007e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80065e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80065e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065e6:	2301      	movs	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ee:	2302      	movs	r3, #2
 80065f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80065f2:	f107 0310 	add.w	r3, r7, #16
 80065f6:	4619      	mov	r1, r3
 80065f8:	4804      	ldr	r0, [pc, #16]	@ (800660c <MX_GPIO_Init+0xac>)
 80065fa:	f001 fab1 	bl	8007b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80065fe:	bf00      	nop
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40021000 	.word	0x40021000
 800660c:	40011000 	.word	0x40011000

08006610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006614:	b672      	cpsid	i
}
 8006616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006618:	bf00      	nop
 800661a:	e7fd      	b.n	8006618 <Error_Handler+0x8>

0800661c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006622:	4b15      	ldr	r3, [pc, #84]	@ (8006678 <HAL_MspInit+0x5c>)
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	4a14      	ldr	r2, [pc, #80]	@ (8006678 <HAL_MspInit+0x5c>)
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	6193      	str	r3, [r2, #24]
 800662e:	4b12      	ldr	r3, [pc, #72]	@ (8006678 <HAL_MspInit+0x5c>)
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	60bb      	str	r3, [r7, #8]
 8006638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800663a:	4b0f      	ldr	r3, [pc, #60]	@ (8006678 <HAL_MspInit+0x5c>)
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	4a0e      	ldr	r2, [pc, #56]	@ (8006678 <HAL_MspInit+0x5c>)
 8006640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006644:	61d3      	str	r3, [r2, #28]
 8006646:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <HAL_MspInit+0x5c>)
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800664e:	607b      	str	r3, [r7, #4]
 8006650:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006652:	4b0a      	ldr	r3, [pc, #40]	@ (800667c <HAL_MspInit+0x60>)
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	4a04      	ldr	r2, [pc, #16]	@ (800667c <HAL_MspInit+0x60>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800666e:	bf00      	nop
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	bc80      	pop	{r7}
 8006676:	4770      	bx	lr
 8006678:	40021000 	.word	0x40021000
 800667c:	40010000 	.word	0x40010000

08006680 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08a      	sub	sp, #40	@ 0x28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	605a      	str	r2, [r3, #4]
 8006692:	609a      	str	r2, [r3, #8]
 8006694:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a29      	ldr	r2, [pc, #164]	@ (8006740 <HAL_CAN_MspInit+0xc0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d14b      	bne.n	8006738 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80066a0:	4b28      	ldr	r3, [pc, #160]	@ (8006744 <HAL_CAN_MspInit+0xc4>)
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	4a27      	ldr	r2, [pc, #156]	@ (8006744 <HAL_CAN_MspInit+0xc4>)
 80066a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80066aa:	61d3      	str	r3, [r2, #28]
 80066ac:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <HAL_CAN_MspInit+0xc4>)
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066b8:	4b22      	ldr	r3, [pc, #136]	@ (8006744 <HAL_CAN_MspInit+0xc4>)
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	4a21      	ldr	r2, [pc, #132]	@ (8006744 <HAL_CAN_MspInit+0xc4>)
 80066be:	f043 0308 	orr.w	r3, r3, #8
 80066c2:	6193      	str	r3, [r2, #24]
 80066c4:	4b1f      	ldr	r3, [pc, #124]	@ (8006744 <HAL_CAN_MspInit+0xc4>)
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80066d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066de:	f107 0314 	add.w	r3, r7, #20
 80066e2:	4619      	mov	r1, r3
 80066e4:	4818      	ldr	r0, [pc, #96]	@ (8006748 <HAL_CAN_MspInit+0xc8>)
 80066e6:	f001 fa3b 	bl	8007b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80066ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f0:	2302      	movs	r3, #2
 80066f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80066f4:	2303      	movs	r3, #3
 80066f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066f8:	f107 0314 	add.w	r3, r7, #20
 80066fc:	4619      	mov	r1, r3
 80066fe:	4812      	ldr	r0, [pc, #72]	@ (8006748 <HAL_CAN_MspInit+0xc8>)
 8006700:	f001 fa2e 	bl	8007b60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8006704:	4b11      	ldr	r3, [pc, #68]	@ (800674c <HAL_CAN_MspInit+0xcc>)
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8006710:	627b      	str	r3, [r7, #36]	@ 0x24
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006718:	627b      	str	r3, [r7, #36]	@ 0x24
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006720:	627b      	str	r3, [r7, #36]	@ 0x24
 8006722:	4a0a      	ldr	r2, [pc, #40]	@ (800674c <HAL_CAN_MspInit+0xcc>)
 8006724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006726:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8006728:	2200      	movs	r2, #0
 800672a:	2100      	movs	r1, #0
 800672c:	2014      	movs	r0, #20
 800672e:	f001 f92a 	bl	8007986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006732:	2014      	movs	r0, #20
 8006734:	f001 f943 	bl	80079be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006738:	bf00      	nop
 800673a:	3728      	adds	r7, #40	@ 0x28
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40006400 	.word	0x40006400
 8006744:	40021000 	.word	0x40021000
 8006748:	40010c00 	.word	0x40010c00
 800674c:	40010000 	.word	0x40010000

08006750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08a      	sub	sp, #40	@ 0x28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006758:	f107 0318 	add.w	r3, r7, #24
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	605a      	str	r2, [r3, #4]
 8006762:	609a      	str	r2, [r3, #8]
 8006764:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a22      	ldr	r2, [pc, #136]	@ (80067f4 <HAL_TIM_Base_MspInit+0xa4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d10c      	bne.n	800678a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006770:	4b21      	ldr	r3, [pc, #132]	@ (80067f8 <HAL_TIM_Base_MspInit+0xa8>)
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	4a20      	ldr	r2, [pc, #128]	@ (80067f8 <HAL_TIM_Base_MspInit+0xa8>)
 8006776:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800677a:	6193      	str	r3, [r2, #24]
 800677c:	4b1e      	ldr	r3, [pc, #120]	@ (80067f8 <HAL_TIM_Base_MspInit+0xa8>)
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006788:	e030      	b.n	80067ec <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006792:	d12b      	bne.n	80067ec <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006794:	4b18      	ldr	r3, [pc, #96]	@ (80067f8 <HAL_TIM_Base_MspInit+0xa8>)
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	4a17      	ldr	r2, [pc, #92]	@ (80067f8 <HAL_TIM_Base_MspInit+0xa8>)
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	61d3      	str	r3, [r2, #28]
 80067a0:	4b15      	ldr	r3, [pc, #84]	@ (80067f8 <HAL_TIM_Base_MspInit+0xa8>)
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ac:	4b12      	ldr	r3, [pc, #72]	@ (80067f8 <HAL_TIM_Base_MspInit+0xa8>)
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	4a11      	ldr	r2, [pc, #68]	@ (80067f8 <HAL_TIM_Base_MspInit+0xa8>)
 80067b2:	f043 0304 	orr.w	r3, r3, #4
 80067b6:	6193      	str	r3, [r2, #24]
 80067b8:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <HAL_TIM_Base_MspInit+0xa8>)
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80067c4:	2303      	movs	r3, #3
 80067c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067d0:	f107 0318 	add.w	r3, r7, #24
 80067d4:	4619      	mov	r1, r3
 80067d6:	4809      	ldr	r0, [pc, #36]	@ (80067fc <HAL_TIM_Base_MspInit+0xac>)
 80067d8:	f001 f9c2 	bl	8007b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80067dc:	2200      	movs	r2, #0
 80067de:	2100      	movs	r1, #0
 80067e0:	201c      	movs	r0, #28
 80067e2:	f001 f8d0 	bl	8007986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80067e6:	201c      	movs	r0, #28
 80067e8:	f001 f8e9 	bl	80079be <HAL_NVIC_EnableIRQ>
}
 80067ec:	bf00      	nop
 80067ee:	3728      	adds	r7, #40	@ 0x28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40021000 	.word	0x40021000
 80067fc:	40010800 	.word	0x40010800

08006800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	2200      	movs	r2, #0
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a19      	ldr	r2, [pc, #100]	@ (8006880 <HAL_TIM_MspPostInit+0x80>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d12a      	bne.n	8006876 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006820:	4b18      	ldr	r3, [pc, #96]	@ (8006884 <HAL_TIM_MspPostInit+0x84>)
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	4a17      	ldr	r2, [pc, #92]	@ (8006884 <HAL_TIM_MspPostInit+0x84>)
 8006826:	f043 0304 	orr.w	r3, r3, #4
 800682a:	6193      	str	r3, [r2, #24]
 800682c:	4b15      	ldr	r3, [pc, #84]	@ (8006884 <HAL_TIM_MspPostInit+0x84>)
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	60bb      	str	r3, [r7, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006838:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800683c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800683e:	2302      	movs	r3, #2
 8006840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006842:	2302      	movs	r3, #2
 8006844:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006846:	f107 030c 	add.w	r3, r7, #12
 800684a:	4619      	mov	r1, r3
 800684c:	480e      	ldr	r0, [pc, #56]	@ (8006888 <HAL_TIM_MspPostInit+0x88>)
 800684e:	f001 f987 	bl	8007b60 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8006852:	4b0e      	ldr	r3, [pc, #56]	@ (800688c <HAL_TIM_MspPostInit+0x8c>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	4a06      	ldr	r2, [pc, #24]	@ (800688c <HAL_TIM_MspPostInit+0x8c>)
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006876:	bf00      	nop
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40021000 	.word	0x40021000
 8006888:	40010800 	.word	0x40010800
 800688c:	40010000 	.word	0x40010000

08006890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006898:	f107 0310 	add.w	r3, r7, #16
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	605a      	str	r2, [r3, #4]
 80068a2:	609a      	str	r2, [r3, #8]
 80068a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006928 <HAL_UART_MspInit+0x98>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d137      	bne.n	8006920 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068b0:	4b1e      	ldr	r3, [pc, #120]	@ (800692c <HAL_UART_MspInit+0x9c>)
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	4a1d      	ldr	r2, [pc, #116]	@ (800692c <HAL_UART_MspInit+0x9c>)
 80068b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ba:	61d3      	str	r3, [r2, #28]
 80068bc:	4b1b      	ldr	r3, [pc, #108]	@ (800692c <HAL_UART_MspInit+0x9c>)
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068c8:	4b18      	ldr	r3, [pc, #96]	@ (800692c <HAL_UART_MspInit+0x9c>)
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	4a17      	ldr	r2, [pc, #92]	@ (800692c <HAL_UART_MspInit+0x9c>)
 80068ce:	f043 0304 	orr.w	r3, r3, #4
 80068d2:	6193      	str	r3, [r2, #24]
 80068d4:	4b15      	ldr	r3, [pc, #84]	@ (800692c <HAL_UART_MspInit+0x9c>)
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068e0:	2304      	movs	r3, #4
 80068e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068e4:	2302      	movs	r3, #2
 80068e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068e8:	2303      	movs	r3, #3
 80068ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ec:	f107 0310 	add.w	r3, r7, #16
 80068f0:	4619      	mov	r1, r3
 80068f2:	480f      	ldr	r0, [pc, #60]	@ (8006930 <HAL_UART_MspInit+0xa0>)
 80068f4:	f001 f934 	bl	8007b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80068f8:	2308      	movs	r3, #8
 80068fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006900:	2300      	movs	r3, #0
 8006902:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006904:	f107 0310 	add.w	r3, r7, #16
 8006908:	4619      	mov	r1, r3
 800690a:	4809      	ldr	r0, [pc, #36]	@ (8006930 <HAL_UART_MspInit+0xa0>)
 800690c:	f001 f928 	bl	8007b60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8006910:	2200      	movs	r2, #0
 8006912:	2100      	movs	r1, #0
 8006914:	2026      	movs	r0, #38	@ 0x26
 8006916:	f001 f836 	bl	8007986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800691a:	2026      	movs	r0, #38	@ 0x26
 800691c:	f001 f84f 	bl	80079be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006920:	bf00      	nop
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40004400 	.word	0x40004400
 800692c:	40021000 	.word	0x40021000
 8006930:	40010800 	.word	0x40010800

08006934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <NMI_Handler+0x4>

0800693c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006940:	bf00      	nop
 8006942:	e7fd      	b.n	8006940 <HardFault_Handler+0x4>

08006944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006944:	b480      	push	{r7}
 8006946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006948:	bf00      	nop
 800694a:	e7fd      	b.n	8006948 <MemManage_Handler+0x4>

0800694c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <BusFault_Handler+0x4>

08006954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006958:	bf00      	nop
 800695a:	e7fd      	b.n	8006958 <UsageFault_Handler+0x4>

0800695c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800695c:	b480      	push	{r7}
 800695e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006960:	bf00      	nop
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006968:	b480      	push	{r7}
 800696a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800696c:	bf00      	nop
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr

08006974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006978:	bf00      	nop
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr

08006980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006984:	f000 f892 	bl	8006aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006988:	bf00      	nop
 800698a:	bd80      	pop	{r7, pc}

0800698c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8006990:	4802      	ldr	r0, [pc, #8]	@ (800699c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8006992:	f000 fce8 	bl	8007366 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006996:	bf00      	nop
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	2000002c 	.word	0x2000002c

080069a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80069a4:	4802      	ldr	r0, [pc, #8]	@ (80069b0 <TIM2_IRQHandler+0x10>)
 80069a6:	f001 ffa0 	bl	80088ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80069aa:	bf00      	nop
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	2000009c 	.word	0x2000009c

080069b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80069b8:	4802      	ldr	r0, [pc, #8]	@ (80069c4 <USART2_IRQHandler+0x10>)
 80069ba:	f003 f82f 	bl	8009a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	200000e4 	.word	0x200000e4

080069c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80069c8:	b480      	push	{r7}
 80069ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr

080069d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80069d4:	f7ff fff8 	bl	80069c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80069d8:	480b      	ldr	r0, [pc, #44]	@ (8006a08 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80069da:	490c      	ldr	r1, [pc, #48]	@ (8006a0c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80069dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006a10 <LoopFillZerobss+0x16>)
  movs r3, #0
 80069de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80069e0:	e002      	b.n	80069e8 <LoopCopyDataInit>

080069e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80069e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80069e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80069e6:	3304      	adds	r3, #4

080069e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80069e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80069ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80069ec:	d3f9      	bcc.n	80069e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80069ee:	4a09      	ldr	r2, [pc, #36]	@ (8006a14 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80069f0:	4c09      	ldr	r4, [pc, #36]	@ (8006a18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80069f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80069f4:	e001      	b.n	80069fa <LoopFillZerobss>

080069f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80069f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80069f8:	3204      	adds	r2, #4

080069fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80069fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80069fc:	d3fb      	bcc.n	80069f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80069fe:	f004 fae5 	bl	800afcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006a02:	f7ff fba3 	bl	800614c <main>
  bx lr
 8006a06:	4770      	bx	lr
  ldr r0, =_sdata
 8006a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8006a10:	0800b08c 	.word	0x0800b08c
  ldr r2, =_sbss
 8006a14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8006a18:	20000aa0 	.word	0x20000aa0

08006a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a1c:	e7fe      	b.n	8006a1c <ADC1_2_IRQHandler>
	...

08006a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a24:	4b08      	ldr	r3, [pc, #32]	@ (8006a48 <HAL_Init+0x28>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a07      	ldr	r2, [pc, #28]	@ (8006a48 <HAL_Init+0x28>)
 8006a2a:	f043 0310 	orr.w	r3, r3, #16
 8006a2e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a30:	2003      	movs	r0, #3
 8006a32:	f000 ff9d 	bl	8007970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a36:	200f      	movs	r0, #15
 8006a38:	f000 f808 	bl	8006a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a3c:	f7ff fdee 	bl	800661c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40022000 	.word	0x40022000

08006a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a54:	4b12      	ldr	r3, [pc, #72]	@ (8006aa0 <HAL_InitTick+0x54>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	4b12      	ldr	r3, [pc, #72]	@ (8006aa4 <HAL_InitTick+0x58>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 ffb9 	bl	80079e2 <HAL_SYSTICK_Config>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e00e      	b.n	8006a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b0f      	cmp	r3, #15
 8006a7e:	d80a      	bhi.n	8006a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a80:	2200      	movs	r2, #0
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	f000 ff7d 	bl	8007986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a8c:	4a06      	ldr	r2, [pc, #24]	@ (8006aa8 <HAL_InitTick+0x5c>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e000      	b.n	8006a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000000 	.word	0x20000000
 8006aa4:	20000008 	.word	0x20000008
 8006aa8:	20000004 	.word	0x20000004

08006aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006ab0:	4b05      	ldr	r3, [pc, #20]	@ (8006ac8 <HAL_IncTick+0x1c>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4b05      	ldr	r3, [pc, #20]	@ (8006acc <HAL_IncTick+0x20>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4413      	add	r3, r2
 8006abc:	4a03      	ldr	r2, [pc, #12]	@ (8006acc <HAL_IncTick+0x20>)
 8006abe:	6013      	str	r3, [r2, #0]
}
 8006ac0:	bf00      	nop
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr
 8006ac8:	20000008 	.word	0x20000008
 8006acc:	20000130 	.word	0x20000130

08006ad0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8006ad4:	4b02      	ldr	r3, [pc, #8]	@ (8006ae0 <HAL_GetTick+0x10>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bc80      	pop	{r7}
 8006ade:	4770      	bx	lr
 8006ae0:	20000130 	.word	0x20000130

08006ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006aec:	f7ff fff0 	bl	8006ad0 <HAL_GetTick>
 8006af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afc:	d005      	beq.n	8006b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006afe:	4b0a      	ldr	r3, [pc, #40]	@ (8006b28 <HAL_Delay+0x44>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b0a:	bf00      	nop
 8006b0c:	f7ff ffe0 	bl	8006ad0 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d8f7      	bhi.n	8006b0c <HAL_Delay+0x28>
  {
  }
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000008 	.word	0x20000008

08006b2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e0ed      	b.n	8006d1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff fd98 	bl	8006680 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b60:	f7ff ffb6 	bl	8006ad0 <HAL_GetTick>
 8006b64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006b66:	e012      	b.n	8006b8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006b68:	f7ff ffb2 	bl	8006ad0 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b0a      	cmp	r3, #10
 8006b74:	d90b      	bls.n	8006b8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2205      	movs	r2, #5
 8006b86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e0c5      	b.n	8006d1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0e5      	beq.n	8006b68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0202 	bic.w	r2, r2, #2
 8006baa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bac:	f7ff ff90 	bl	8006ad0 <HAL_GetTick>
 8006bb0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006bb2:	e012      	b.n	8006bda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006bb4:	f7ff ff8c 	bl	8006ad0 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b0a      	cmp	r3, #10
 8006bc0:	d90b      	bls.n	8006bda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2205      	movs	r2, #5
 8006bd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e09f      	b.n	8006d1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e5      	bne.n	8006bb4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	7e1b      	ldrb	r3, [r3, #24]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d108      	bne.n	8006c02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	e007      	b.n	8006c12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	7e5b      	ldrb	r3, [r3, #25]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d108      	bne.n	8006c2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	e007      	b.n	8006c3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	7e9b      	ldrb	r3, [r3, #26]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d108      	bne.n	8006c56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0220 	orr.w	r2, r2, #32
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	e007      	b.n	8006c66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0220 	bic.w	r2, r2, #32
 8006c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	7edb      	ldrb	r3, [r3, #27]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d108      	bne.n	8006c80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0210 	bic.w	r2, r2, #16
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	e007      	b.n	8006c90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0210 	orr.w	r2, r2, #16
 8006c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	7f1b      	ldrb	r3, [r3, #28]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d108      	bne.n	8006caa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0208 	orr.w	r2, r2, #8
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	e007      	b.n	8006cba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0208 	bic.w	r2, r2, #8
 8006cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	7f5b      	ldrb	r3, [r3, #29]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d108      	bne.n	8006cd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 0204 	orr.w	r2, r2, #4
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	e007      	b.n	8006ce4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0204 	bic.w	r2, r2, #4
 8006ce2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	ea42 0103 	orr.w	r1, r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b087      	sub	sp, #28
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d38:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006d3a:	7cfb      	ldrb	r3, [r7, #19]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d003      	beq.n	8006d48 <HAL_CAN_ConfigFilter+0x26>
 8006d40:	7cfb      	ldrb	r3, [r7, #19]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	f040 80aa 	bne.w	8006e9c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006d4e:	f043 0201 	orr.w	r2, r3, #1
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2201      	movs	r2, #1
 8006d62:	fa02 f303 	lsl.w	r3, r2, r3
 8006d66:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	401a      	ands	r2, r3
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d123      	bne.n	8006dca <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	43db      	mvns	r3, r3
 8006d8c:	401a      	ands	r2, r3
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006da4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	3248      	adds	r2, #72	@ 0x48
 8006daa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006dbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006dc0:	6979      	ldr	r1, [r7, #20]
 8006dc2:	3348      	adds	r3, #72	@ 0x48
 8006dc4:	00db      	lsls	r3, r3, #3
 8006dc6:	440b      	add	r3, r1
 8006dc8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d122      	bne.n	8006e18 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006df2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	3248      	adds	r2, #72	@ 0x48
 8006df8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006e0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006e0e:	6979      	ldr	r1, [r7, #20]
 8006e10:	3348      	adds	r3, #72	@ 0x48
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	440b      	add	r3, r1
 8006e16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d109      	bne.n	8006e34 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	401a      	ands	r2, r3
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006e32:	e007      	b.n	8006e44 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	43db      	mvns	r3, r3
 8006e56:	401a      	ands	r2, r3
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006e5e:	e007      	b.n	8006e70 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d107      	bne.n	8006e88 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	431a      	orrs	r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006e8e:	f023 0201 	bic.w	r2, r3, #1
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e006      	b.n	8006eaa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
  }
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d12e      	bne.n	8006f26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0201 	bic.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ee0:	f7ff fdf6 	bl	8006ad0 <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006ee6:	e012      	b.n	8006f0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ee8:	f7ff fdf2 	bl	8006ad0 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b0a      	cmp	r3, #10
 8006ef4:	d90b      	bls.n	8006f0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2205      	movs	r2, #5
 8006f06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e012      	b.n	8006f34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e5      	bne.n	8006ee8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e006      	b.n	8006f34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b089      	sub	sp, #36	@ 0x24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006f5a:	7ffb      	ldrb	r3, [r7, #31]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d003      	beq.n	8006f68 <HAL_CAN_AddTxMessage+0x2c>
 8006f60:	7ffb      	ldrb	r3, [r7, #31]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	f040 80ad 	bne.w	80070c2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d105      	bne.n	8006f88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 8095 	beq.w	80070b2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	0e1b      	lsrs	r3, r3, #24
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006f92:	2201      	movs	r2, #1
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	409a      	lsls	r2, r3
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10d      	bne.n	8006fc0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006fae:	68f9      	ldr	r1, [r7, #12]
 8006fb0:	6809      	ldr	r1, [r1, #0]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3318      	adds	r3, #24
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	440b      	add	r3, r1
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e00f      	b.n	8006fe0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006fca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006fd0:	68f9      	ldr	r1, [r7, #12]
 8006fd2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006fd4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	3318      	adds	r3, #24
 8006fda:	011b      	lsls	r3, r3, #4
 8006fdc:	440b      	add	r3, r1
 8006fde:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6819      	ldr	r1, [r3, #0]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	3318      	adds	r3, #24
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	440b      	add	r3, r1
 8006ff0:	3304      	adds	r3, #4
 8006ff2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	7d1b      	ldrb	r3, [r3, #20]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d111      	bne.n	8007020 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	3318      	adds	r3, #24
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	4413      	add	r3, r2
 8007008:	3304      	adds	r3, #4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	6811      	ldr	r1, [r2, #0]
 8007010:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	3318      	adds	r3, #24
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	440b      	add	r3, r1
 800701c:	3304      	adds	r3, #4
 800701e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3307      	adds	r3, #7
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	061a      	lsls	r2, r3, #24
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3306      	adds	r3, #6
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	041b      	lsls	r3, r3, #16
 8007030:	431a      	orrs	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3305      	adds	r3, #5
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	4313      	orrs	r3, r2
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	3204      	adds	r2, #4
 8007040:	7812      	ldrb	r2, [r2, #0]
 8007042:	4610      	mov	r0, r2
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	6811      	ldr	r1, [r2, #0]
 8007048:	ea43 0200 	orr.w	r2, r3, r0
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	440b      	add	r3, r1
 8007052:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8007056:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3303      	adds	r3, #3
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	061a      	lsls	r2, r3, #24
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3302      	adds	r3, #2
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	041b      	lsls	r3, r3, #16
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3301      	adds	r3, #1
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	4313      	orrs	r3, r2
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	7812      	ldrb	r2, [r2, #0]
 8007078:	4610      	mov	r0, r2
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	6811      	ldr	r1, [r2, #0]
 800707e:	ea43 0200 	orr.w	r2, r3, r0
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	440b      	add	r3, r1
 8007088:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800708c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	3318      	adds	r3, #24
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	4413      	add	r3, r2
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	6811      	ldr	r1, [r2, #0]
 80070a0:	f043 0201 	orr.w	r2, r3, #1
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	3318      	adds	r3, #24
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	440b      	add	r3, r1
 80070ac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e00e      	b.n	80070d0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e006      	b.n	80070d0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
  }
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3724      	adds	r7, #36	@ 0x24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr

080070da <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80070da:	b480      	push	{r7}
 80070dc:	b087      	sub	sp, #28
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
 80070e6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070ee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d003      	beq.n	80070fe <HAL_CAN_GetRxMessage+0x24>
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	f040 8103 	bne.w	8007304 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10e      	bne.n	8007122 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d116      	bne.n	8007140 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007116:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e0f7      	b.n	8007312 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0303 	and.w	r3, r3, #3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007134:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e0e8      	b.n	8007312 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	331b      	adds	r3, #27
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	4413      	add	r3, r2
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0204 	and.w	r2, r3, #4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10c      	bne.n	8007178 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	331b      	adds	r3, #27
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	4413      	add	r3, r2
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	0d5b      	lsrs	r3, r3, #21
 800716e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e00b      	b.n	8007190 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	331b      	adds	r3, #27
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	4413      	add	r3, r2
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	08db      	lsrs	r3, r3, #3
 8007188:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	331b      	adds	r3, #27
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	4413      	add	r3, r2
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0202 	and.w	r2, r3, #2
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	331b      	adds	r3, #27
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	4413      	add	r3, r2
 80071b2:	3304      	adds	r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0308 	and.w	r3, r3, #8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d003      	beq.n	80071c6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2208      	movs	r2, #8
 80071c2:	611a      	str	r2, [r3, #16]
 80071c4:	e00b      	b.n	80071de <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	331b      	adds	r3, #27
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	4413      	add	r3, r2
 80071d2:	3304      	adds	r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 020f 	and.w	r2, r3, #15
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	331b      	adds	r3, #27
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	4413      	add	r3, r2
 80071ea:	3304      	adds	r3, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	0a1b      	lsrs	r3, r3, #8
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	331b      	adds	r3, #27
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	4413      	add	r3, r2
 8007202:	3304      	adds	r3, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	b29a      	uxth	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	4413      	add	r3, r2
 8007218:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	4413      	add	r3, r2
 800722e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	0a1a      	lsrs	r2, r3, #8
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	3301      	adds	r3, #1
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	4413      	add	r3, r2
 8007248:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	0c1a      	lsrs	r2, r3, #16
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	3302      	adds	r3, #2
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	4413      	add	r3, r2
 8007262:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	0e1a      	lsrs	r2, r3, #24
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	3303      	adds	r3, #3
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	4413      	add	r3, r2
 800727c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	3304      	adds	r3, #4
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	4413      	add	r3, r2
 8007294:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	0a1a      	lsrs	r2, r3, #8
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	3305      	adds	r3, #5
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	0c1a      	lsrs	r2, r3, #16
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	3306      	adds	r3, #6
 80072ba:	b2d2      	uxtb	r2, r2
 80072bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	011b      	lsls	r3, r3, #4
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	0e1a      	lsrs	r2, r3, #24
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	3307      	adds	r3, #7
 80072d4:	b2d2      	uxtb	r2, r2
 80072d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d108      	bne.n	80072f0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0220 	orr.w	r2, r2, #32
 80072ec:	60da      	str	r2, [r3, #12]
 80072ee:	e007      	b.n	8007300 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0220 	orr.w	r2, r2, #32
 80072fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	e006      	b.n	8007312 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007308:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800732c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d002      	beq.n	800733a <HAL_CAN_ActivateNotification+0x1e>
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d109      	bne.n	800734e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6959      	ldr	r1, [r3, #20]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	e006      	b.n	800735c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007352:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
  }
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b08a      	sub	sp, #40	@ 0x28
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800736e:	2300      	movs	r3, #0
 8007370:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d07c      	beq.n	80074a6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d023      	beq.n	80073fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2201      	movs	r2, #1
 80073bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f983 	bl	80076d4 <HAL_CAN_TxMailbox0CompleteCallback>
 80073ce:	e016      	b.n	80073fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d004      	beq.n	80073e4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073e2:	e00c      	b.n	80073fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80073f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f6:	e002      	b.n	80073fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f986 	bl	800770a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007404:	2b00      	cmp	r3, #0
 8007406:	d024      	beq.n	8007452 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007410:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f962 	bl	80076e6 <HAL_CAN_TxMailbox1CompleteCallback>
 8007422:	e016      	b.n	8007452 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007434:	627b      	str	r3, [r7, #36]	@ 0x24
 8007436:	e00c      	b.n	8007452 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800743e:	2b00      	cmp	r3, #0
 8007440:	d004      	beq.n	800744c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
 800744a:	e002      	b.n	8007452 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f965 	bl	800771c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d024      	beq.n	80074a6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007464:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f941 	bl	80076f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8007476:	e016      	b.n	80074a6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d004      	beq.n	800748c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
 800748a:	e00c      	b.n	80074a6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d004      	beq.n	80074a0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800749c:	627b      	str	r3, [r7, #36]	@ 0x24
 800749e:	e002      	b.n	80074a6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f944 	bl	800772e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	f003 0308 	and.w	r3, r3, #8
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00c      	beq.n	80074ca <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f003 0310 	and.w	r3, r3, #16
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2210      	movs	r2, #16
 80074c8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d006      	beq.n	80074ec <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2208      	movs	r2, #8
 80074e4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f92a 	bl	8007740 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f003 f823 	bl	800a550 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00c      	beq.n	800752e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007524:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2210      	movs	r2, #16
 800752c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00b      	beq.n	8007550 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d006      	beq.n	8007550 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2208      	movs	r2, #8
 8007548:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f90a 	bl	8007764 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	2b00      	cmp	r3, #0
 8007566:	d002      	beq.n	800756e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f8f2 	bl	8007752 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00b      	beq.n	8007590 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	f003 0310 	and.w	r3, r3, #16
 800757e:	2b00      	cmp	r3, #0
 8007580:	d006      	beq.n	8007590 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2210      	movs	r2, #16
 8007588:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8f3 	bl	8007776 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	f003 0308 	and.w	r3, r3, #8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d006      	beq.n	80075b2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2208      	movs	r2, #8
 80075aa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f8eb 	bl	8007788 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80075b2:	6a3b      	ldr	r3, [r7, #32]
 80075b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d07b      	beq.n	80076b4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d072      	beq.n	80076ac <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d008      	beq.n	80075e2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d008      	beq.n	80075fe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	f043 0302 	orr.w	r3, r3, #2
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007604:	2b00      	cmp	r3, #0
 8007606:	d008      	beq.n	800761a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	f043 0304 	orr.w	r3, r3, #4
 8007618:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007620:	2b00      	cmp	r3, #0
 8007622:	d043      	beq.n	80076ac <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800762a:	2b00      	cmp	r3, #0
 800762c:	d03e      	beq.n	80076ac <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007634:	2b60      	cmp	r3, #96	@ 0x60
 8007636:	d02b      	beq.n	8007690 <HAL_CAN_IRQHandler+0x32a>
 8007638:	2b60      	cmp	r3, #96	@ 0x60
 800763a:	d82e      	bhi.n	800769a <HAL_CAN_IRQHandler+0x334>
 800763c:	2b50      	cmp	r3, #80	@ 0x50
 800763e:	d022      	beq.n	8007686 <HAL_CAN_IRQHandler+0x320>
 8007640:	2b50      	cmp	r3, #80	@ 0x50
 8007642:	d82a      	bhi.n	800769a <HAL_CAN_IRQHandler+0x334>
 8007644:	2b40      	cmp	r3, #64	@ 0x40
 8007646:	d019      	beq.n	800767c <HAL_CAN_IRQHandler+0x316>
 8007648:	2b40      	cmp	r3, #64	@ 0x40
 800764a:	d826      	bhi.n	800769a <HAL_CAN_IRQHandler+0x334>
 800764c:	2b30      	cmp	r3, #48	@ 0x30
 800764e:	d010      	beq.n	8007672 <HAL_CAN_IRQHandler+0x30c>
 8007650:	2b30      	cmp	r3, #48	@ 0x30
 8007652:	d822      	bhi.n	800769a <HAL_CAN_IRQHandler+0x334>
 8007654:	2b10      	cmp	r3, #16
 8007656:	d002      	beq.n	800765e <HAL_CAN_IRQHandler+0x2f8>
 8007658:	2b20      	cmp	r3, #32
 800765a:	d005      	beq.n	8007668 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800765c:	e01d      	b.n	800769a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	f043 0308 	orr.w	r3, r3, #8
 8007664:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007666:	e019      	b.n	800769c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	f043 0310 	orr.w	r3, r3, #16
 800766e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007670:	e014      	b.n	800769c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007674:	f043 0320 	orr.w	r3, r3, #32
 8007678:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800767a:	e00f      	b.n	800769c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007684:	e00a      	b.n	800769c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800768e:	e005      	b.n	800769c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007698:	e000      	b.n	800769c <HAL_CAN_IRQHandler+0x336>
            break;
 800769a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80076aa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2204      	movs	r2, #4
 80076b2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f867 	bl	800779a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80076cc:	bf00      	nop
 80076ce:	3728      	adds	r7, #40	@ 0x28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bc80      	pop	{r7}
 80076e4:	4770      	bx	lr

080076e6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bc80      	pop	{r7}
 80076f6:	4770      	bx	lr

080076f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	bc80      	pop	{r7}
 8007708:	4770      	bx	lr

0800770a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	bc80      	pop	{r7}
 800771a:	4770      	bx	lr

0800771c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	bc80      	pop	{r7}
 800772c:	4770      	bx	lr

0800772e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr

08007740 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	bc80      	pop	{r7}
 8007750:	4770      	bx	lr

08007752 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr

08007764 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr

08007776 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr

08007788 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr

0800779a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80077a2:	bf00      	nop
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr

080077ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077bc:	4b0c      	ldr	r3, [pc, #48]	@ (80077f0 <__NVIC_SetPriorityGrouping+0x44>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80077c8:	4013      	ands	r3, r2
 80077ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80077d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077de:	4a04      	ldr	r2, [pc, #16]	@ (80077f0 <__NVIC_SetPriorityGrouping+0x44>)
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	60d3      	str	r3, [r2, #12]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80077f4:	b480      	push	{r7}
 80077f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077f8:	4b04      	ldr	r3, [pc, #16]	@ (800780c <__NVIC_GetPriorityGrouping+0x18>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	0a1b      	lsrs	r3, r3, #8
 80077fe:	f003 0307 	and.w	r3, r3, #7
}
 8007802:	4618      	mov	r0, r3
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	e000ed00 	.word	0xe000ed00

08007810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	4603      	mov	r3, r0
 8007818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800781a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781e:	2b00      	cmp	r3, #0
 8007820:	db0b      	blt.n	800783a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	f003 021f 	and.w	r2, r3, #31
 8007828:	4906      	ldr	r1, [pc, #24]	@ (8007844 <__NVIC_EnableIRQ+0x34>)
 800782a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	2001      	movs	r0, #1
 8007832:	fa00 f202 	lsl.w	r2, r0, r2
 8007836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	bc80      	pop	{r7}
 8007842:	4770      	bx	lr
 8007844:	e000e100 	.word	0xe000e100

08007848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	6039      	str	r1, [r7, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007858:	2b00      	cmp	r3, #0
 800785a:	db0a      	blt.n	8007872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	b2da      	uxtb	r2, r3
 8007860:	490c      	ldr	r1, [pc, #48]	@ (8007894 <__NVIC_SetPriority+0x4c>)
 8007862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007866:	0112      	lsls	r2, r2, #4
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	440b      	add	r3, r1
 800786c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007870:	e00a      	b.n	8007888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	b2da      	uxtb	r2, r3
 8007876:	4908      	ldr	r1, [pc, #32]	@ (8007898 <__NVIC_SetPriority+0x50>)
 8007878:	79fb      	ldrb	r3, [r7, #7]
 800787a:	f003 030f 	and.w	r3, r3, #15
 800787e:	3b04      	subs	r3, #4
 8007880:	0112      	lsls	r2, r2, #4
 8007882:	b2d2      	uxtb	r2, r2
 8007884:	440b      	add	r3, r1
 8007886:	761a      	strb	r2, [r3, #24]
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	bc80      	pop	{r7}
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	e000e100 	.word	0xe000e100
 8007898:	e000ed00 	.word	0xe000ed00

0800789c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800789c:	b480      	push	{r7}
 800789e:	b089      	sub	sp, #36	@ 0x24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f1c3 0307 	rsb	r3, r3, #7
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	bf28      	it	cs
 80078ba:	2304      	movcs	r3, #4
 80078bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	3304      	adds	r3, #4
 80078c2:	2b06      	cmp	r3, #6
 80078c4:	d902      	bls.n	80078cc <NVIC_EncodePriority+0x30>
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	3b03      	subs	r3, #3
 80078ca:	e000      	b.n	80078ce <NVIC_EncodePriority+0x32>
 80078cc:	2300      	movs	r3, #0
 80078ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078d0:	f04f 32ff 	mov.w	r2, #4294967295
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	43da      	mvns	r2, r3
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	401a      	ands	r2, r3
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078e4:	f04f 31ff 	mov.w	r1, #4294967295
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	fa01 f303 	lsl.w	r3, r1, r3
 80078ee:	43d9      	mvns	r1, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078f4:	4313      	orrs	r3, r2
         );
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3724      	adds	r7, #36	@ 0x24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bc80      	pop	{r7}
 80078fe:	4770      	bx	lr

08007900 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007900:	b480      	push	{r7}
 8007902:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007904:	f3bf 8f4f 	dsb	sy
}
 8007908:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800790a:	4b06      	ldr	r3, [pc, #24]	@ (8007924 <__NVIC_SystemReset+0x24>)
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007912:	4904      	ldr	r1, [pc, #16]	@ (8007924 <__NVIC_SystemReset+0x24>)
 8007914:	4b04      	ldr	r3, [pc, #16]	@ (8007928 <__NVIC_SystemReset+0x28>)
 8007916:	4313      	orrs	r3, r2
 8007918:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800791a:	f3bf 8f4f 	dsb	sy
}
 800791e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007920:	bf00      	nop
 8007922:	e7fd      	b.n	8007920 <__NVIC_SystemReset+0x20>
 8007924:	e000ed00 	.word	0xe000ed00
 8007928:	05fa0004 	.word	0x05fa0004

0800792c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3b01      	subs	r3, #1
 8007938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800793c:	d301      	bcc.n	8007942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800793e:	2301      	movs	r3, #1
 8007940:	e00f      	b.n	8007962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007942:	4a0a      	ldr	r2, [pc, #40]	@ (800796c <SysTick_Config+0x40>)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3b01      	subs	r3, #1
 8007948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800794a:	210f      	movs	r1, #15
 800794c:	f04f 30ff 	mov.w	r0, #4294967295
 8007950:	f7ff ff7a 	bl	8007848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007954:	4b05      	ldr	r3, [pc, #20]	@ (800796c <SysTick_Config+0x40>)
 8007956:	2200      	movs	r2, #0
 8007958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800795a:	4b04      	ldr	r3, [pc, #16]	@ (800796c <SysTick_Config+0x40>)
 800795c:	2207      	movs	r2, #7
 800795e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	e000e010 	.word	0xe000e010

08007970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff ff17 	bl	80077ac <__NVIC_SetPriorityGrouping>
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007986:	b580      	push	{r7, lr}
 8007988:	b086      	sub	sp, #24
 800798a:	af00      	add	r7, sp, #0
 800798c:	4603      	mov	r3, r0
 800798e:	60b9      	str	r1, [r7, #8]
 8007990:	607a      	str	r2, [r7, #4]
 8007992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007998:	f7ff ff2c 	bl	80077f4 <__NVIC_GetPriorityGrouping>
 800799c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	68b9      	ldr	r1, [r7, #8]
 80079a2:	6978      	ldr	r0, [r7, #20]
 80079a4:	f7ff ff7a 	bl	800789c <NVIC_EncodePriority>
 80079a8:	4602      	mov	r2, r0
 80079aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ae:	4611      	mov	r1, r2
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff ff49 	bl	8007848 <__NVIC_SetPriority>
}
 80079b6:	bf00      	nop
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	4603      	mov	r3, r0
 80079c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff ff1f 	bl	8007810 <__NVIC_EnableIRQ>
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80079de:	f7ff ff8f 	bl	8007900 <__NVIC_SystemReset>

080079e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7ff ff9e 	bl	800792c <SysTick_Config>
 80079f0:	4603      	mov	r3, r0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d008      	beq.n	8007a24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2204      	movs	r2, #4
 8007a16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e020      	b.n	8007a66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 020e 	bic.w	r2, r2, #14
 8007a32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0201 	bic.w	r2, r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8007a52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr

08007a70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d005      	beq.n	8007a94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	73fb      	strb	r3, [r7, #15]
 8007a92:	e051      	b.n	8007b38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 020e 	bic.w	r2, r2, #14
 8007aa2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a22      	ldr	r2, [pc, #136]	@ (8007b44 <HAL_DMA_Abort_IT+0xd4>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d029      	beq.n	8007b12 <HAL_DMA_Abort_IT+0xa2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a21      	ldr	r2, [pc, #132]	@ (8007b48 <HAL_DMA_Abort_IT+0xd8>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d022      	beq.n	8007b0e <HAL_DMA_Abort_IT+0x9e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a1f      	ldr	r2, [pc, #124]	@ (8007b4c <HAL_DMA_Abort_IT+0xdc>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d01a      	beq.n	8007b08 <HAL_DMA_Abort_IT+0x98>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b50 <HAL_DMA_Abort_IT+0xe0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d012      	beq.n	8007b02 <HAL_DMA_Abort_IT+0x92>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b54 <HAL_DMA_Abort_IT+0xe4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00a      	beq.n	8007afc <HAL_DMA_Abort_IT+0x8c>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a1b      	ldr	r2, [pc, #108]	@ (8007b58 <HAL_DMA_Abort_IT+0xe8>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d102      	bne.n	8007af6 <HAL_DMA_Abort_IT+0x86>
 8007af0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007af4:	e00e      	b.n	8007b14 <HAL_DMA_Abort_IT+0xa4>
 8007af6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007afa:	e00b      	b.n	8007b14 <HAL_DMA_Abort_IT+0xa4>
 8007afc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007b00:	e008      	b.n	8007b14 <HAL_DMA_Abort_IT+0xa4>
 8007b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007b06:	e005      	b.n	8007b14 <HAL_DMA_Abort_IT+0xa4>
 8007b08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b0c:	e002      	b.n	8007b14 <HAL_DMA_Abort_IT+0xa4>
 8007b0e:	2310      	movs	r3, #16
 8007b10:	e000      	b.n	8007b14 <HAL_DMA_Abort_IT+0xa4>
 8007b12:	2301      	movs	r3, #1
 8007b14:	4a11      	ldr	r2, [pc, #68]	@ (8007b5c <HAL_DMA_Abort_IT+0xec>)
 8007b16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
    } 
  }
  return status;
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	40020008 	.word	0x40020008
 8007b48:	4002001c 	.word	0x4002001c
 8007b4c:	40020030 	.word	0x40020030
 8007b50:	40020044 	.word	0x40020044
 8007b54:	40020058 	.word	0x40020058
 8007b58:	4002006c 	.word	0x4002006c
 8007b5c:	40020000 	.word	0x40020000

08007b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b08b      	sub	sp, #44	@ 0x2c
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b72:	e169      	b.n	8007e48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007b74:	2201      	movs	r2, #1
 8007b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b78:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	4013      	ands	r3, r2
 8007b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	f040 8158 	bne.w	8007e42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	4a9a      	ldr	r2, [pc, #616]	@ (8007e00 <HAL_GPIO_Init+0x2a0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d05e      	beq.n	8007c5a <HAL_GPIO_Init+0xfa>
 8007b9c:	4a98      	ldr	r2, [pc, #608]	@ (8007e00 <HAL_GPIO_Init+0x2a0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d875      	bhi.n	8007c8e <HAL_GPIO_Init+0x12e>
 8007ba2:	4a98      	ldr	r2, [pc, #608]	@ (8007e04 <HAL_GPIO_Init+0x2a4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d058      	beq.n	8007c5a <HAL_GPIO_Init+0xfa>
 8007ba8:	4a96      	ldr	r2, [pc, #600]	@ (8007e04 <HAL_GPIO_Init+0x2a4>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d86f      	bhi.n	8007c8e <HAL_GPIO_Init+0x12e>
 8007bae:	4a96      	ldr	r2, [pc, #600]	@ (8007e08 <HAL_GPIO_Init+0x2a8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d052      	beq.n	8007c5a <HAL_GPIO_Init+0xfa>
 8007bb4:	4a94      	ldr	r2, [pc, #592]	@ (8007e08 <HAL_GPIO_Init+0x2a8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d869      	bhi.n	8007c8e <HAL_GPIO_Init+0x12e>
 8007bba:	4a94      	ldr	r2, [pc, #592]	@ (8007e0c <HAL_GPIO_Init+0x2ac>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d04c      	beq.n	8007c5a <HAL_GPIO_Init+0xfa>
 8007bc0:	4a92      	ldr	r2, [pc, #584]	@ (8007e0c <HAL_GPIO_Init+0x2ac>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d863      	bhi.n	8007c8e <HAL_GPIO_Init+0x12e>
 8007bc6:	4a92      	ldr	r2, [pc, #584]	@ (8007e10 <HAL_GPIO_Init+0x2b0>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d046      	beq.n	8007c5a <HAL_GPIO_Init+0xfa>
 8007bcc:	4a90      	ldr	r2, [pc, #576]	@ (8007e10 <HAL_GPIO_Init+0x2b0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d85d      	bhi.n	8007c8e <HAL_GPIO_Init+0x12e>
 8007bd2:	2b12      	cmp	r3, #18
 8007bd4:	d82a      	bhi.n	8007c2c <HAL_GPIO_Init+0xcc>
 8007bd6:	2b12      	cmp	r3, #18
 8007bd8:	d859      	bhi.n	8007c8e <HAL_GPIO_Init+0x12e>
 8007bda:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <HAL_GPIO_Init+0x80>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007c5b 	.word	0x08007c5b
 8007be4:	08007c35 	.word	0x08007c35
 8007be8:	08007c47 	.word	0x08007c47
 8007bec:	08007c89 	.word	0x08007c89
 8007bf0:	08007c8f 	.word	0x08007c8f
 8007bf4:	08007c8f 	.word	0x08007c8f
 8007bf8:	08007c8f 	.word	0x08007c8f
 8007bfc:	08007c8f 	.word	0x08007c8f
 8007c00:	08007c8f 	.word	0x08007c8f
 8007c04:	08007c8f 	.word	0x08007c8f
 8007c08:	08007c8f 	.word	0x08007c8f
 8007c0c:	08007c8f 	.word	0x08007c8f
 8007c10:	08007c8f 	.word	0x08007c8f
 8007c14:	08007c8f 	.word	0x08007c8f
 8007c18:	08007c8f 	.word	0x08007c8f
 8007c1c:	08007c8f 	.word	0x08007c8f
 8007c20:	08007c8f 	.word	0x08007c8f
 8007c24:	08007c3d 	.word	0x08007c3d
 8007c28:	08007c51 	.word	0x08007c51
 8007c2c:	4a79      	ldr	r2, [pc, #484]	@ (8007e14 <HAL_GPIO_Init+0x2b4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007c32:	e02c      	b.n	8007c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	623b      	str	r3, [r7, #32]
          break;
 8007c3a:	e029      	b.n	8007c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	3304      	adds	r3, #4
 8007c42:	623b      	str	r3, [r7, #32]
          break;
 8007c44:	e024      	b.n	8007c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	623b      	str	r3, [r7, #32]
          break;
 8007c4e:	e01f      	b.n	8007c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	330c      	adds	r3, #12
 8007c56:	623b      	str	r3, [r7, #32]
          break;
 8007c58:	e01a      	b.n	8007c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d102      	bne.n	8007c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007c62:	2304      	movs	r3, #4
 8007c64:	623b      	str	r3, [r7, #32]
          break;
 8007c66:	e013      	b.n	8007c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d105      	bne.n	8007c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c70:	2308      	movs	r3, #8
 8007c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	611a      	str	r2, [r3, #16]
          break;
 8007c7a:	e009      	b.n	8007c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007c7c:	2308      	movs	r3, #8
 8007c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	615a      	str	r2, [r3, #20]
          break;
 8007c86:	e003      	b.n	8007c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	623b      	str	r3, [r7, #32]
          break;
 8007c8c:	e000      	b.n	8007c90 <HAL_GPIO_Init+0x130>
          break;
 8007c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2bff      	cmp	r3, #255	@ 0xff
 8007c94:	d801      	bhi.n	8007c9a <HAL_GPIO_Init+0x13a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	e001      	b.n	8007c9e <HAL_GPIO_Init+0x13e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	2bff      	cmp	r3, #255	@ 0xff
 8007ca4:	d802      	bhi.n	8007cac <HAL_GPIO_Init+0x14c>
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	e002      	b.n	8007cb2 <HAL_GPIO_Init+0x152>
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	3b08      	subs	r3, #8
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	210f      	movs	r1, #15
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc0:	43db      	mvns	r3, r3
 8007cc2:	401a      	ands	r2, r3
 8007cc4:	6a39      	ldr	r1, [r7, #32]
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f000 80b1 	beq.w	8007e42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8007e18 <HAL_GPIO_Init+0x2b8>)
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	4a4c      	ldr	r2, [pc, #304]	@ (8007e18 <HAL_GPIO_Init+0x2b8>)
 8007ce6:	f043 0301 	orr.w	r3, r3, #1
 8007cea:	6193      	str	r3, [r2, #24]
 8007cec:	4b4a      	ldr	r3, [pc, #296]	@ (8007e18 <HAL_GPIO_Init+0x2b8>)
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	60bb      	str	r3, [r7, #8]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007cf8:	4a48      	ldr	r2, [pc, #288]	@ (8007e1c <HAL_GPIO_Init+0x2bc>)
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	089b      	lsrs	r3, r3, #2
 8007cfe:	3302      	adds	r3, #2
 8007d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	220f      	movs	r2, #15
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	43db      	mvns	r3, r3
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a40      	ldr	r2, [pc, #256]	@ (8007e20 <HAL_GPIO_Init+0x2c0>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d013      	beq.n	8007d4c <HAL_GPIO_Init+0x1ec>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a3f      	ldr	r2, [pc, #252]	@ (8007e24 <HAL_GPIO_Init+0x2c4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00d      	beq.n	8007d48 <HAL_GPIO_Init+0x1e8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8007e28 <HAL_GPIO_Init+0x2c8>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d007      	beq.n	8007d44 <HAL_GPIO_Init+0x1e4>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a3d      	ldr	r2, [pc, #244]	@ (8007e2c <HAL_GPIO_Init+0x2cc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d101      	bne.n	8007d40 <HAL_GPIO_Init+0x1e0>
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e006      	b.n	8007d4e <HAL_GPIO_Init+0x1ee>
 8007d40:	2304      	movs	r3, #4
 8007d42:	e004      	b.n	8007d4e <HAL_GPIO_Init+0x1ee>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e002      	b.n	8007d4e <HAL_GPIO_Init+0x1ee>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <HAL_GPIO_Init+0x1ee>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d50:	f002 0203 	and.w	r2, r2, #3
 8007d54:	0092      	lsls	r2, r2, #2
 8007d56:	4093      	lsls	r3, r2
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007d5e:	492f      	ldr	r1, [pc, #188]	@ (8007e1c <HAL_GPIO_Init+0x2bc>)
 8007d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d62:	089b      	lsrs	r3, r3, #2
 8007d64:	3302      	adds	r3, #2
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d006      	beq.n	8007d86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007d78:	4b2d      	ldr	r3, [pc, #180]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	492c      	ldr	r1, [pc, #176]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	608b      	str	r3, [r1, #8]
 8007d84:	e006      	b.n	8007d94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007d86:	4b2a      	ldr	r3, [pc, #168]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	4928      	ldr	r1, [pc, #160]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007d90:	4013      	ands	r3, r2
 8007d92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d006      	beq.n	8007dae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007da0:	4b23      	ldr	r3, [pc, #140]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	4922      	ldr	r1, [pc, #136]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60cb      	str	r3, [r1, #12]
 8007dac:	e006      	b.n	8007dbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007dae:	4b20      	ldr	r3, [pc, #128]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	43db      	mvns	r3, r3
 8007db6:	491e      	ldr	r1, [pc, #120]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007db8:	4013      	ands	r3, r2
 8007dba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d006      	beq.n	8007dd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007dc8:	4b19      	ldr	r3, [pc, #100]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	4918      	ldr	r1, [pc, #96]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	604b      	str	r3, [r1, #4]
 8007dd4:	e006      	b.n	8007de4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007dd6:	4b16      	ldr	r3, [pc, #88]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	43db      	mvns	r3, r3
 8007dde:	4914      	ldr	r1, [pc, #80]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d021      	beq.n	8007e34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007df0:	4b0f      	ldr	r3, [pc, #60]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	490e      	ldr	r1, [pc, #56]	@ (8007e30 <HAL_GPIO_Init+0x2d0>)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	600b      	str	r3, [r1, #0]
 8007dfc:	e021      	b.n	8007e42 <HAL_GPIO_Init+0x2e2>
 8007dfe:	bf00      	nop
 8007e00:	10320000 	.word	0x10320000
 8007e04:	10310000 	.word	0x10310000
 8007e08:	10220000 	.word	0x10220000
 8007e0c:	10210000 	.word	0x10210000
 8007e10:	10120000 	.word	0x10120000
 8007e14:	10110000 	.word	0x10110000
 8007e18:	40021000 	.word	0x40021000
 8007e1c:	40010000 	.word	0x40010000
 8007e20:	40010800 	.word	0x40010800
 8007e24:	40010c00 	.word	0x40010c00
 8007e28:	40011000 	.word	0x40011000
 8007e2c:	40011400 	.word	0x40011400
 8007e30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007e34:	4b0b      	ldr	r3, [pc, #44]	@ (8007e64 <HAL_GPIO_Init+0x304>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	4909      	ldr	r1, [pc, #36]	@ (8007e64 <HAL_GPIO_Init+0x304>)
 8007e3e:	4013      	ands	r3, r2
 8007e40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	3301      	adds	r3, #1
 8007e46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f47f ae8e 	bne.w	8007b74 <HAL_GPIO_Init+0x14>
  }
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	372c      	adds	r7, #44	@ 0x2c
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr
 8007e64:	40010400 	.word	0x40010400

08007e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	460b      	mov	r3, r1
 8007e72:	807b      	strh	r3, [r7, #2]
 8007e74:	4613      	mov	r3, r2
 8007e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e78:	787b      	ldrb	r3, [r7, #1]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e7e:	887a      	ldrh	r2, [r7, #2]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007e84:	e003      	b.n	8007e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007e86:	887b      	ldrh	r3, [r7, #2]
 8007e88:	041a      	lsls	r2, r3, #16
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	611a      	str	r2, [r3, #16]
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr

08007e98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007eaa:	887a      	ldrh	r2, [r7, #2]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	041a      	lsls	r2, r3, #16
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	43d9      	mvns	r1, r3
 8007eb6:	887b      	ldrh	r3, [r7, #2]
 8007eb8:	400b      	ands	r3, r1
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	611a      	str	r2, [r3, #16]
}
 8007ec0:	bf00      	nop
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bc80      	pop	{r7}
 8007ec8:	4770      	bx	lr
	...

08007ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b086      	sub	sp, #24
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e272      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 8087 	beq.w	8007ffa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007eec:	4b92      	ldr	r3, [pc, #584]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f003 030c 	and.w	r3, r3, #12
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d00c      	beq.n	8007f12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007ef8:	4b8f      	ldr	r3, [pc, #572]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f003 030c 	and.w	r3, r3, #12
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d112      	bne.n	8007f2a <HAL_RCC_OscConfig+0x5e>
 8007f04:	4b8c      	ldr	r3, [pc, #560]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f10:	d10b      	bne.n	8007f2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f12:	4b89      	ldr	r3, [pc, #548]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d06c      	beq.n	8007ff8 <HAL_RCC_OscConfig+0x12c>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d168      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e24c      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f32:	d106      	bne.n	8007f42 <HAL_RCC_OscConfig+0x76>
 8007f34:	4b80      	ldr	r3, [pc, #512]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a7f      	ldr	r2, [pc, #508]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	e02e      	b.n	8007fa0 <HAL_RCC_OscConfig+0xd4>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10c      	bne.n	8007f64 <HAL_RCC_OscConfig+0x98>
 8007f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a7a      	ldr	r2, [pc, #488]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	4b78      	ldr	r3, [pc, #480]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a77      	ldr	r2, [pc, #476]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f60:	6013      	str	r3, [r2, #0]
 8007f62:	e01d      	b.n	8007fa0 <HAL_RCC_OscConfig+0xd4>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f6c:	d10c      	bne.n	8007f88 <HAL_RCC_OscConfig+0xbc>
 8007f6e:	4b72      	ldr	r3, [pc, #456]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a71      	ldr	r2, [pc, #452]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a6e      	ldr	r2, [pc, #440]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	e00b      	b.n	8007fa0 <HAL_RCC_OscConfig+0xd4>
 8007f88:	4b6b      	ldr	r3, [pc, #428]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a6a      	ldr	r2, [pc, #424]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f92:	6013      	str	r3, [r2, #0]
 8007f94:	4b68      	ldr	r3, [pc, #416]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a67      	ldr	r2, [pc, #412]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d013      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fa8:	f7fe fd92 	bl	8006ad0 <HAL_GetTick>
 8007fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fae:	e008      	b.n	8007fc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fb0:	f7fe fd8e 	bl	8006ad0 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b64      	cmp	r3, #100	@ 0x64
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e200      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0f0      	beq.n	8007fb0 <HAL_RCC_OscConfig+0xe4>
 8007fce:	e014      	b.n	8007ffa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fd0:	f7fe fd7e 	bl	8006ad0 <HAL_GetTick>
 8007fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fd6:	e008      	b.n	8007fea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fd8:	f7fe fd7a 	bl	8006ad0 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	2b64      	cmp	r3, #100	@ 0x64
 8007fe4:	d901      	bls.n	8007fea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e1ec      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fea:	4b53      	ldr	r3, [pc, #332]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1f0      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x10c>
 8007ff6:	e000      	b.n	8007ffa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d063      	beq.n	80080ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008006:	4b4c      	ldr	r3, [pc, #304]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f003 030c 	and.w	r3, r3, #12
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00b      	beq.n	800802a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008012:	4b49      	ldr	r3, [pc, #292]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f003 030c 	and.w	r3, r3, #12
 800801a:	2b08      	cmp	r3, #8
 800801c:	d11c      	bne.n	8008058 <HAL_RCC_OscConfig+0x18c>
 800801e:	4b46      	ldr	r3, [pc, #280]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d116      	bne.n	8008058 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800802a:	4b43      	ldr	r3, [pc, #268]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d005      	beq.n	8008042 <HAL_RCC_OscConfig+0x176>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d001      	beq.n	8008042 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e1c0      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008042:	4b3d      	ldr	r3, [pc, #244]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	4939      	ldr	r1, [pc, #228]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8008052:	4313      	orrs	r3, r2
 8008054:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008056:	e03a      	b.n	80080ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d020      	beq.n	80080a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008060:	4b36      	ldr	r3, [pc, #216]	@ (800813c <HAL_RCC_OscConfig+0x270>)
 8008062:	2201      	movs	r2, #1
 8008064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008066:	f7fe fd33 	bl	8006ad0 <HAL_GetTick>
 800806a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800806c:	e008      	b.n	8008080 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800806e:	f7fe fd2f 	bl	8006ad0 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d901      	bls.n	8008080 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e1a1      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008080:	4b2d      	ldr	r3, [pc, #180]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0f0      	beq.n	800806e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800808c:	4b2a      	ldr	r3, [pc, #168]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	4927      	ldr	r1, [pc, #156]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 800809c:	4313      	orrs	r3, r2
 800809e:	600b      	str	r3, [r1, #0]
 80080a0:	e015      	b.n	80080ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080a2:	4b26      	ldr	r3, [pc, #152]	@ (800813c <HAL_RCC_OscConfig+0x270>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080a8:	f7fe fd12 	bl	8006ad0 <HAL_GetTick>
 80080ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ae:	e008      	b.n	80080c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080b0:	f7fe fd0e 	bl	8006ad0 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e180      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1f0      	bne.n	80080b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 0308 	and.w	r3, r3, #8
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d03a      	beq.n	8008150 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d019      	beq.n	8008116 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080e2:	4b17      	ldr	r3, [pc, #92]	@ (8008140 <HAL_RCC_OscConfig+0x274>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080e8:	f7fe fcf2 	bl	8006ad0 <HAL_GetTick>
 80080ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080f0:	f7fe fcee 	bl	8006ad0 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e160      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008102:	4b0d      	ldr	r3, [pc, #52]	@ (8008138 <HAL_RCC_OscConfig+0x26c>)
 8008104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0f0      	beq.n	80080f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800810e:	2001      	movs	r0, #1
 8008110:	f000 face 	bl	80086b0 <RCC_Delay>
 8008114:	e01c      	b.n	8008150 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008116:	4b0a      	ldr	r3, [pc, #40]	@ (8008140 <HAL_RCC_OscConfig+0x274>)
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800811c:	f7fe fcd8 	bl	8006ad0 <HAL_GetTick>
 8008120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008122:	e00f      	b.n	8008144 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008124:	f7fe fcd4 	bl	8006ad0 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b02      	cmp	r3, #2
 8008130:	d908      	bls.n	8008144 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e146      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
 8008136:	bf00      	nop
 8008138:	40021000 	.word	0x40021000
 800813c:	42420000 	.word	0x42420000
 8008140:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008144:	4b92      	ldr	r3, [pc, #584]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e9      	bne.n	8008124 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80a6 	beq.w	80082aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800815e:	2300      	movs	r3, #0
 8008160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008162:	4b8b      	ldr	r3, [pc, #556]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10d      	bne.n	800818a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800816e:	4b88      	ldr	r3, [pc, #544]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	4a87      	ldr	r2, [pc, #540]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008178:	61d3      	str	r3, [r2, #28]
 800817a:	4b85      	ldr	r3, [pc, #532]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008182:	60bb      	str	r3, [r7, #8]
 8008184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008186:	2301      	movs	r3, #1
 8008188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800818a:	4b82      	ldr	r3, [pc, #520]	@ (8008394 <HAL_RCC_OscConfig+0x4c8>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008192:	2b00      	cmp	r3, #0
 8008194:	d118      	bne.n	80081c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008196:	4b7f      	ldr	r3, [pc, #508]	@ (8008394 <HAL_RCC_OscConfig+0x4c8>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a7e      	ldr	r2, [pc, #504]	@ (8008394 <HAL_RCC_OscConfig+0x4c8>)
 800819c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081a2:	f7fe fc95 	bl	8006ad0 <HAL_GetTick>
 80081a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081a8:	e008      	b.n	80081bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081aa:	f7fe fc91 	bl	8006ad0 <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b64      	cmp	r3, #100	@ 0x64
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e103      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081bc:	4b75      	ldr	r3, [pc, #468]	@ (8008394 <HAL_RCC_OscConfig+0x4c8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0f0      	beq.n	80081aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d106      	bne.n	80081de <HAL_RCC_OscConfig+0x312>
 80081d0:	4b6f      	ldr	r3, [pc, #444]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	4a6e      	ldr	r2, [pc, #440]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80081d6:	f043 0301 	orr.w	r3, r3, #1
 80081da:	6213      	str	r3, [r2, #32]
 80081dc:	e02d      	b.n	800823a <HAL_RCC_OscConfig+0x36e>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10c      	bne.n	8008200 <HAL_RCC_OscConfig+0x334>
 80081e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	4a69      	ldr	r2, [pc, #420]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80081ec:	f023 0301 	bic.w	r3, r3, #1
 80081f0:	6213      	str	r3, [r2, #32]
 80081f2:	4b67      	ldr	r3, [pc, #412]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	4a66      	ldr	r2, [pc, #408]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80081f8:	f023 0304 	bic.w	r3, r3, #4
 80081fc:	6213      	str	r3, [r2, #32]
 80081fe:	e01c      	b.n	800823a <HAL_RCC_OscConfig+0x36e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	2b05      	cmp	r3, #5
 8008206:	d10c      	bne.n	8008222 <HAL_RCC_OscConfig+0x356>
 8008208:	4b61      	ldr	r3, [pc, #388]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	4a60      	ldr	r2, [pc, #384]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 800820e:	f043 0304 	orr.w	r3, r3, #4
 8008212:	6213      	str	r3, [r2, #32]
 8008214:	4b5e      	ldr	r3, [pc, #376]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	4a5d      	ldr	r2, [pc, #372]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 800821a:	f043 0301 	orr.w	r3, r3, #1
 800821e:	6213      	str	r3, [r2, #32]
 8008220:	e00b      	b.n	800823a <HAL_RCC_OscConfig+0x36e>
 8008222:	4b5b      	ldr	r3, [pc, #364]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	4a5a      	ldr	r2, [pc, #360]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008228:	f023 0301 	bic.w	r3, r3, #1
 800822c:	6213      	str	r3, [r2, #32]
 800822e:	4b58      	ldr	r3, [pc, #352]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	4a57      	ldr	r2, [pc, #348]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008234:	f023 0304 	bic.w	r3, r3, #4
 8008238:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d015      	beq.n	800826e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008242:	f7fe fc45 	bl	8006ad0 <HAL_GetTick>
 8008246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008248:	e00a      	b.n	8008260 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800824a:	f7fe fc41 	bl	8006ad0 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008258:	4293      	cmp	r3, r2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e0b1      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008260:	4b4b      	ldr	r3, [pc, #300]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0ee      	beq.n	800824a <HAL_RCC_OscConfig+0x37e>
 800826c:	e014      	b.n	8008298 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800826e:	f7fe fc2f 	bl	8006ad0 <HAL_GetTick>
 8008272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008274:	e00a      	b.n	800828c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008276:	f7fe fc2b 	bl	8006ad0 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008284:	4293      	cmp	r3, r2
 8008286:	d901      	bls.n	800828c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e09b      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800828c:	4b40      	ldr	r3, [pc, #256]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	f003 0302 	and.w	r3, r3, #2
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1ee      	bne.n	8008276 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d105      	bne.n	80082aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800829e:	4b3c      	ldr	r3, [pc, #240]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80082a0:	69db      	ldr	r3, [r3, #28]
 80082a2:	4a3b      	ldr	r2, [pc, #236]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80082a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f000 8087 	beq.w	80083c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082b4:	4b36      	ldr	r3, [pc, #216]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f003 030c 	and.w	r3, r3, #12
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d061      	beq.n	8008384 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d146      	bne.n	8008356 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082c8:	4b33      	ldr	r3, [pc, #204]	@ (8008398 <HAL_RCC_OscConfig+0x4cc>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082ce:	f7fe fbff 	bl	8006ad0 <HAL_GetTick>
 80082d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082d4:	e008      	b.n	80082e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082d6:	f7fe fbfb 	bl	8006ad0 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d901      	bls.n	80082e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e06d      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082e8:	4b29      	ldr	r3, [pc, #164]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1f0      	bne.n	80082d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082fc:	d108      	bne.n	8008310 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80082fe:	4b24      	ldr	r3, [pc, #144]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	4921      	ldr	r1, [pc, #132]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 800830c:	4313      	orrs	r3, r2
 800830e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008310:	4b1f      	ldr	r3, [pc, #124]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a19      	ldr	r1, [r3, #32]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008320:	430b      	orrs	r3, r1
 8008322:	491b      	ldr	r1, [pc, #108]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008324:	4313      	orrs	r3, r2
 8008326:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008328:	4b1b      	ldr	r3, [pc, #108]	@ (8008398 <HAL_RCC_OscConfig+0x4cc>)
 800832a:	2201      	movs	r2, #1
 800832c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800832e:	f7fe fbcf 	bl	8006ad0 <HAL_GetTick>
 8008332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008334:	e008      	b.n	8008348 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008336:	f7fe fbcb 	bl	8006ad0 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e03d      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008348:	4b11      	ldr	r3, [pc, #68]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d0f0      	beq.n	8008336 <HAL_RCC_OscConfig+0x46a>
 8008354:	e035      	b.n	80083c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008356:	4b10      	ldr	r3, [pc, #64]	@ (8008398 <HAL_RCC_OscConfig+0x4cc>)
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800835c:	f7fe fbb8 	bl	8006ad0 <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008364:	f7fe fbb4 	bl	8006ad0 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e026      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008376:	4b06      	ldr	r3, [pc, #24]	@ (8008390 <HAL_RCC_OscConfig+0x4c4>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f0      	bne.n	8008364 <HAL_RCC_OscConfig+0x498>
 8008382:	e01e      	b.n	80083c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d107      	bne.n	800839c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e019      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
 8008390:	40021000 	.word	0x40021000
 8008394:	40007000 	.word	0x40007000
 8008398:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800839c:	4b0b      	ldr	r3, [pc, #44]	@ (80083cc <HAL_RCC_OscConfig+0x500>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d106      	bne.n	80083be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d001      	beq.n	80083c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40021000 	.word	0x40021000

080083d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e0d0      	b.n	8008586 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083e4:	4b6a      	ldr	r3, [pc, #424]	@ (8008590 <HAL_RCC_ClockConfig+0x1c0>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d910      	bls.n	8008414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f2:	4b67      	ldr	r3, [pc, #412]	@ (8008590 <HAL_RCC_ClockConfig+0x1c0>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f023 0207 	bic.w	r2, r3, #7
 80083fa:	4965      	ldr	r1, [pc, #404]	@ (8008590 <HAL_RCC_ClockConfig+0x1c0>)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	4313      	orrs	r3, r2
 8008400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008402:	4b63      	ldr	r3, [pc, #396]	@ (8008590 <HAL_RCC_ClockConfig+0x1c0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	429a      	cmp	r2, r3
 800840e:	d001      	beq.n	8008414 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e0b8      	b.n	8008586 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d020      	beq.n	8008462 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800842c:	4b59      	ldr	r3, [pc, #356]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	4a58      	ldr	r2, [pc, #352]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 8008432:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008436:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b00      	cmp	r3, #0
 8008442:	d005      	beq.n	8008450 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008444:	4b53      	ldr	r3, [pc, #332]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	4a52      	ldr	r2, [pc, #328]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 800844a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800844e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008450:	4b50      	ldr	r3, [pc, #320]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	494d      	ldr	r1, [pc, #308]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 800845e:	4313      	orrs	r3, r2
 8008460:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d040      	beq.n	80084f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d107      	bne.n	8008486 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008476:	4b47      	ldr	r3, [pc, #284]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d115      	bne.n	80084ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	e07f      	b.n	8008586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d107      	bne.n	800849e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800848e:	4b41      	ldr	r3, [pc, #260]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d109      	bne.n	80084ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e073      	b.n	8008586 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800849e:	4b3d      	ldr	r3, [pc, #244]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e06b      	b.n	8008586 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084ae:	4b39      	ldr	r3, [pc, #228]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f023 0203 	bic.w	r2, r3, #3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	4936      	ldr	r1, [pc, #216]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084c0:	f7fe fb06 	bl	8006ad0 <HAL_GetTick>
 80084c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084c6:	e00a      	b.n	80084de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084c8:	f7fe fb02 	bl	8006ad0 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e053      	b.n	8008586 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084de:	4b2d      	ldr	r3, [pc, #180]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f003 020c 	and.w	r2, r3, #12
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d1eb      	bne.n	80084c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084f0:	4b27      	ldr	r3, [pc, #156]	@ (8008590 <HAL_RCC_ClockConfig+0x1c0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0307 	and.w	r3, r3, #7
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d210      	bcs.n	8008520 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084fe:	4b24      	ldr	r3, [pc, #144]	@ (8008590 <HAL_RCC_ClockConfig+0x1c0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f023 0207 	bic.w	r2, r3, #7
 8008506:	4922      	ldr	r1, [pc, #136]	@ (8008590 <HAL_RCC_ClockConfig+0x1c0>)
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	4313      	orrs	r3, r2
 800850c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800850e:	4b20      	ldr	r3, [pc, #128]	@ (8008590 <HAL_RCC_ClockConfig+0x1c0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d001      	beq.n	8008520 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e032      	b.n	8008586 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b00      	cmp	r3, #0
 800852a:	d008      	beq.n	800853e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800852c:	4b19      	ldr	r3, [pc, #100]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	4916      	ldr	r1, [pc, #88]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 800853a:	4313      	orrs	r3, r2
 800853c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800854a:	4b12      	ldr	r3, [pc, #72]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	490e      	ldr	r1, [pc, #56]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 800855a:	4313      	orrs	r3, r2
 800855c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800855e:	f000 f821 	bl	80085a4 <HAL_RCC_GetSysClockFreq>
 8008562:	4602      	mov	r2, r0
 8008564:	4b0b      	ldr	r3, [pc, #44]	@ (8008594 <HAL_RCC_ClockConfig+0x1c4>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	091b      	lsrs	r3, r3, #4
 800856a:	f003 030f 	and.w	r3, r3, #15
 800856e:	490a      	ldr	r1, [pc, #40]	@ (8008598 <HAL_RCC_ClockConfig+0x1c8>)
 8008570:	5ccb      	ldrb	r3, [r1, r3]
 8008572:	fa22 f303 	lsr.w	r3, r2, r3
 8008576:	4a09      	ldr	r2, [pc, #36]	@ (800859c <HAL_RCC_ClockConfig+0x1cc>)
 8008578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800857a:	4b09      	ldr	r3, [pc, #36]	@ (80085a0 <HAL_RCC_ClockConfig+0x1d0>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f7fe fa64 	bl	8006a4c <HAL_InitTick>

  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	40022000 	.word	0x40022000
 8008594:	40021000 	.word	0x40021000
 8008598:	0800b058 	.word	0x0800b058
 800859c:	20000000 	.word	0x20000000
 80085a0:	20000004 	.word	0x20000004

080085a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b087      	sub	sp, #28
 80085a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	2300      	movs	r3, #0
 80085b0:	60bb      	str	r3, [r7, #8]
 80085b2:	2300      	movs	r3, #0
 80085b4:	617b      	str	r3, [r7, #20]
 80085b6:	2300      	movs	r3, #0
 80085b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80085be:	4b1e      	ldr	r3, [pc, #120]	@ (8008638 <HAL_RCC_GetSysClockFreq+0x94>)
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 030c 	and.w	r3, r3, #12
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d002      	beq.n	80085d4 <HAL_RCC_GetSysClockFreq+0x30>
 80085ce:	2b08      	cmp	r3, #8
 80085d0:	d003      	beq.n	80085da <HAL_RCC_GetSysClockFreq+0x36>
 80085d2:	e027      	b.n	8008624 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80085d4:	4b19      	ldr	r3, [pc, #100]	@ (800863c <HAL_RCC_GetSysClockFreq+0x98>)
 80085d6:	613b      	str	r3, [r7, #16]
      break;
 80085d8:	e027      	b.n	800862a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	0c9b      	lsrs	r3, r3, #18
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	4a17      	ldr	r2, [pc, #92]	@ (8008640 <HAL_RCC_GetSysClockFreq+0x9c>)
 80085e4:	5cd3      	ldrb	r3, [r2, r3]
 80085e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d010      	beq.n	8008614 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80085f2:	4b11      	ldr	r3, [pc, #68]	@ (8008638 <HAL_RCC_GetSysClockFreq+0x94>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	0c5b      	lsrs	r3, r3, #17
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	4a11      	ldr	r2, [pc, #68]	@ (8008644 <HAL_RCC_GetSysClockFreq+0xa0>)
 80085fe:	5cd3      	ldrb	r3, [r2, r3]
 8008600:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a0d      	ldr	r2, [pc, #52]	@ (800863c <HAL_RCC_GetSysClockFreq+0x98>)
 8008606:	fb03 f202 	mul.w	r2, r3, r2
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	e004      	b.n	800861e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a0c      	ldr	r2, [pc, #48]	@ (8008648 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008618:	fb02 f303 	mul.w	r3, r2, r3
 800861c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	613b      	str	r3, [r7, #16]
      break;
 8008622:	e002      	b.n	800862a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008624:	4b05      	ldr	r3, [pc, #20]	@ (800863c <HAL_RCC_GetSysClockFreq+0x98>)
 8008626:	613b      	str	r3, [r7, #16]
      break;
 8008628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800862a:	693b      	ldr	r3, [r7, #16]
}
 800862c:	4618      	mov	r0, r3
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	bc80      	pop	{r7}
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	40021000 	.word	0x40021000
 800863c:	007a1200 	.word	0x007a1200
 8008640:	0800b070 	.word	0x0800b070
 8008644:	0800b080 	.word	0x0800b080
 8008648:	003d0900 	.word	0x003d0900

0800864c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800864c:	b480      	push	{r7}
 800864e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008650:	4b02      	ldr	r3, [pc, #8]	@ (800865c <HAL_RCC_GetHCLKFreq+0x10>)
 8008652:	681b      	ldr	r3, [r3, #0]
}
 8008654:	4618      	mov	r0, r3
 8008656:	46bd      	mov	sp, r7
 8008658:	bc80      	pop	{r7}
 800865a:	4770      	bx	lr
 800865c:	20000000 	.word	0x20000000

08008660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008664:	f7ff fff2 	bl	800864c <HAL_RCC_GetHCLKFreq>
 8008668:	4602      	mov	r2, r0
 800866a:	4b05      	ldr	r3, [pc, #20]	@ (8008680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	0a1b      	lsrs	r3, r3, #8
 8008670:	f003 0307 	and.w	r3, r3, #7
 8008674:	4903      	ldr	r1, [pc, #12]	@ (8008684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008676:	5ccb      	ldrb	r3, [r1, r3]
 8008678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800867c:	4618      	mov	r0, r3
 800867e:	bd80      	pop	{r7, pc}
 8008680:	40021000 	.word	0x40021000
 8008684:	0800b068 	.word	0x0800b068

08008688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800868c:	f7ff ffde 	bl	800864c <HAL_RCC_GetHCLKFreq>
 8008690:	4602      	mov	r2, r0
 8008692:	4b05      	ldr	r3, [pc, #20]	@ (80086a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	0adb      	lsrs	r3, r3, #11
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	4903      	ldr	r1, [pc, #12]	@ (80086ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800869e:	5ccb      	ldrb	r3, [r1, r3]
 80086a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	40021000 	.word	0x40021000
 80086ac:	0800b068 	.word	0x0800b068

080086b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80086b8:	4b0a      	ldr	r3, [pc, #40]	@ (80086e4 <RCC_Delay+0x34>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a0a      	ldr	r2, [pc, #40]	@ (80086e8 <RCC_Delay+0x38>)
 80086be:	fba2 2303 	umull	r2, r3, r2, r3
 80086c2:	0a5b      	lsrs	r3, r3, #9
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	fb02 f303 	mul.w	r3, r2, r3
 80086ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80086cc:	bf00      	nop
  }
  while (Delay --);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	1e5a      	subs	r2, r3, #1
 80086d2:	60fa      	str	r2, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1f9      	bne.n	80086cc <RCC_Delay+0x1c>
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr
 80086e4:	20000000 	.word	0x20000000
 80086e8:	10624dd3 	.word	0x10624dd3

080086ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e041      	b.n	8008782 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7fe f81c 	bl	8006750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	3304      	adds	r3, #4
 8008728:	4619      	mov	r1, r3
 800872a:	4610      	mov	r0, r2
 800872c:	f000 fc54 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e041      	b.n	8008820 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d106      	bne.n	80087b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f839 	bl	8008828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2202      	movs	r2, #2
 80087ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	3304      	adds	r3, #4
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f000 fc05 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr

0800883a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e041      	b.n	80088d0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f839 	bl	80088d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2202      	movs	r2, #2
 800886a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3304      	adds	r3, #4
 8008876:	4619      	mov	r1, r3
 8008878:	4610      	mov	r0, r2
 800887a:	f000 fbad 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bc80      	pop	{r7}
 80088e8:	4770      	bx	lr

080088ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d122      	bne.n	8008946 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b02      	cmp	r3, #2
 800890c:	d11b      	bne.n	8008946 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f06f 0202 	mvn.w	r2, #2
 8008916:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 fb37 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008932:	e005      	b.n	8008940 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 fb2a 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fb39 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b04      	cmp	r3, #4
 8008952:	d122      	bne.n	800899a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	f003 0304 	and.w	r3, r3, #4
 800895e:	2b04      	cmp	r3, #4
 8008960:	d11b      	bne.n	800899a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f06f 0204 	mvn.w	r2, #4
 800896a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fb0d 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008986:	e005      	b.n	8008994 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fb00 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fb0f 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b08      	cmp	r3, #8
 80089a6:	d122      	bne.n	80089ee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f003 0308 	and.w	r3, r3, #8
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d11b      	bne.n	80089ee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f06f 0208 	mvn.w	r2, #8
 80089be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2204      	movs	r2, #4
 80089c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f003 0303 	and.w	r3, r3, #3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fae3 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 80089da:	e005      	b.n	80089e8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fad6 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fae5 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b10      	cmp	r3, #16
 80089fa:	d122      	bne.n	8008a42 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f003 0310 	and.w	r3, r3, #16
 8008a06:	2b10      	cmp	r3, #16
 8008a08:	d11b      	bne.n	8008a42 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f06f 0210 	mvn.w	r2, #16
 8008a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2208      	movs	r2, #8
 8008a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fab9 	bl	8008fa0 <HAL_TIM_IC_CaptureCallback>
 8008a2e:	e005      	b.n	8008a3c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 faac 	bl	8008f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fabb 	bl	8008fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f003 0301 	and.w	r3, r3, #1
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d10e      	bne.n	8008a6e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d107      	bne.n	8008a6e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f06f 0201 	mvn.w	r2, #1
 8008a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fa87 	bl	8008f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a78:	2b80      	cmp	r3, #128	@ 0x80
 8008a7a:	d10e      	bne.n	8008a9a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a86:	2b80      	cmp	r3, #128	@ 0x80
 8008a88:	d107      	bne.n	8008a9a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fee5 	bl	8009864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa4:	2b40      	cmp	r3, #64	@ 0x40
 8008aa6:	d10e      	bne.n	8008ac6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab2:	2b40      	cmp	r3, #64	@ 0x40
 8008ab4:	d107      	bne.n	8008ac6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fa7f 	bl	8008fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b20      	cmp	r3, #32
 8008ad2:	d10e      	bne.n	8008af2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f003 0320 	and.w	r3, r3, #32
 8008ade:	2b20      	cmp	r3, #32
 8008ae0:	d107      	bne.n	8008af2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f06f 0220 	mvn.w	r2, #32
 8008aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 feb0 	bl	8009852 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d101      	bne.n	8008b18 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008b14:	2302      	movs	r3, #2
 8008b16:	e088      	b.n	8008c2a <HAL_TIM_IC_ConfigChannel+0x130>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11b      	bne.n	8008b5e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008b36:	f000 fc39 	bl	80093ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 020c 	bic.w	r2, r2, #12
 8008b48:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6999      	ldr	r1, [r3, #24]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	619a      	str	r2, [r3, #24]
 8008b5c:	e060      	b.n	8008c20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d11c      	bne.n	8008b9e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008b74:	f000 fca2 	bl	80094bc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699a      	ldr	r2, [r3, #24]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008b86:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6999      	ldr	r1, [r3, #24]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	021a      	lsls	r2, r3, #8
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	619a      	str	r2, [r3, #24]
 8008b9c:	e040      	b.n	8008c20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b08      	cmp	r3, #8
 8008ba2:	d11b      	bne.n	8008bdc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008bb4:	f000 fced 	bl	8009592 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69da      	ldr	r2, [r3, #28]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 020c 	bic.w	r2, r2, #12
 8008bc6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	69d9      	ldr	r1, [r3, #28]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	689a      	ldr	r2, [r3, #8]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	61da      	str	r2, [r3, #28]
 8008bda:	e021      	b.n	8008c20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b0c      	cmp	r3, #12
 8008be0:	d11c      	bne.n	8008c1c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008bf2:	f000 fd09 	bl	8009608 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	69da      	ldr	r2, [r3, #28]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008c04:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69d9      	ldr	r1, [r3, #28]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	021a      	lsls	r2, r3, #8
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	61da      	str	r2, [r3, #28]
 8008c1a:	e001      	b.n	8008c20 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3718      	adds	r7, #24
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d101      	bne.n	8008c52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e0ae      	b.n	8008db0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b0c      	cmp	r3, #12
 8008c5e:	f200 809f 	bhi.w	8008da0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008c62:	a201      	add	r2, pc, #4	@ (adr r2, 8008c68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c9d 	.word	0x08008c9d
 8008c6c:	08008da1 	.word	0x08008da1
 8008c70:	08008da1 	.word	0x08008da1
 8008c74:	08008da1 	.word	0x08008da1
 8008c78:	08008cdd 	.word	0x08008cdd
 8008c7c:	08008da1 	.word	0x08008da1
 8008c80:	08008da1 	.word	0x08008da1
 8008c84:	08008da1 	.word	0x08008da1
 8008c88:	08008d1f 	.word	0x08008d1f
 8008c8c:	08008da1 	.word	0x08008da1
 8008c90:	08008da1 	.word	0x08008da1
 8008c94:	08008da1 	.word	0x08008da1
 8008c98:	08008d5f 	.word	0x08008d5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f9fa 	bl	800909c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0208 	orr.w	r2, r2, #8
 8008cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0204 	bic.w	r2, r2, #4
 8008cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6999      	ldr	r1, [r3, #24]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	691a      	ldr	r2, [r3, #16]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	619a      	str	r2, [r3, #24]
      break;
 8008cda:	e064      	b.n	8008da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fa40 	bl	8009168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	699a      	ldr	r2, [r3, #24]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6999      	ldr	r1, [r3, #24]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	021a      	lsls	r2, r3, #8
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	619a      	str	r2, [r3, #24]
      break;
 8008d1c:	e043      	b.n	8008da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68b9      	ldr	r1, [r7, #8]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fa89 	bl	800923c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69da      	ldr	r2, [r3, #28]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f042 0208 	orr.w	r2, r2, #8
 8008d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69da      	ldr	r2, [r3, #28]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0204 	bic.w	r2, r2, #4
 8008d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69d9      	ldr	r1, [r3, #28]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	691a      	ldr	r2, [r3, #16]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	61da      	str	r2, [r3, #28]
      break;
 8008d5c:	e023      	b.n	8008da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fad3 	bl	8009310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	69da      	ldr	r2, [r3, #28]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	69da      	ldr	r2, [r3, #28]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	69d9      	ldr	r1, [r3, #28]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	021a      	lsls	r2, r3, #8
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	61da      	str	r2, [r3, #28]
      break;
 8008d9e:	e002      	b.n	8008da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	75fb      	strb	r3, [r7, #23]
      break;
 8008da4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3718      	adds	r7, #24
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d101      	bne.n	8008dd4 <HAL_TIM_ConfigClockSource+0x1c>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e0b4      	b.n	8008f3e <HAL_TIM_ConfigClockSource+0x186>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2202      	movs	r2, #2
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008dfa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e0c:	d03e      	beq.n	8008e8c <HAL_TIM_ConfigClockSource+0xd4>
 8008e0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e12:	f200 8087 	bhi.w	8008f24 <HAL_TIM_ConfigClockSource+0x16c>
 8008e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e1a:	f000 8086 	beq.w	8008f2a <HAL_TIM_ConfigClockSource+0x172>
 8008e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e22:	d87f      	bhi.n	8008f24 <HAL_TIM_ConfigClockSource+0x16c>
 8008e24:	2b70      	cmp	r3, #112	@ 0x70
 8008e26:	d01a      	beq.n	8008e5e <HAL_TIM_ConfigClockSource+0xa6>
 8008e28:	2b70      	cmp	r3, #112	@ 0x70
 8008e2a:	d87b      	bhi.n	8008f24 <HAL_TIM_ConfigClockSource+0x16c>
 8008e2c:	2b60      	cmp	r3, #96	@ 0x60
 8008e2e:	d050      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x11a>
 8008e30:	2b60      	cmp	r3, #96	@ 0x60
 8008e32:	d877      	bhi.n	8008f24 <HAL_TIM_ConfigClockSource+0x16c>
 8008e34:	2b50      	cmp	r3, #80	@ 0x50
 8008e36:	d03c      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0xfa>
 8008e38:	2b50      	cmp	r3, #80	@ 0x50
 8008e3a:	d873      	bhi.n	8008f24 <HAL_TIM_ConfigClockSource+0x16c>
 8008e3c:	2b40      	cmp	r3, #64	@ 0x40
 8008e3e:	d058      	beq.n	8008ef2 <HAL_TIM_ConfigClockSource+0x13a>
 8008e40:	2b40      	cmp	r3, #64	@ 0x40
 8008e42:	d86f      	bhi.n	8008f24 <HAL_TIM_ConfigClockSource+0x16c>
 8008e44:	2b30      	cmp	r3, #48	@ 0x30
 8008e46:	d064      	beq.n	8008f12 <HAL_TIM_ConfigClockSource+0x15a>
 8008e48:	2b30      	cmp	r3, #48	@ 0x30
 8008e4a:	d86b      	bhi.n	8008f24 <HAL_TIM_ConfigClockSource+0x16c>
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	d060      	beq.n	8008f12 <HAL_TIM_ConfigClockSource+0x15a>
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	d867      	bhi.n	8008f24 <HAL_TIM_ConfigClockSource+0x16c>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d05c      	beq.n	8008f12 <HAL_TIM_ConfigClockSource+0x15a>
 8008e58:	2b10      	cmp	r3, #16
 8008e5a:	d05a      	beq.n	8008f12 <HAL_TIM_ConfigClockSource+0x15a>
 8008e5c:	e062      	b.n	8008f24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e6e:	f000 fc21 	bl	80096b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008e80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	609a      	str	r2, [r3, #8]
      break;
 8008e8a:	e04f      	b.n	8008f2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e9c:	f000 fc0a 	bl	80096b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689a      	ldr	r2, [r3, #8]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008eae:	609a      	str	r2, [r3, #8]
      break;
 8008eb0:	e03c      	b.n	8008f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f000 face 	bl	8009460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2150      	movs	r1, #80	@ 0x50
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 fbd8 	bl	8009680 <TIM_ITRx_SetConfig>
      break;
 8008ed0:	e02c      	b.n	8008f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f000 fb28 	bl	8009534 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2160      	movs	r1, #96	@ 0x60
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 fbc8 	bl	8009680 <TIM_ITRx_SetConfig>
      break;
 8008ef0:	e01c      	b.n	8008f2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008efe:	461a      	mov	r2, r3
 8008f00:	f000 faae 	bl	8009460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2140      	movs	r1, #64	@ 0x40
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fbb8 	bl	8009680 <TIM_ITRx_SetConfig>
      break;
 8008f10:	e00c      	b.n	8008f2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	f000 fbaf 	bl	8009680 <TIM_ITRx_SetConfig>
      break;
 8008f22:	e003      	b.n	8008f2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	73fb      	strb	r3, [r7, #15]
      break;
 8008f28:	e000      	b.n	8008f2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008f2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bc80      	pop	{r7}
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bc80      	pop	{r7}
 8008f8c:	4770      	bx	lr

08008f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b083      	sub	sp, #12
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f96:	bf00      	nop
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bc80      	pop	{r7}
 8008f9e:	4770      	bx	lr

08008fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	4770      	bx	lr

08008fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008fba:	bf00      	nop
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bc80      	pop	{r7}
 8008fd4:	4770      	bx	lr
	...

08008fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a29      	ldr	r2, [pc, #164]	@ (8009090 <TIM_Base_SetConfig+0xb8>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d00b      	beq.n	8009008 <TIM_Base_SetConfig+0x30>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ff6:	d007      	beq.n	8009008 <TIM_Base_SetConfig+0x30>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a26      	ldr	r2, [pc, #152]	@ (8009094 <TIM_Base_SetConfig+0xbc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d003      	beq.n	8009008 <TIM_Base_SetConfig+0x30>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a25      	ldr	r2, [pc, #148]	@ (8009098 <TIM_Base_SetConfig+0xc0>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d108      	bne.n	800901a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800900e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a1c      	ldr	r2, [pc, #112]	@ (8009090 <TIM_Base_SetConfig+0xb8>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d00b      	beq.n	800903a <TIM_Base_SetConfig+0x62>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009028:	d007      	beq.n	800903a <TIM_Base_SetConfig+0x62>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a19      	ldr	r2, [pc, #100]	@ (8009094 <TIM_Base_SetConfig+0xbc>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d003      	beq.n	800903a <TIM_Base_SetConfig+0x62>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a18      	ldr	r2, [pc, #96]	@ (8009098 <TIM_Base_SetConfig+0xc0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d108      	bne.n	800904c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4313      	orrs	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68fa      	ldr	r2, [r7, #12]
 800905e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a07      	ldr	r2, [pc, #28]	@ (8009090 <TIM_Base_SetConfig+0xb8>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d103      	bne.n	8009080 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	691a      	ldr	r2, [r3, #16]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	615a      	str	r2, [r3, #20]
}
 8009086:	bf00      	nop
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	bc80      	pop	{r7}
 800908e:	4770      	bx	lr
 8009090:	40012c00 	.word	0x40012c00
 8009094:	40000400 	.word	0x40000400
 8009098:	40000800 	.word	0x40000800

0800909c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800909c:	b480      	push	{r7}
 800909e:	b087      	sub	sp, #28
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a1b      	ldr	r3, [r3, #32]
 80090aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	f023 0201 	bic.w	r2, r3, #1
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f023 0303 	bic.w	r3, r3, #3
 80090d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	4313      	orrs	r3, r2
 80090dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f023 0302 	bic.w	r3, r3, #2
 80090e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a1c      	ldr	r2, [pc, #112]	@ (8009164 <TIM_OC1_SetConfig+0xc8>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d10c      	bne.n	8009112 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f023 0308 	bic.w	r3, r3, #8
 80090fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	4313      	orrs	r3, r2
 8009108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f023 0304 	bic.w	r3, r3, #4
 8009110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a13      	ldr	r2, [pc, #76]	@ (8009164 <TIM_OC1_SetConfig+0xc8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d111      	bne.n	800913e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	4313      	orrs	r3, r2
 800913c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	621a      	str	r2, [r3, #32]
}
 8009158:	bf00      	nop
 800915a:	371c      	adds	r7, #28
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	40012c00 	.word	0x40012c00

08009168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a1b      	ldr	r3, [r3, #32]
 800917c:	f023 0210 	bic.w	r2, r3, #16
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800919e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	021b      	lsls	r3, r3, #8
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	f023 0320 	bic.w	r3, r3, #32
 80091b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	011b      	lsls	r3, r3, #4
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	4313      	orrs	r3, r2
 80091be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a1d      	ldr	r2, [pc, #116]	@ (8009238 <TIM_OC2_SetConfig+0xd0>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d10d      	bne.n	80091e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	011b      	lsls	r3, r3, #4
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a14      	ldr	r2, [pc, #80]	@ (8009238 <TIM_OC2_SetConfig+0xd0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d113      	bne.n	8009214 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	693a      	ldr	r2, [r7, #16]
 8009204:	4313      	orrs	r3, r2
 8009206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	4313      	orrs	r3, r2
 8009212:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	621a      	str	r2, [r3, #32]
}
 800922e:	bf00      	nop
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	bc80      	pop	{r7}
 8009236:	4770      	bx	lr
 8009238:	40012c00 	.word	0x40012c00

0800923c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800926a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f023 0303 	bic.w	r3, r3, #3
 8009272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4313      	orrs	r3, r2
 800927c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	021b      	lsls	r3, r3, #8
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	4313      	orrs	r3, r2
 8009290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a1d      	ldr	r2, [pc, #116]	@ (800930c <TIM_OC3_SetConfig+0xd0>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d10d      	bne.n	80092b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	021b      	lsls	r3, r3, #8
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80092b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a14      	ldr	r2, [pc, #80]	@ (800930c <TIM_OC3_SetConfig+0xd0>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d113      	bne.n	80092e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80092cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	693a      	ldr	r2, [r7, #16]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	621a      	str	r2, [r3, #32]
}
 8009300:	bf00      	nop
 8009302:	371c      	adds	r7, #28
 8009304:	46bd      	mov	sp, r7
 8009306:	bc80      	pop	{r7}
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	40012c00 	.word	0x40012c00

08009310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800933e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	4313      	orrs	r3, r2
 8009352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800935a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	031b      	lsls	r3, r3, #12
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a0f      	ldr	r2, [pc, #60]	@ (80093a8 <TIM_OC4_SetConfig+0x98>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d109      	bne.n	8009384 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	019b      	lsls	r3, r3, #6
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4313      	orrs	r3, r2
 8009382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	693a      	ldr	r2, [r7, #16]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr
 80093a8:	40012c00 	.word	0x40012c00

080093ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	f023 0201 	bic.w	r2, r3, #1
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4a1f      	ldr	r2, [pc, #124]	@ (8009454 <TIM_TI1_SetConfig+0xa8>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00b      	beq.n	80093f2 <TIM_TI1_SetConfig+0x46>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e0:	d007      	beq.n	80093f2 <TIM_TI1_SetConfig+0x46>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009458 <TIM_TI1_SetConfig+0xac>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d003      	beq.n	80093f2 <TIM_TI1_SetConfig+0x46>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4a1b      	ldr	r2, [pc, #108]	@ (800945c <TIM_TI1_SetConfig+0xb0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d101      	bne.n	80093f6 <TIM_TI1_SetConfig+0x4a>
 80093f2:	2301      	movs	r3, #1
 80093f4:	e000      	b.n	80093f8 <TIM_TI1_SetConfig+0x4c>
 80093f6:	2300      	movs	r3, #0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d008      	beq.n	800940e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f023 0303 	bic.w	r3, r3, #3
 8009402:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4313      	orrs	r3, r2
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	e003      	b.n	8009416 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f043 0301 	orr.w	r3, r3, #1
 8009414:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800941c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	b2db      	uxtb	r3, r3
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	4313      	orrs	r3, r2
 8009428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f023 030a 	bic.w	r3, r3, #10
 8009430:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	f003 030a 	and.w	r3, r3, #10
 8009438:	693a      	ldr	r2, [r7, #16]
 800943a:	4313      	orrs	r3, r2
 800943c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	621a      	str	r2, [r3, #32]
}
 800944a:	bf00      	nop
 800944c:	371c      	adds	r7, #28
 800944e:	46bd      	mov	sp, r7
 8009450:	bc80      	pop	{r7}
 8009452:	4770      	bx	lr
 8009454:	40012c00 	.word	0x40012c00
 8009458:	40000400 	.word	0x40000400
 800945c:	40000800 	.word	0x40000800

08009460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009460:	b480      	push	{r7}
 8009462:	b087      	sub	sp, #28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a1b      	ldr	r3, [r3, #32]
 8009470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	f023 0201 	bic.w	r2, r3, #1
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	699b      	ldr	r3, [r3, #24]
 8009482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800948a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	011b      	lsls	r3, r3, #4
 8009490:	693a      	ldr	r2, [r7, #16]
 8009492:	4313      	orrs	r3, r2
 8009494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f023 030a 	bic.w	r3, r3, #10
 800949c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	693a      	ldr	r2, [r7, #16]
 80094aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	621a      	str	r2, [r3, #32]
}
 80094b2:	bf00      	nop
 80094b4:	371c      	adds	r7, #28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bc80      	pop	{r7}
 80094ba:	4770      	bx	lr

080094bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	f023 0210 	bic.w	r2, r3, #16
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	021b      	lsls	r3, r3, #8
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80094fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	031b      	lsls	r3, r3, #12
 8009500:	b29b      	uxth	r3, r3
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	4313      	orrs	r3, r2
 8009506:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800950e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	4313      	orrs	r3, r2
 800951c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	621a      	str	r2, [r3, #32]
}
 800952a:	bf00      	nop
 800952c:	371c      	adds	r7, #28
 800952e:	46bd      	mov	sp, r7
 8009530:	bc80      	pop	{r7}
 8009532:	4770      	bx	lr

08009534 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	f023 0210 	bic.w	r2, r3, #16
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800955e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	031b      	lsls	r3, r3, #12
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	4313      	orrs	r3, r2
 8009568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009570:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	011b      	lsls	r3, r3, #4
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	4313      	orrs	r3, r2
 800957a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	621a      	str	r2, [r3, #32]
}
 8009588:	bf00      	nop
 800958a:	371c      	adds	r7, #28
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr

08009592 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009592:	b480      	push	{r7}
 8009594:	b087      	sub	sp, #28
 8009596:	af00      	add	r7, sp, #0
 8009598:	60f8      	str	r0, [r7, #12]
 800959a:	60b9      	str	r1, [r7, #8]
 800959c:	607a      	str	r2, [r7, #4]
 800959e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f023 0303 	bic.w	r3, r3, #3
 80095be:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	011b      	lsls	r3, r3, #4
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	4313      	orrs	r3, r2
 80095da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80095e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	021b      	lsls	r3, r3, #8
 80095e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	621a      	str	r2, [r3, #32]
}
 80095fe:	bf00      	nop
 8009600:	371c      	adds	r7, #28
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr

08009608 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
 8009614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009634:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	4313      	orrs	r3, r2
 800963e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009646:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	031b      	lsls	r3, r3, #12
 800964c:	b29b      	uxth	r3, r3
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4313      	orrs	r3, r2
 8009652:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800965a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	031b      	lsls	r3, r3, #12
 8009660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	4313      	orrs	r3, r2
 8009668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	621a      	str	r2, [r3, #32]
}
 8009676:	bf00      	nop
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	bc80      	pop	{r7}
 800967e:	4770      	bx	lr

08009680 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009696:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	f043 0307 	orr.w	r3, r3, #7
 80096a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	609a      	str	r2, [r3, #8]
}
 80096aa:	bf00      	nop
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bc80      	pop	{r7}
 80096b2:	4770      	bx	lr

080096b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b087      	sub	sp, #28
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	021a      	lsls	r2, r3, #8
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	431a      	orrs	r2, r3
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4313      	orrs	r3, r2
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	4313      	orrs	r3, r2
 80096e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	609a      	str	r2, [r3, #8]
}
 80096e8:	bf00      	nop
 80096ea:	371c      	adds	r7, #28
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc80      	pop	{r7}
 80096f0:	4770      	bx	lr
	...

080096f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009704:	2b01      	cmp	r3, #1
 8009706:	d101      	bne.n	800970c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009708:	2302      	movs	r3, #2
 800970a:	e046      	b.n	800979a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4313      	orrs	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a16      	ldr	r2, [pc, #88]	@ (80097a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d00e      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009758:	d009      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a12      	ldr	r2, [pc, #72]	@ (80097a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d004      	beq.n	800976e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a10      	ldr	r2, [pc, #64]	@ (80097ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d10c      	bne.n	8009788 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	4313      	orrs	r3, r2
 800977e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	bc80      	pop	{r7}
 80097a2:	4770      	bx	lr
 80097a4:	40012c00 	.word	0x40012c00
 80097a8:	40000400 	.word	0x40000400
 80097ac:	40000800 	.word	0x40000800

080097b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d101      	bne.n	80097cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80097c8:	2302      	movs	r3, #2
 80097ca:	e03d      	b.n	8009848 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	4313      	orrs	r3, r2
 80097e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	4313      	orrs	r3, r2
 80097fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4313      	orrs	r3, r2
 800980a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	691b      	ldr	r3, [r3, #16]
 8009816:	4313      	orrs	r3, r2
 8009818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	4313      	orrs	r3, r2
 8009826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3714      	adds	r7, #20
 800984c:	46bd      	mov	sp, r7
 800984e:	bc80      	pop	{r7}
 8009850:	4770      	bx	lr

08009852 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800985a:	bf00      	nop
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	bc80      	pop	{r7}
 8009862:	4770      	bx	lr

08009864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	bc80      	pop	{r7}
 8009874:	4770      	bx	lr

08009876 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e042      	b.n	800990e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7fc fff7 	bl	8006890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2224      	movs	r2, #36	@ 0x24
 80098a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68da      	ldr	r2, [r3, #12]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098b8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fd70 	bl	800a3a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	691a      	ldr	r2, [r3, #16]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	695a      	ldr	r2, [r3, #20]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098de:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68da      	ldr	r2, [r3, #12]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2220      	movs	r2, #32
 8009902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b08a      	sub	sp, #40	@ 0x28
 800991a:	af02      	add	r7, sp, #8
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	603b      	str	r3, [r7, #0]
 8009922:	4613      	mov	r3, r2
 8009924:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b20      	cmp	r3, #32
 8009934:	d16d      	bne.n	8009a12 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <HAL_UART_Transmit+0x2c>
 800993c:	88fb      	ldrh	r3, [r7, #6]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d101      	bne.n	8009946 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e066      	b.n	8009a14 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2221      	movs	r2, #33	@ 0x21
 8009950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009954:	f7fd f8bc 	bl	8006ad0 <HAL_GetTick>
 8009958:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	88fa      	ldrh	r2, [r7, #6]
 800995e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	88fa      	ldrh	r2, [r7, #6]
 8009964:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800996e:	d108      	bne.n	8009982 <HAL_UART_Transmit+0x6c>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d104      	bne.n	8009982 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009978:	2300      	movs	r3, #0
 800997a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	61bb      	str	r3, [r7, #24]
 8009980:	e003      	b.n	800998a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009986:	2300      	movs	r3, #0
 8009988:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800998a:	e02a      	b.n	80099e2 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2200      	movs	r2, #0
 8009994:	2180      	movs	r1, #128	@ 0x80
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 faf8 	bl	8009f8c <UART_WaitOnFlagUntilTimeout>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e036      	b.n	8009a14 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d10b      	bne.n	80099c4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	881b      	ldrh	r3, [r3, #0]
 80099b0:	461a      	mov	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099ba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	3302      	adds	r3, #2
 80099c0:	61bb      	str	r3, [r7, #24]
 80099c2:	e007      	b.n	80099d4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	781a      	ldrb	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	3301      	adds	r3, #1
 80099d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099d8:	b29b      	uxth	r3, r3
 80099da:	3b01      	subs	r3, #1
 80099dc:	b29a      	uxth	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1cf      	bne.n	800998c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2200      	movs	r2, #0
 80099f4:	2140      	movs	r1, #64	@ 0x40
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 fac8 	bl	8009f8c <UART_WaitOnFlagUntilTimeout>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8009a02:	2303      	movs	r3, #3
 8009a04:	e006      	b.n	8009a14 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e000      	b.n	8009a14 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009a12:	2302      	movs	r3, #2
  }
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3720      	adds	r7, #32
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b0ba      	sub	sp, #232	@ 0xe8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a52:	f003 030f 	and.w	r3, r3, #15
 8009a56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10f      	bne.n	8009a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a66:	f003 0320 	and.w	r3, r3, #32
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d009      	beq.n	8009a82 <HAL_UART_IRQHandler+0x66>
 8009a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d003      	beq.n	8009a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fbd1 	bl	800a222 <UART_Receive_IT>
      return;
 8009a80:	e25b      	b.n	8009f3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 80de 	beq.w	8009c48 <HAL_UART_IRQHandler+0x22c>
 8009a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d106      	bne.n	8009aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f000 80d1 	beq.w	8009c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009aaa:	f003 0301 	and.w	r3, r3, #1
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00b      	beq.n	8009aca <HAL_UART_IRQHandler+0xae>
 8009ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ac2:	f043 0201 	orr.w	r2, r3, #1
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ace:	f003 0304 	and.w	r3, r3, #4
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00b      	beq.n	8009aee <HAL_UART_IRQHandler+0xd2>
 8009ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d005      	beq.n	8009aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ae6:	f043 0202 	orr.w	r2, r3, #2
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00b      	beq.n	8009b12 <HAL_UART_IRQHandler+0xf6>
 8009afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009afe:	f003 0301 	and.w	r3, r3, #1
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d005      	beq.n	8009b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0a:	f043 0204 	orr.w	r2, r3, #4
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b16:	f003 0308 	and.w	r3, r3, #8
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d011      	beq.n	8009b42 <HAL_UART_IRQHandler+0x126>
 8009b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d005      	beq.n	8009b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b3a:	f043 0208 	orr.w	r2, r3, #8
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f000 81f2 	beq.w	8009f30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d008      	beq.n	8009b6a <HAL_UART_IRQHandler+0x14e>
 8009b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b5c:	f003 0320 	and.w	r3, r3, #32
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d002      	beq.n	8009b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fb5c 	bl	800a222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bf14      	ite	ne
 8009b78:	2301      	movne	r3, #1
 8009b7a:	2300      	moveq	r3, #0
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b86:	f003 0308 	and.w	r3, r3, #8
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d103      	bne.n	8009b96 <HAL_UART_IRQHandler+0x17a>
 8009b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d04f      	beq.n	8009c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fa66 	bl	800a068 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	695b      	ldr	r3, [r3, #20]
 8009ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d041      	beq.n	8009c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	3314      	adds	r3, #20
 8009bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3314      	adds	r3, #20
 8009bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1d9      	bne.n	8009baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d013      	beq.n	8009c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c02:	4a7e      	ldr	r2, [pc, #504]	@ (8009dfc <HAL_UART_IRQHandler+0x3e0>)
 8009c04:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fd ff30 	bl	8007a70 <HAL_DMA_Abort_IT>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d016      	beq.n	8009c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009c20:	4610      	mov	r0, r2
 8009c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c24:	e00e      	b.n	8009c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f99c 	bl	8009f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c2c:	e00a      	b.n	8009c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f998 	bl	8009f64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c34:	e006      	b.n	8009c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f994 	bl	8009f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009c42:	e175      	b.n	8009f30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c44:	bf00      	nop
    return;
 8009c46:	e173      	b.n	8009f30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	f040 814f 	bne.w	8009ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c56:	f003 0310 	and.w	r3, r3, #16
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 8148 	beq.w	8009ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c64:	f003 0310 	and.w	r3, r3, #16
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 8141 	beq.w	8009ef0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60bb      	str	r3, [r7, #8]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	60bb      	str	r3, [r7, #8]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	60bb      	str	r3, [r7, #8]
 8009c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 80b6 	beq.w	8009e00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8145 	beq.w	8009f34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	f080 813e 	bcs.w	8009f34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009cbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	2b20      	cmp	r3, #32
 8009cc8:	f000 8088 	beq.w	8009ddc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	330c      	adds	r3, #12
 8009cd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009cda:	e853 3f00 	ldrex	r3, [r3]
 8009cde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ce6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	330c      	adds	r3, #12
 8009cf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009cf8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009cfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009d04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009d08:	e841 2300 	strex	r3, r2, [r1]
 8009d0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1d9      	bne.n	8009ccc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3314      	adds	r3, #20
 8009d1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009d28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d2a:	f023 0301 	bic.w	r3, r3, #1
 8009d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3314      	adds	r3, #20
 8009d38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009d3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009d40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009d44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009d48:	e841 2300 	strex	r3, r2, [r1]
 8009d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e1      	bne.n	8009d18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3314      	adds	r3, #20
 8009d5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d5e:	e853 3f00 	ldrex	r3, [r3]
 8009d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3314      	adds	r3, #20
 8009d74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e3      	bne.n	8009d54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	330c      	adds	r3, #12
 8009da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009dac:	f023 0310 	bic.w	r3, r3, #16
 8009db0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	330c      	adds	r3, #12
 8009dba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009dbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009dc0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009dc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dc6:	e841 2300 	strex	r3, r2, [r1]
 8009dca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1e3      	bne.n	8009d9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7fd fe0f 	bl	80079fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f8bf 	bl	8009f76 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009df8:	e09c      	b.n	8009f34 <HAL_UART_IRQHandler+0x518>
 8009dfa:	bf00      	nop
 8009dfc:	0800a12d 	.word	0x0800a12d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 808e 	beq.w	8009f38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 8089 	beq.w	8009f38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	330c      	adds	r3, #12
 8009e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	330c      	adds	r3, #12
 8009e46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009e4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e52:	e841 2300 	strex	r3, r2, [r1]
 8009e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1e3      	bne.n	8009e26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3314      	adds	r3, #20
 8009e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	f023 0301 	bic.w	r3, r3, #1
 8009e74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3314      	adds	r3, #20
 8009e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009e82:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e8a:	e841 2300 	strex	r3, r2, [r1]
 8009e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d1e3      	bne.n	8009e5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	330c      	adds	r3, #12
 8009eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	e853 3f00 	ldrex	r3, [r3]
 8009eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f023 0310 	bic.w	r3, r3, #16
 8009eba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	330c      	adds	r3, #12
 8009ec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009ec8:	61fa      	str	r2, [r7, #28]
 8009eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ecc:	69b9      	ldr	r1, [r7, #24]
 8009ece:	69fa      	ldr	r2, [r7, #28]
 8009ed0:	e841 2300 	strex	r3, r2, [r1]
 8009ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e3      	bne.n	8009ea4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f844 	bl	8009f76 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009eee:	e023      	b.n	8009f38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d009      	beq.n	8009f10 <HAL_UART_IRQHandler+0x4f4>
 8009efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f923 	bl	800a154 <UART_Transmit_IT>
    return;
 8009f0e:	e014      	b.n	8009f3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00e      	beq.n	8009f3a <HAL_UART_IRQHandler+0x51e>
 8009f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d008      	beq.n	8009f3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f962 	bl	800a1f2 <UART_EndTransmit_IT>
    return;
 8009f2e:	e004      	b.n	8009f3a <HAL_UART_IRQHandler+0x51e>
    return;
 8009f30:	bf00      	nop
 8009f32:	e002      	b.n	8009f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8009f34:	bf00      	nop
 8009f36:	e000      	b.n	8009f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8009f38:	bf00      	nop
  }
}
 8009f3a:	37e8      	adds	r7, #232	@ 0xe8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bc80      	pop	{r7}
 8009f50:	4770      	bx	lr

08009f52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009f5a:	bf00      	nop
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bc80      	pop	{r7}
 8009f62:	4770      	bx	lr

08009f64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bc80      	pop	{r7}
 8009f74:	4770      	bx	lr

08009f76 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b083      	sub	sp, #12
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bc80      	pop	{r7}
 8009f8a:	4770      	bx	lr

08009f8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b090      	sub	sp, #64	@ 0x40
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f9c:	e050      	b.n	800a040 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d04c      	beq.n	800a040 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d007      	beq.n	8009fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8009fac:	f7fc fd90 	bl	8006ad0 <HAL_GetTick>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d241      	bcs.n	800a040 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	330c      	adds	r3, #12
 8009fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fce:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	330c      	adds	r3, #12
 8009fda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009fdc:	637a      	str	r2, [r7, #52]	@ 0x34
 8009fde:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e5      	bne.n	8009fbc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3314      	adds	r3, #20
 8009ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	e853 3f00 	ldrex	r3, [r3]
 8009ffe:	613b      	str	r3, [r7, #16]
   return(result);
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f023 0301 	bic.w	r3, r3, #1
 800a006:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3314      	adds	r3, #20
 800a00e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a010:	623a      	str	r2, [r7, #32]
 800a012:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a014:	69f9      	ldr	r1, [r7, #28]
 800a016:	6a3a      	ldr	r2, [r7, #32]
 800a018:	e841 2300 	strex	r3, r2, [r1]
 800a01c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1e5      	bne.n	8009ff0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2220      	movs	r2, #32
 800a030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e00f      	b.n	800a060 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	4013      	ands	r3, r2
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	bf0c      	ite	eq
 800a050:	2301      	moveq	r3, #1
 800a052:	2300      	movne	r3, #0
 800a054:	b2db      	uxtb	r3, r3
 800a056:	461a      	mov	r2, r3
 800a058:	79fb      	ldrb	r3, [r7, #7]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d09f      	beq.n	8009f9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3740      	adds	r7, #64	@ 0x40
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a068:	b480      	push	{r7}
 800a06a:	b095      	sub	sp, #84	@ 0x54
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	330c      	adds	r3, #12
 800a076:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	330c      	adds	r3, #12
 800a08e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a090:	643a      	str	r2, [r7, #64]	@ 0x40
 800a092:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a096:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e5      	bne.n	800a070 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3314      	adds	r3, #20
 800a0aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	f023 0301 	bic.w	r3, r3, #1
 800a0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3314      	adds	r3, #20
 800a0c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a0ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e5      	bne.n	800a0a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d119      	bne.n	800a114 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	330c      	adds	r3, #12
 800a0e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	e853 3f00 	ldrex	r3, [r3]
 800a0ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f023 0310 	bic.w	r3, r3, #16
 800a0f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	330c      	adds	r3, #12
 800a0fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a100:	61ba      	str	r2, [r7, #24]
 800a102:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	6979      	ldr	r1, [r7, #20]
 800a106:	69ba      	ldr	r2, [r7, #24]
 800a108:	e841 2300 	strex	r3, r2, [r1]
 800a10c:	613b      	str	r3, [r7, #16]
   return(result);
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1e5      	bne.n	800a0e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a122:	bf00      	nop
 800a124:	3754      	adds	r7, #84	@ 0x54
 800a126:	46bd      	mov	sp, r7
 800a128:	bc80      	pop	{r7}
 800a12a:	4770      	bx	lr

0800a12c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a138:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7ff ff0c 	bl	8009f64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a14c:	bf00      	nop
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b21      	cmp	r3, #33	@ 0x21
 800a166:	d13e      	bne.n	800a1e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a170:	d114      	bne.n	800a19c <UART_Transmit_IT+0x48>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d110      	bne.n	800a19c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a18e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	1c9a      	adds	r2, r3, #2
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	621a      	str	r2, [r3, #32]
 800a19a:	e008      	b.n	800a1ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a1b      	ldr	r3, [r3, #32]
 800a1a0:	1c59      	adds	r1, r3, #1
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	6211      	str	r1, [r2, #32]
 800a1a6:	781a      	ldrb	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10f      	bne.n	800a1e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68da      	ldr	r2, [r3, #12]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a1d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68da      	ldr	r2, [r3, #12]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	e000      	b.n	800a1e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a1e6:	2302      	movs	r3, #2
  }
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bc80      	pop	{r7}
 800a1f0:	4770      	bx	lr

0800a1f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b082      	sub	sp, #8
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68da      	ldr	r2, [r3, #12]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff fe94 	bl	8009f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b08c      	sub	sp, #48	@ 0x30
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b22      	cmp	r3, #34	@ 0x22
 800a234:	f040 80ae 	bne.w	800a394 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a240:	d117      	bne.n	800a272 <UART_Receive_IT+0x50>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d113      	bne.n	800a272 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a252:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a260:	b29a      	uxth	r2, r3
 800a262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a264:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26a:	1c9a      	adds	r2, r3, #2
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a270:	e026      	b.n	800a2c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a276:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a278:	2300      	movs	r3, #0
 800a27a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a284:	d007      	beq.n	800a296 <UART_Receive_IT+0x74>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10a      	bne.n	800a2a4 <UART_Receive_IT+0x82>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d106      	bne.n	800a2a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e008      	b.n	800a2b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2b0:	b2da      	uxtb	r2, r3
 800a2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ba:	1c5a      	adds	r2, r3, #1
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d15d      	bne.n	800a390 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68da      	ldr	r2, [r3, #12]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f022 0220 	bic.w	r2, r2, #32
 800a2e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68da      	ldr	r2, [r3, #12]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a2f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	695a      	ldr	r2, [r3, #20]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f022 0201 	bic.w	r2, r2, #1
 800a302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2220      	movs	r2, #32
 800a308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a316:	2b01      	cmp	r3, #1
 800a318:	d135      	bne.n	800a386 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	330c      	adds	r3, #12
 800a326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	e853 3f00 	ldrex	r3, [r3]
 800a32e:	613b      	str	r3, [r7, #16]
   return(result);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f023 0310 	bic.w	r3, r3, #16
 800a336:	627b      	str	r3, [r7, #36]	@ 0x24
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	330c      	adds	r3, #12
 800a33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a340:	623a      	str	r2, [r7, #32]
 800a342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a344:	69f9      	ldr	r1, [r7, #28]
 800a346:	6a3a      	ldr	r2, [r7, #32]
 800a348:	e841 2300 	strex	r3, r2, [r1]
 800a34c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1e5      	bne.n	800a320 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0310 	and.w	r3, r3, #16
 800a35e:	2b10      	cmp	r3, #16
 800a360:	d10a      	bne.n	800a378 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a362:	2300      	movs	r3, #0
 800a364:	60fb      	str	r3, [r7, #12]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	60fb      	str	r3, [r7, #12]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a37c:	4619      	mov	r1, r3
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7ff fdf9 	bl	8009f76 <HAL_UARTEx_RxEventCallback>
 800a384:	e002      	b.n	800a38c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff fde3 	bl	8009f52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	e002      	b.n	800a396 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	e000      	b.n	800a396 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a394:	2302      	movs	r3, #2
  }
}
 800a396:	4618      	mov	r0, r3
 800a398:	3730      	adds	r7, #48	@ 0x30
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
	...

0800a3a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68da      	ldr	r2, [r3, #12]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689a      	ldr	r2, [r3, #8]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a3da:	f023 030c 	bic.w	r3, r3, #12
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	6812      	ldr	r2, [r2, #0]
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	430b      	orrs	r3, r1
 800a3e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a2c      	ldr	r2, [pc, #176]	@ (800a4b4 <UART_SetConfig+0x114>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d103      	bne.n	800a410 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a408:	f7fe f93e 	bl	8008688 <HAL_RCC_GetPCLK2Freq>
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	e002      	b.n	800a416 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a410:	f7fe f926 	bl	8008660 <HAL_RCC_GetPCLK1Freq>
 800a414:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	4613      	mov	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4413      	add	r3, r2
 800a41e:	009a      	lsls	r2, r3, #2
 800a420:	441a      	add	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42c:	4a22      	ldr	r2, [pc, #136]	@ (800a4b8 <UART_SetConfig+0x118>)
 800a42e:	fba2 2303 	umull	r2, r3, r2, r3
 800a432:	095b      	lsrs	r3, r3, #5
 800a434:	0119      	lsls	r1, r3, #4
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	4613      	mov	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	009a      	lsls	r2, r3, #2
 800a440:	441a      	add	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	fbb2 f2f3 	udiv	r2, r2, r3
 800a44c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4b8 <UART_SetConfig+0x118>)
 800a44e:	fba3 0302 	umull	r0, r3, r3, r2
 800a452:	095b      	lsrs	r3, r3, #5
 800a454:	2064      	movs	r0, #100	@ 0x64
 800a456:	fb00 f303 	mul.w	r3, r0, r3
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	3332      	adds	r3, #50	@ 0x32
 800a460:	4a15      	ldr	r2, [pc, #84]	@ (800a4b8 <UART_SetConfig+0x118>)
 800a462:	fba2 2303 	umull	r2, r3, r2, r3
 800a466:	095b      	lsrs	r3, r3, #5
 800a468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a46c:	4419      	add	r1, r3
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	4613      	mov	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	4413      	add	r3, r2
 800a476:	009a      	lsls	r2, r3, #2
 800a478:	441a      	add	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	fbb2 f2f3 	udiv	r2, r2, r3
 800a484:	4b0c      	ldr	r3, [pc, #48]	@ (800a4b8 <UART_SetConfig+0x118>)
 800a486:	fba3 0302 	umull	r0, r3, r3, r2
 800a48a:	095b      	lsrs	r3, r3, #5
 800a48c:	2064      	movs	r0, #100	@ 0x64
 800a48e:	fb00 f303 	mul.w	r3, r0, r3
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	011b      	lsls	r3, r3, #4
 800a496:	3332      	adds	r3, #50	@ 0x32
 800a498:	4a07      	ldr	r2, [pc, #28]	@ (800a4b8 <UART_SetConfig+0x118>)
 800a49a:	fba2 2303 	umull	r2, r3, r2, r3
 800a49e:	095b      	lsrs	r3, r3, #5
 800a4a0:	f003 020f 	and.w	r2, r3, #15
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	440a      	add	r2, r1
 800a4aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a4ac:	bf00      	nop
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	40013800 	.word	0x40013800
 800a4b8:	51eb851f 	.word	0x51eb851f

0800a4bc <DCM_Proc_Init>:
#include "mcal/uds/server/uds_server.h"
#include "stm32f1xx_hal.h"
#include "ota/ota.h"


void DCM_Proc_Init() {
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	af00      	add	r7, sp, #0
  UDS_Srv_Init();
 800a4c0:	f000 fc62 	bl	800ad88 <UDS_Srv_Init>
  ota_ini_after_reset();
 800a4c4:	f000 fc7c 	bl	800adc0 <ota_ini_after_reset>
}
 800a4c8:	bf00      	nop
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <ECU_reset_Handler>:

resp_code_t ECU_reset_Handler()
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	af00      	add	r7, sp, #0
//	HAL_NVIC_SystemReset();
	return POSITIVE_RESPONE;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bc80      	pop	{r7}
 800a4d8:	4770      	bx	lr

0800a4da <DiagSess_Ctl_Handler>:

// To jump to programing or application
resp_code_t DiagSess_Ctl_Handler(diag_sess_t session) { return POSITIVE_RESPONE;}
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	71fb      	strb	r3, [r7, #7]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bc80      	pop	{r7}
 800a4ee:	4770      	bx	lr

0800a4f0 <Request_Download_Handler>:

// Preparation for download new SW
resp_code_t Request_Download_Handler(uint32_t mem_addr, uint32_t mem_size, uint32_t* block_len)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
	ota_flashing_begin();
 800a4fc:	f000 fc66 	bl	800adcc <ota_flashing_begin>

	return POSITIVE_RESPONE;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <Transfer_Data_Handler>:

// Transfer data
resp_code_t Transfer_Data_Handler(uint8_t seq_cnt, const uint8_t* data, uint32_t block_size)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b086      	sub	sp, #24
 800a50e:	af00      	add	r7, sp, #0
 800a510:	4603      	mov	r3, r0
 800a512:	60b9      	str	r1, [r7, #8]
 800a514:	607a      	str	r2, [r7, #4]
 800a516:	73fb      	strb	r3, [r7, #15]
	uint32_t data_u32 = *((uint32_t*)data);
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	617b      	str	r3, [r7, #20]
	ota_flashing_inprogress(data_u32);
 800a51e:	6978      	ldr	r0, [r7, #20]
 800a520:	f000 fc5a 	bl	800add8 <ota_flashing_inprogress>

	return POSITIVE_RESPONE;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <Transfer_Exit_Handler>:

// Complete transfer
resp_code_t Transfer_Exit_Handler()
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	af00      	add	r7, sp, #0
	ota_flashing_end();
 800a532:	f000 fc5a 	bl	800adea <ota_flashing_end>

	return POSITIVE_RESPONE;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <Check_Memory_Handler>:


// Complete transfer
resp_code_t Check_Memory_Handler(uint32_t* crc) { return POSITIVE_RESPONE;}
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	2300      	movs	r3, #0
 800a546:	4618      	mov	r0, r3
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bc80      	pop	{r7}
 800a54e:	4770      	bx	lr

0800a550 <HAL_CAN_RxFifo0MsgPendingCallback>:
static can_rx_msg_t can_rx_msg_buff[CAN_RX_BUFFER_SIZE];

extern CAN_HandleTypeDef hcan;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08c      	sub	sp, #48	@ 0x30
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  if (hcan->Instance == CAN1)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a0d      	ldr	r2, [pc, #52]	@ (800a594 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d114      	bne.n	800a58c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
  {
    can_rx_msg_t rx_it;
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_it.header, rx_it.data);
 800a562:	f107 030c 	add.w	r3, r7, #12
 800a566:	331c      	adds	r3, #28
 800a568:	f107 020c 	add.w	r2, r7, #12
 800a56c:	2100      	movs	r1, #0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7fc fdb3 	bl	80070da <HAL_CAN_GetRxMessage>
    buffer_push(&can_rx_fifo, &rx_it, sizeof(can_rx_msg_t));
 800a574:	f107 030c 	add.w	r3, r7, #12
 800a578:	2224      	movs	r2, #36	@ 0x24
 800a57a:	4619      	mov	r1, r3
 800a57c:	4806      	ldr	r0, [pc, #24]	@ (800a598 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800a57e:	f000 fc9a 	bl	800aeb6 <buffer_push>
	HAL_GPIO_TogglePin(PCB_LED_GPIO_Port, PCB_LED_Pin);
 800a582:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a586:	4805      	ldr	r0, [pc, #20]	@ (800a59c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 800a588:	f7fd fc86 	bl	8007e98 <HAL_GPIO_TogglePin>
  }
}
 800a58c:	bf00      	nop
 800a58e:	3730      	adds	r7, #48	@ 0x30
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	40006400 	.word	0x40006400
 800a598:	20000134 	.word	0x20000134
 800a59c:	40011000 	.word	0x40011000

0800a5a0 <can_start>:

void can_start(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	@ 0x28
 800a5a4:	af00      	add	r7, sp, #0
  init_buffer(&can_rx_fifo, can_rx_msg_buff, CAN_RX_BUFFER_SIZE);
 800a5a6:	2240      	movs	r2, #64	@ 0x40
 800a5a8:	4914      	ldr	r1, [pc, #80]	@ (800a5fc <can_start+0x5c>)
 800a5aa:	4815      	ldr	r0, [pc, #84]	@ (800a600 <can_start+0x60>)
 800a5ac:	f000 fc3a 	bl	800ae24 <init_buffer>
  // TODO: filter now accept for everything
  CAN_FilterTypeDef sFilterConfig = {0};
 800a5b0:	463b      	mov	r3, r7
 800a5b2:	2228      	movs	r2, #40	@ 0x28
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fd00 	bl	800afbc <memset>
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterIdHigh = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterActivation = ENABLE;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	623b      	str	r3, [r7, #32]
  HAL_CAN_ConfigFilter(&hcan,&sFilterConfig);
 800a5dc:	463b      	mov	r3, r7
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4808      	ldr	r0, [pc, #32]	@ (800a604 <can_start+0x64>)
 800a5e2:	f7fc fb9e 	bl	8006d22 <HAL_CAN_ConfigFilter>
  // start can and interrupt here
  HAL_CAN_Start(&hcan);
 800a5e6:	4807      	ldr	r0, [pc, #28]	@ (800a604 <can_start+0x64>)
 800a5e8:	f7fc fc64 	bl	8006eb4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800a5ec:	2102      	movs	r1, #2
 800a5ee:	4805      	ldr	r0, [pc, #20]	@ (800a604 <can_start+0x64>)
 800a5f0:	f7fc fe94 	bl	800731c <HAL_CAN_ActivateNotification>
}
 800a5f4:	bf00      	nop
 800a5f6:	3728      	adds	r7, #40	@ 0x28
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	20000140 	.word	0x20000140
 800a600:	20000134 	.word	0x20000134
 800a604:	2000002c 	.word	0x2000002c

0800a608 <can_send>:
  HAL_CAN_DeactivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
  HAL_CAN_Stop(&hcan);
}

void can_send(const can_tx_msg_t *msg)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t TxMailbox;
  HAL_CAN_AddTxMessage(&hcan, &msg->header, msg->data, &TxMailbox);
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f103 0218 	add.w	r2, r3, #24
 800a618:	f107 030c 	add.w	r3, r7, #12
 800a61c:	4803      	ldr	r0, [pc, #12]	@ (800a62c <can_send+0x24>)
 800a61e:	f7fc fc8d 	bl	8006f3c <HAL_CAN_AddTxMessage>
}
 800a622:	bf00      	nop
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	2000002c 	.word	0x2000002c

0800a630 <can_receive>:

const can_rx_msg_t *can_receive(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  return buffer_front(&can_rx_fifo, sizeof(can_rx_msg_t));
 800a634:	2124      	movs	r1, #36	@ 0x24
 800a636:	4803      	ldr	r0, [pc, #12]	@ (800a644 <can_receive+0x14>)
 800a638:	f000 fc1f 	bl	800ae7a <buffer_front>
 800a63c:	4603      	mov	r3, r0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20000134 	.word	0x20000134

0800a648 <can_rx_available>:

int32_t can_rx_available(void) {
 800a648:	b580      	push	{r7, lr}
 800a64a:	af00      	add	r7, sp, #0
  return buffer_available(&can_rx_fifo);
 800a64c:	4802      	ldr	r0, [pc, #8]	@ (800a658 <can_rx_available+0x10>)
 800a64e:	f000 fc01 	bl	800ae54 <buffer_available>
 800a652:	4603      	mov	r3, r0
}
 800a654:	4618      	mov	r0, r3
 800a656:	bd80      	pop	{r7, pc}
 800a658:	20000134 	.word	0x20000134

0800a65c <can_process_next>:

void can_process_next(void) {
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  buffer_pop(&can_rx_fifo);
 800a660:	4802      	ldr	r0, [pc, #8]	@ (800a66c <can_process_next+0x10>)
 800a662:	f000 fc5f 	bl	800af24 <buffer_pop>
}
 800a666:	bf00      	nop
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20000134 	.word	0x20000134

0800a670 <COM_Proc_Init>:
 */


#include "com_proc.h"

void COM_Proc_Init() {
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  can_start();
 800a674:	f7ff ff94 	bl	800a5a0 <can_start>
}
 800a678:	bf00      	nop
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <COM_Proc_1ms>:

void COM_Proc_1ms() {
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
  if (can_rx_available() == CAN_SUCCESS) {
 800a682:	f7ff ffe1 	bl	800a648 <can_rx_available>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d113      	bne.n	800a6b4 <COM_Proc_1ms+0x38>
    const can_rx_msg_t*	rx_msg = can_receive();
 800a68c:	f7ff ffd0 	bl	800a630 <can_receive>
 800a690:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < sizeof(recv_handler)/sizeof(recv_handler_t); ++i) {
 800a692:	2300      	movs	r3, #0
 800a694:	607b      	str	r3, [r7, #4]
 800a696:	e008      	b.n	800a6aa <COM_Proc_1ms+0x2e>
      recv_handler[i](rx_msg);
 800a698:	4a08      	ldr	r2, [pc, #32]	@ (800a6bc <COM_Proc_1ms+0x40>)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6a0:	6838      	ldr	r0, [r7, #0]
 800a6a2:	4798      	blx	r3
    for (int i = 0; i < sizeof(recv_handler)/sizeof(recv_handler_t); ++i) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	607b      	str	r3, [r7, #4]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d0f3      	beq.n	800a698 <COM_Proc_1ms+0x1c>
    }
    can_process_next();
 800a6b0:	f7ff ffd4 	bl	800a65c <can_process_next>
  }
}
 800a6b4:	bf00      	nop
 800a6b6:	3708      	adds	r7, #8
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	2000000c 	.word	0x2000000c

0800a6c0 <set_isotp_link>:
#include "isotp.h"

// This can be extended to have more than one link i.e,. func_addr and rx_link
static isotp_link_t* link;

void set_isotp_link(isotp_link_t* tplink) {
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  link = tplink;
 800a6c8:	4a05      	ldr	r2, [pc, #20]	@ (800a6e0 <set_isotp_link+0x20>)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6013      	str	r3, [r2, #0]
  link->total_byte = 0;
 800a6ce:	4b04      	ldr	r3, [pc, #16]	@ (800a6e0 <set_isotp_link+0x20>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	611a      	str	r2, [r3, #16]
}
 800a6d6:	bf00      	nop
 800a6d8:	370c      	adds	r7, #12
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bc80      	pop	{r7}
 800a6de:	4770      	bx	lr
 800a6e0:	20000a40 	.word	0x20000a40

0800a6e4 <send_single_frame>:

// Function to send ISO-TP single frame
void send_single_frame(const uint8_t *data, uint32_t len)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08a      	sub	sp, #40	@ 0x28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  can_tx_msg_t frame = {0};
 800a6ee:	f107 0308 	add.w	r3, r7, #8
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 fc60 	bl	800afbc <memset>
  frame.header.IDE = CAN_ID_STD;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	613b      	str	r3, [r7, #16]
  frame.header.StdId = link->tx_addr;
 800a700:	4b0d      	ldr	r3, [pc, #52]	@ (800a738 <send_single_frame+0x54>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	60bb      	str	r3, [r7, #8]
  frame.data[0] = len; // DLC (Data Length Code)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	f887 3020 	strb.w	r3, [r7, #32]
  memcpy(frame.data + 1, data, len);
 800a710:	f107 0308 	add.w	r3, r7, #8
 800a714:	3318      	adds	r3, #24
 800a716:	3301      	adds	r3, #1
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 fc79 	bl	800b014 <memcpy>
  frame.header.DLC = 8;
 800a722:	2308      	movs	r3, #8
 800a724:	61bb      	str	r3, [r7, #24]
  can_send(&frame);
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff ff6c 	bl	800a608 <can_send>
}
 800a730:	bf00      	nop
 800a732:	3728      	adds	r7, #40	@ 0x28
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	20000a40 	.word	0x20000a40

0800a73c <send_first_frame>:

// Send first frame
void send_first_frame(const uint8_t *data, uint32_t len)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08a      	sub	sp, #40	@ 0x28
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  can_tx_msg_t frame = {0};
 800a746:	f107 0308 	add.w	r3, r7, #8
 800a74a:	2220      	movs	r2, #32
 800a74c:	2100      	movs	r1, #0
 800a74e:	4618      	mov	r0, r3
 800a750:	f000 fc34 	bl	800afbc <memset>
  frame.header.IDE = CAN_ID_STD;
 800a754:	2300      	movs	r3, #0
 800a756:	613b      	str	r3, [r7, #16]
  frame.header.StdId = link->tx_addr;
 800a758:	4b11      	ldr	r3, [pc, #68]	@ (800a7a0 <send_first_frame+0x64>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	60bb      	str	r3, [r7, #8]
  frame.data[0] = (0x10 | len >> 8); // should limit len <= FFF
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	0a1b      	lsrs	r3, r3, #8
 800a764:	b2db      	uxtb	r3, r3
 800a766:	f043 0310 	orr.w	r3, r3, #16
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	f887 3020 	strb.w	r3, [r7, #32]
  frame.data[1] = (len & 0xFF);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	b2db      	uxtb	r3, r3
 800a774:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  memcpy(frame.data + 2, data, 6);
 800a778:	f107 0308 	add.w	r3, r7, #8
 800a77c:	3318      	adds	r3, #24
 800a77e:	3302      	adds	r3, #2
 800a780:	2206      	movs	r2, #6
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	4618      	mov	r0, r3
 800a786:	f000 fc45 	bl	800b014 <memcpy>
  frame.header.DLC = 8;
 800a78a:	2308      	movs	r3, #8
 800a78c:	61bb      	str	r3, [r7, #24]
  can_send(&frame);
 800a78e:	f107 0308 	add.w	r3, r7, #8
 800a792:	4618      	mov	r0, r3
 800a794:	f7ff ff38 	bl	800a608 <can_send>
}
 800a798:	bf00      	nop
 800a79a:	3728      	adds	r7, #40	@ 0x28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20000a40 	.word	0x20000a40

0800a7a4 <send_multi_frame>:

// Function to send ISO-TP multi frame
void send_multi_frame(const uint8_t *data, uint32_t len)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08c      	sub	sp, #48	@ 0x30
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  can_tx_msg_t frame = {0};
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	2220      	movs	r2, #32
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 fc00 	bl	800afbc <memset>
  frame.header.IDE = CAN_ID_STD;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	613b      	str	r3, [r7, #16]
  frame.header.StdId = link->tx_addr;
 800a7c0:	4b28      	ldr	r3, [pc, #160]	@ (800a864 <send_multi_frame+0xc0>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	60bb      	str	r3, [r7, #8]
  uint8_t seq_num = 1;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint16_t remaining_bytes = len;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t offset = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  while (remaining_bytes > 0)
 800a7d8:	e03c      	b.n	800a854 <send_multi_frame+0xb0>
  {
    uint8_t bytes_to_send = (remaining_bytes > 7) ? 7 : remaining_bytes;
 800a7da:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a7dc:	2b07      	cmp	r3, #7
 800a7de:	bf28      	it	cs
 800a7e0:	2307      	movcs	r3, #7
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    frame.data[0] = (0x20 | (seq_num & 0x0F));
 800a7e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a7ec:	f003 030f 	and.w	r3, r3, #15
 800a7f0:	b25b      	sxtb	r3, r3
 800a7f2:	f043 0320 	orr.w	r3, r3, #32
 800a7f6:	b25b      	sxtb	r3, r3
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f887 3020 	strb.w	r3, [r7, #32]

    memcpy(frame.data + 1, data + offset, bytes_to_send);
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	3318      	adds	r3, #24
 800a804:	3301      	adds	r3, #1
 800a806:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800a80a:	6879      	ldr	r1, [r7, #4]
 800a80c:	4411      	add	r1, r2
 800a80e:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 800a812:	4618      	mov	r0, r3
 800a814:	f000 fbfe 	bl	800b014 <memcpy>
    frame.header.DLC = bytes_to_send + 1;
 800a818:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a81c:	3301      	adds	r3, #1
 800a81e:	61bb      	str	r3, [r7, #24]
    can_send(&frame);
 800a820:	f107 0308 	add.w	r3, r7, #8
 800a824:	4618      	mov	r0, r3
 800a826:	f7ff feef 	bl	800a608 <can_send>

    seq_num++;
 800a82a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a82e:	3301      	adds	r3, #1
 800a830:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    offset += bytes_to_send;
 800a834:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800a838:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a83c:	4413      	add	r3, r2
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    remaining_bytes -= bytes_to_send;
 800a842:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a846:	b29b      	uxth	r3, r3
 800a848:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    HAL_Delay(1);
 800a84e:	2001      	movs	r0, #1
 800a850:	f7fc f948 	bl	8006ae4 <HAL_Delay>
  while (remaining_bytes > 0)
 800a854:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1bf      	bne.n	800a7da <send_multi_frame+0x36>
  }
}
 800a85a:	bf00      	nop
 800a85c:	bf00      	nop
 800a85e:	3730      	adds	r7, #48	@ 0x30
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20000a40 	.word	0x20000a40

0800a868 <send_fc_frame>:

void send_fc_frame(uint32_t id, uint8_t flag, uint8_t blk, uint8_t st_min) {
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	@ 0x28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	4608      	mov	r0, r1
 800a872:	4611      	mov	r1, r2
 800a874:	461a      	mov	r2, r3
 800a876:	4603      	mov	r3, r0
 800a878:	70fb      	strb	r3, [r7, #3]
 800a87a:	460b      	mov	r3, r1
 800a87c:	70bb      	strb	r3, [r7, #2]
 800a87e:	4613      	mov	r3, r2
 800a880:	707b      	strb	r3, [r7, #1]
	can_tx_msg_t frame = {0};
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	2220      	movs	r2, #32
 800a888:	2100      	movs	r1, #0
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fb96 	bl	800afbc <memset>
	frame.header.IDE = CAN_ID_STD;
 800a890:	2300      	movs	r3, #0
 800a892:	613b      	str	r3, [r7, #16]
	frame.header.StdId = link->tx_addr;
 800a894:	4b0d      	ldr	r3, [pc, #52]	@ (800a8cc <send_fc_frame+0x64>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	60bb      	str	r3, [r7, #8]
	frame.data[0] = (0x30 | flag); // should limit len <= FFF
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	f887 3020 	strb.w	r3, [r7, #32]
	frame.data[1] = blk;
 800a8a8:	78bb      	ldrb	r3, [r7, #2]
 800a8aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	frame.data[2] = st_min;
 800a8ae:	787b      	ldrb	r3, [r7, #1]
 800a8b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	frame.header.DLC = 8;
 800a8b4:	2308      	movs	r3, #8
 800a8b6:	61bb      	str	r3, [r7, #24]
	can_send(&frame);
 800a8b8:	f107 0308 	add.w	r3, r7, #8
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff fea3 	bl	800a608 <can_send>
}
 800a8c2:	bf00      	nop
 800a8c4:	3728      	adds	r7, #40	@ 0x28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000a40 	.word	0x20000a40

0800a8d0 <send_isotp>:

void send_isotp(const uint8_t *data, uint32_t len)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  if (len <= 7)
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b07      	cmp	r3, #7
 800a8de:	d804      	bhi.n	800a8ea <send_isotp+0x1a>
  {
    send_single_frame(data, len);
 800a8e0:	6839      	ldr	r1, [r7, #0]
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff fefe 	bl	800a6e4 <send_single_frame>
  else
  {
    send_first_frame(data, len);
    send_multi_frame(data + 6, len - 6);
  }
}
 800a8e8:	e00b      	b.n	800a902 <send_isotp+0x32>
    send_first_frame(data, len);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ff25 	bl	800a73c <send_first_frame>
    send_multi_frame(data + 6, len - 6);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	1d9a      	adds	r2, r3, #6
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	3b06      	subs	r3, #6
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	f7ff ff51 	bl	800a7a4 <send_multi_frame>
}
 800a902:	bf00      	nop
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
	...

0800a90c <handle_single_frame>:

void handle_single_frame(const can_rx_msg_t *frame) {
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  link->recv_cb(frame->header.StdId, frame->data + 1, (frame->data[0] & 0x07));
 800a914:	4b08      	ldr	r3, [pc, #32]	@ (800a938 <handle_single_frame+0x2c>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6810      	ldr	r0, [r2, #0]
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	321c      	adds	r2, #28
 800a922:	1c51      	adds	r1, r2, #1
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	7f12      	ldrb	r2, [r2, #28]
 800a928:	f002 0207 	and.w	r2, r2, #7
 800a92c:	b292      	uxth	r2, r2
 800a92e:	4798      	blx	r3
}
 800a930:	bf00      	nop
 800a932:	3708      	adds	r7, #8
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	20000a40 	.word	0x20000a40

0800a93c <handle_first_frame>:

//
void handle_first_frame(const can_rx_msg_t *frame) {
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  link->total_byte = ((uint32_t)(frame->data[0] & 0x0F) << 8) | frame->data[1];
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	7f1b      	ldrb	r3, [r3, #28]
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	7f5b      	ldrb	r3, [r3, #29]
 800a952:	4619      	mov	r1, r3
 800a954:	4b18      	ldr	r3, [pc, #96]	@ (800a9b8 <handle_first_frame+0x7c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	430a      	orrs	r2, r1
 800a95a:	611a      	str	r2, [r3, #16]
  memcpy(link->rx_buff, frame->data + 2, frame->header.DLC - 2);
 800a95c:	4b16      	ldr	r3, [pc, #88]	@ (800a9b8 <handle_first_frame+0x7c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6898      	ldr	r0, [r3, #8]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	331c      	adds	r3, #28
 800a966:	1c99      	adds	r1, r3, #2
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	3b02      	subs	r3, #2
 800a96e:	461a      	mov	r2, r3
 800a970:	f000 fb50 	bl	800b014 <memcpy>
  link->recv_byte = 6;
 800a974:	4b10      	ldr	r3, [pc, #64]	@ (800a9b8 <handle_first_frame+0x7c>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2206      	movs	r2, #6
 800a97a:	60da      	str	r2, [r3, #12]
  link->seq_num = 1;
 800a97c:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b8 <handle_first_frame+0x7c>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2201      	movs	r2, #1
 800a982:	751a      	strb	r2, [r3, #20]
  send_fc_frame(link->tx_addr, 0, ((link->total_byte - 6)/7) + 1, 1);
 800a984:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b8 <handle_first_frame+0x7c>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6858      	ldr	r0, [r3, #4]
 800a98a:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b8 <handle_first_frame+0x7c>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	1f9a      	subs	r2, r3, #6
 800a992:	4b0a      	ldr	r3, [pc, #40]	@ (800a9bc <handle_first_frame+0x80>)
 800a994:	fba3 1302 	umull	r1, r3, r3, r2
 800a998:	1ad2      	subs	r2, r2, r3
 800a99a:	0852      	lsrs	r2, r2, #1
 800a99c:	4413      	add	r3, r2
 800a99e:	089b      	lsrs	r3, r3, #2
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	f7ff ff5d 	bl	800a868 <send_fc_frame>
}
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20000a40 	.word	0x20000a40
 800a9bc:	24924925 	.word	0x24924925

0800a9c0 <handle_consec_frame>:

void handle_consec_frame(const can_rx_msg_t *frame) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b082      	sub	sp, #8
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  if (link->seq_num == (frame->data[0] & 0x0F)) {
 800a9c8:	4b2a      	ldr	r3, [pc, #168]	@ (800aa74 <handle_consec_frame+0xb4>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	7d1b      	ldrb	r3, [r3, #20]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	7f1b      	ldrb	r3, [r3, #28]
 800a9d4:	f003 030f 	and.w	r3, r3, #15
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d146      	bne.n	800aa6a <handle_consec_frame+0xaa>
    memcpy(link->rx_buff + link->recv_byte, frame->data + 1, frame->header.DLC - 1);
 800a9dc:	4b25      	ldr	r3, [pc, #148]	@ (800aa74 <handle_consec_frame+0xb4>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689a      	ldr	r2, [r3, #8]
 800a9e2:	4b24      	ldr	r3, [pc, #144]	@ (800aa74 <handle_consec_frame+0xb4>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	18d0      	adds	r0, r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	331c      	adds	r3, #28
 800a9ee:	1c59      	adds	r1, r3, #1
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	3b01      	subs	r3, #1
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f000 fb0c 	bl	800b014 <memcpy>
    link->recv_byte += frame->header.DLC - 1;
 800a9fc:	4b1d      	ldr	r3, [pc, #116]	@ (800aa74 <handle_consec_frame+0xb4>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	441a      	add	r2, r3
 800aa08:	4b1a      	ldr	r3, [pc, #104]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3a01      	subs	r2, #1
 800aa0e:	60da      	str	r2, [r3, #12]
    link->seq_num++;
 800aa10:	4b18      	ldr	r3, [pc, #96]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	7d1a      	ldrb	r2, [r3, #20]
 800aa16:	3201      	adds	r2, #1
 800aa18:	b2d2      	uxtb	r2, r2
 800aa1a:	751a      	strb	r2, [r3, #20]
    link->seq_num &= 0x0F;
 800aa1c:	4b15      	ldr	r3, [pc, #84]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	7d1a      	ldrb	r2, [r3, #20]
 800aa22:	4b14      	ldr	r3, [pc, #80]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f002 020f 	and.w	r2, r2, #15
 800aa2a:	b2d2      	uxtb	r2, r2
 800aa2c:	751a      	strb	r2, [r3, #20]
    if (link->recv_byte >= link->total_byte) {
 800aa2e:	4b11      	ldr	r3, [pc, #68]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68da      	ldr	r2, [r3, #12]
 800aa34:	4b0f      	ldr	r3, [pc, #60]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691b      	ldr	r3, [r3, #16]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d315      	bcc.n	800aa6a <handle_consec_frame+0xaa>
      link->recv_cb(link->rx_addr, link->rx_buff, link->total_byte);
 800aa3e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	4a0b      	ldr	r2, [pc, #44]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa46:	6812      	ldr	r2, [r2, #0]
 800aa48:	6810      	ldr	r0, [r2, #0]
 800aa4a:	4a0a      	ldr	r2, [pc, #40]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa4c:	6812      	ldr	r2, [r2, #0]
 800aa4e:	6891      	ldr	r1, [r2, #8]
 800aa50:	4a08      	ldr	r2, [pc, #32]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa52:	6812      	ldr	r2, [r2, #0]
 800aa54:	6912      	ldr	r2, [r2, #16]
 800aa56:	b292      	uxth	r2, r2
 800aa58:	4798      	blx	r3
      link->total_byte = 0;
 800aa5a:	4b06      	ldr	r3, [pc, #24]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	611a      	str	r2, [r3, #16]
      link->recv_byte = 0;
 800aa62:	4b04      	ldr	r3, [pc, #16]	@ (800aa74 <handle_consec_frame+0xb4>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2200      	movs	r2, #0
 800aa68:	60da      	str	r2, [r3, #12]
    }
  }
}
 800aa6a:	bf00      	nop
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	20000a40 	.word	0x20000a40

0800aa78 <isotp_can_recv>:

void isotp_can_recv(const can_rx_msg_t *frame)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  if (link->rx_addr == frame->header.StdId) // assuming all data is std frame
 800aa80:	4b13      	ldr	r3, [pc, #76]	@ (800aad0 <isotp_can_recv+0x58>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d11c      	bne.n	800aac8 <isotp_can_recv+0x50>
  {
    if (frame->data[0] >> 4 == 0) // single frame
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	7f1b      	ldrb	r3, [r3, #28]
 800aa92:	091b      	lsrs	r3, r3, #4
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d103      	bne.n	800aaa2 <isotp_can_recv+0x2a>
    {
      handle_single_frame(frame);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff ff36 	bl	800a90c <handle_single_frame>
    else if (frame->data[0] >> 4 == 2) // consecutive frame
    {
      handle_consec_frame(frame);
    }
  }
}
 800aaa0:	e012      	b.n	800aac8 <isotp_can_recv+0x50>
    else if (frame->data[0] >> 4 == 1) // first frame
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	7f1b      	ldrb	r3, [r3, #28]
 800aaa6:	091b      	lsrs	r3, r3, #4
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d103      	bne.n	800aab6 <isotp_can_recv+0x3e>
      handle_first_frame(frame);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7ff ff44 	bl	800a93c <handle_first_frame>
}
 800aab4:	e008      	b.n	800aac8 <isotp_can_recv+0x50>
    else if (frame->data[0] >> 4 == 2) // consecutive frame
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	7f1b      	ldrb	r3, [r3, #28]
 800aaba:	091b      	lsrs	r3, r3, #4
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d102      	bne.n	800aac8 <isotp_can_recv+0x50>
      handle_consec_frame(frame);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7ff ff7c 	bl	800a9c0 <handle_consec_frame>
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	20000a40 	.word	0x20000a40

0800aad4 <tp_recv_handler>:

static uint8_t srv_payload[64];
static isotp_link_t srv_link;

void tp_recv_handler(uint32_t id, const uint8_t *data, uint16_t len)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	4613      	mov	r3, r2
 800aae0:	80fb      	strh	r3, [r7, #6]
  uint8_t ret;
  uint32_t resp;
  uint32_t resp_len = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	61fb      	str	r3, [r7, #28]
  switch (data[0])
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	3b10      	subs	r3, #16
 800aaec:	2b27      	cmp	r3, #39	@ 0x27
 800aaee:	f200 813c 	bhi.w	800ad6a <tp_recv_handler+0x296>
 800aaf2:	a201      	add	r2, pc, #4	@ (adr r2, 800aaf8 <tp_recv_handler+0x24>)
 800aaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf8:	0800abc5 	.word	0x0800abc5
 800aafc:	0800ab99 	.word	0x0800ab99
 800ab00:	0800ad6b 	.word	0x0800ad6b
 800ab04:	0800ad6b 	.word	0x0800ad6b
 800ab08:	0800ad6b 	.word	0x0800ad6b
 800ab0c:	0800ad6b 	.word	0x0800ad6b
 800ab10:	0800ad6b 	.word	0x0800ad6b
 800ab14:	0800ad6b 	.word	0x0800ad6b
 800ab18:	0800ad6b 	.word	0x0800ad6b
 800ab1c:	0800ad6b 	.word	0x0800ad6b
 800ab20:	0800ad6b 	.word	0x0800ad6b
 800ab24:	0800ad6b 	.word	0x0800ad6b
 800ab28:	0800ad6b 	.word	0x0800ad6b
 800ab2c:	0800ad6b 	.word	0x0800ad6b
 800ab30:	0800ad6b 	.word	0x0800ad6b
 800ab34:	0800ad6b 	.word	0x0800ad6b
 800ab38:	0800ad6b 	.word	0x0800ad6b
 800ab3c:	0800ad6b 	.word	0x0800ad6b
 800ab40:	0800ad6b 	.word	0x0800ad6b
 800ab44:	0800ad6b 	.word	0x0800ad6b
 800ab48:	0800ad6b 	.word	0x0800ad6b
 800ab4c:	0800ad6b 	.word	0x0800ad6b
 800ab50:	0800ad6b 	.word	0x0800ad6b
 800ab54:	0800ad6b 	.word	0x0800ad6b
 800ab58:	0800ad6b 	.word	0x0800ad6b
 800ab5c:	0800ad6b 	.word	0x0800ad6b
 800ab60:	0800ad6b 	.word	0x0800ad6b
 800ab64:	0800ad6b 	.word	0x0800ad6b
 800ab68:	0800ad6b 	.word	0x0800ad6b
 800ab6c:	0800ad6b 	.word	0x0800ad6b
 800ab70:	0800ad6b 	.word	0x0800ad6b
 800ab74:	0800ad6b 	.word	0x0800ad6b
 800ab78:	0800ad6b 	.word	0x0800ad6b
 800ab7c:	0800abfd 	.word	0x0800abfd
 800ab80:	0800ad6b 	.word	0x0800ad6b
 800ab84:	0800ad6b 	.word	0x0800ad6b
 800ab88:	0800ac7d 	.word	0x0800ac7d
 800ab8c:	0800ad6b 	.word	0x0800ad6b
 800ab90:	0800ad05 	.word	0x0800ad05
 800ab94:	0800ad45 	.word	0x0800ad45
  {
  case ECU_RESET_SID:
    ret = ECU_reset_Handler();
 800ab98:	f7ff fc98 	bl	800a4cc <ECU_reset_Handler>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	76fb      	strb	r3, [r7, #27]
    if (ret == POSITIVE_RESPONE) {
 800aba0:	7efb      	ldrb	r3, [r7, #27]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d108      	bne.n	800abb8 <tp_recv_handler+0xe4>
    	srv_payload[0] = ECU_RESET_SID + 0x40;
 800aba6:	4b77      	ldr	r3, [pc, #476]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800aba8:	2251      	movs	r2, #81	@ 0x51
 800abaa:	701a      	strb	r2, [r3, #0]
    	srv_payload[1] = 0x01;
 800abac:	4b75      	ldr	r3, [pc, #468]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800abae:	2201      	movs	r2, #1
 800abb0:	705a      	strb	r2, [r3, #1]
      resp_len = 2;
 800abb2:	2302      	movs	r3, #2
 800abb4:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }
    break;
 800abb6:	e0dd      	b.n	800ad74 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 800abb8:	4b72      	ldr	r3, [pc, #456]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800abba:	227f      	movs	r2, #127	@ 0x7f
 800abbc:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 800abbe:	2301      	movs	r3, #1
 800abc0:	61fb      	str	r3, [r7, #28]
    break;
 800abc2:	e0d7      	b.n	800ad74 <tp_recv_handler+0x2a0>
  case DIAG_SESS_CTL_SID:
    ret = DiagSess_Ctl_Handler(data[1]);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	3301      	adds	r3, #1
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	4618      	mov	r0, r3
 800abcc:	f7ff fc85 	bl	800a4da <DiagSess_Ctl_Handler>
 800abd0:	4603      	mov	r3, r0
 800abd2:	76fb      	strb	r3, [r7, #27]
    if (ret == POSITIVE_RESPONE) {
 800abd4:	7efb      	ldrb	r3, [r7, #27]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10a      	bne.n	800abf0 <tp_recv_handler+0x11c>
    	srv_payload[0] = DIAG_SESS_CTL_SID + 0x40;
 800abda:	4b6a      	ldr	r3, [pc, #424]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800abdc:	2250      	movs	r2, #80	@ 0x50
 800abde:	701a      	strb	r2, [r3, #0]
    	srv_payload[1] = data[1];
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	3301      	adds	r3, #1
 800abe4:	781a      	ldrb	r2, [r3, #0]
 800abe6:	4b67      	ldr	r3, [pc, #412]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800abe8:	705a      	strb	r2, [r3, #1]
      resp_len = 2;
 800abea:	2302      	movs	r3, #2
 800abec:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }
    break;
 800abee:	e0c1      	b.n	800ad74 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 800abf0:	4b64      	ldr	r3, [pc, #400]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800abf2:	227f      	movs	r2, #127	@ 0x7f
 800abf4:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 800abf6:	2301      	movs	r3, #1
 800abf8:	61fb      	str	r3, [r7, #28]
    break;
 800abfa:	e0bb      	b.n	800ad74 <tp_recv_handler+0x2a0>
  case ROUTINE_CTL_SID:
    if (data[1] == 0xFE && data[2] == 0xF2) {
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	3301      	adds	r3, #1
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	2bfe      	cmp	r3, #254	@ 0xfe
 800ac04:	d133      	bne.n	800ac6e <tp_recv_handler+0x19a>
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	3302      	adds	r3, #2
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2bf2      	cmp	r3, #242	@ 0xf2
 800ac0e:	d12e      	bne.n	800ac6e <tp_recv_handler+0x19a>
      ret = Check_Memory_Handler(&resp);
 800ac10:	f107 0314 	add.w	r3, r7, #20
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7ff fc91 	bl	800a53c <Check_Memory_Handler>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	76fb      	strb	r3, [r7, #27]
      if (ret == POSITIVE_RESPONE) {
 800ac1e:	7efb      	ldrb	r3, [r7, #27]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d11e      	bne.n	800ac62 <tp_recv_handler+0x18e>
    	  srv_payload[0] = ROUTINE_CTL_SID + 0x40;
 800ac24:	4b57      	ldr	r3, [pc, #348]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ac26:	2271      	movs	r2, #113	@ 0x71
 800ac28:	701a      	strb	r2, [r3, #0]
        srv_payload[1] = 0xFE;
 800ac2a:	4b56      	ldr	r3, [pc, #344]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ac2c:	22fe      	movs	r2, #254	@ 0xfe
 800ac2e:	705a      	strb	r2, [r3, #1]
        srv_payload[2] = 0xF2;
 800ac30:	4b54      	ldr	r3, [pc, #336]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ac32:	22f2      	movs	r2, #242	@ 0xf2
 800ac34:	709a      	strb	r2, [r3, #2]
        srv_payload[3] = (resp >> 24) & 0xFF;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	0e1b      	lsrs	r3, r3, #24
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	4b51      	ldr	r3, [pc, #324]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ac3e:	70da      	strb	r2, [r3, #3]
        srv_payload[4] = (resp >> 16) & 0xFF;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	0c1b      	lsrs	r3, r3, #16
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	4b4f      	ldr	r3, [pc, #316]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ac48:	711a      	strb	r2, [r3, #4]
        srv_payload[5] = (resp >> 8) & 0xFF;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	0a1b      	lsrs	r3, r3, #8
 800ac4e:	b2da      	uxtb	r2, r3
 800ac50:	4b4c      	ldr	r3, [pc, #304]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ac52:	715a      	strb	r2, [r3, #5]
        srv_payload[6] = resp & 0xFF;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	4b4a      	ldr	r3, [pc, #296]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ac5a:	719a      	strb	r2, [r3, #6]
        resp_len = 7;
 800ac5c:	2307      	movs	r3, #7
 800ac5e:	61fb      	str	r3, [r7, #28]
      if (ret == POSITIVE_RESPONE) {
 800ac60:	e00b      	b.n	800ac7a <tp_recv_handler+0x1a6>
      } else {
    	  srv_payload[0] = NEGATIVE_RESPONE;
 800ac62:	4b48      	ldr	r3, [pc, #288]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ac64:	227f      	movs	r2, #127	@ 0x7f
 800ac66:	701a      	strb	r2, [r3, #0]
        resp_len = 1;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	61fb      	str	r3, [r7, #28]
      if (ret == POSITIVE_RESPONE) {
 800ac6c:	e005      	b.n	800ac7a <tp_recv_handler+0x1a6>
      }
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
 800ac6e:	4b45      	ldr	r3, [pc, #276]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ac70:	227f      	movs	r2, #127	@ 0x7f
 800ac72:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 800ac74:	2301      	movs	r3, #1
 800ac76:	61fb      	str	r3, [r7, #28]
    }
    break;
 800ac78:	e07c      	b.n	800ad74 <tp_recv_handler+0x2a0>
 800ac7a:	e07b      	b.n	800ad74 <tp_recv_handler+0x2a0>
  case REQUEST_DOWNLOAD_SID:

    ret = Request_Download_Handler(
      ((uint32_t)data[3] << 24 | (uint32_t)data[4] << 16) | (uint32_t)data[5] << 8 | (uint32_t)data[6],
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	3303      	adds	r3, #3
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	061a      	lsls	r2, r3, #24
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	3304      	adds	r3, #4
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	041b      	lsls	r3, r3, #16
 800ac8c:	431a      	orrs	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	3305      	adds	r3, #5
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	021b      	lsls	r3, r3, #8
 800ac96:	4313      	orrs	r3, r2
 800ac98:	68ba      	ldr	r2, [r7, #8]
 800ac9a:	3206      	adds	r2, #6
 800ac9c:	7812      	ldrb	r2, [r2, #0]
    ret = Request_Download_Handler(
 800ac9e:	ea43 0002 	orr.w	r0, r3, r2
      ((uint32_t)data[7] << 24 | (uint32_t)data[8] << 16) | (uint32_t)data[9] << 8 | (uint32_t)data[10],
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	3307      	adds	r3, #7
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	061a      	lsls	r2, r3, #24
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	3308      	adds	r3, #8
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	041b      	lsls	r3, r3, #16
 800acb2:	431a      	orrs	r2, r3
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	3309      	adds	r3, #9
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	4313      	orrs	r3, r2
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	320a      	adds	r2, #10
 800acc2:	7812      	ldrb	r2, [r2, #0]
    ret = Request_Download_Handler(
 800acc4:	4313      	orrs	r3, r2
 800acc6:	f107 0214 	add.w	r2, r7, #20
 800acca:	4619      	mov	r1, r3
 800accc:	f7ff fc10 	bl	800a4f0 <Request_Download_Handler>
 800acd0:	4603      	mov	r3, r0
 800acd2:	76fb      	strb	r3, [r7, #27]
      &resp);
    if (ret == POSITIVE_RESPONE) {
 800acd4:	7efb      	ldrb	r3, [r7, #27]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10e      	bne.n	800acf8 <tp_recv_handler+0x224>
    	srv_payload[0] = REQUEST_DOWNLOAD_SID + 0x40;
 800acda:	4b2a      	ldr	r3, [pc, #168]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800acdc:	2274      	movs	r2, #116	@ 0x74
 800acde:	701a      	strb	r2, [r3, #0]
      srv_payload[1] = (resp >> 8) & 0xFF;
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	0a1b      	lsrs	r3, r3, #8
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	4b27      	ldr	r3, [pc, #156]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ace8:	705a      	strb	r2, [r3, #1]
      srv_payload[2] = resp & 0xFF;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	b2da      	uxtb	r2, r3
 800acee:	4b25      	ldr	r3, [pc, #148]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800acf0:	709a      	strb	r2, [r3, #2]
      resp_len = 3;
 800acf2:	2303      	movs	r3, #3
 800acf4:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }

    break;
 800acf6:	e03d      	b.n	800ad74 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 800acf8:	4b22      	ldr	r3, [pc, #136]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800acfa:	227f      	movs	r2, #127	@ 0x7f
 800acfc:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 800acfe:	2301      	movs	r3, #1
 800ad00:	61fb      	str	r3, [r7, #28]
    break;
 800ad02:	e037      	b.n	800ad74 <tp_recv_handler+0x2a0>
  case TRANSFER_DATA_SID:
    ret = Transfer_Data_Handler(data[1], data + 2, len - 2);
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	3301      	adds	r3, #1
 800ad08:	7818      	ldrb	r0, [r3, #0]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	1c99      	adds	r1, r3, #2
 800ad0e:	88fb      	ldrh	r3, [r7, #6]
 800ad10:	3b02      	subs	r3, #2
 800ad12:	461a      	mov	r2, r3
 800ad14:	f7ff fbf9 	bl	800a50a <Transfer_Data_Handler>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	76fb      	strb	r3, [r7, #27]
    if (ret == POSITIVE_RESPONE) {
 800ad1c:	7efb      	ldrb	r3, [r7, #27]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d10a      	bne.n	800ad38 <tp_recv_handler+0x264>
    	srv_payload[0] = TRANSFER_DATA_SID + 0x40;
 800ad22:	4b18      	ldr	r3, [pc, #96]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ad24:	2276      	movs	r2, #118	@ 0x76
 800ad26:	701a      	strb	r2, [r3, #0]
      srv_payload[1] = data[1];
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	781a      	ldrb	r2, [r3, #0]
 800ad2e:	4b15      	ldr	r3, [pc, #84]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ad30:	705a      	strb	r2, [r3, #1]
      resp_len = 2;
 800ad32:	2302      	movs	r3, #2
 800ad34:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }

    break;
 800ad36:	e01d      	b.n	800ad74 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 800ad38:	4b12      	ldr	r3, [pc, #72]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ad3a:	227f      	movs	r2, #127	@ 0x7f
 800ad3c:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	61fb      	str	r3, [r7, #28]
    break;
 800ad42:	e017      	b.n	800ad74 <tp_recv_handler+0x2a0>
  case TRANSFER_EXIT_SID:
    ret = Transfer_Exit_Handler();
 800ad44:	f7ff fbf3 	bl	800a52e <Transfer_Exit_Handler>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	76fb      	strb	r3, [r7, #27]
    if (ret == POSITIVE_RESPONE) {
 800ad4c:	7efb      	ldrb	r3, [r7, #27]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d105      	bne.n	800ad5e <tp_recv_handler+0x28a>
    	srv_payload[0] = TRANSFER_EXIT_SID + 0x40;
 800ad52:	4b0c      	ldr	r3, [pc, #48]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ad54:	2277      	movs	r2, #119	@ 0x77
 800ad56:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }
    break;
 800ad5c:	e00a      	b.n	800ad74 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 800ad5e:	4b09      	ldr	r3, [pc, #36]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ad60:	227f      	movs	r2, #127	@ 0x7f
 800ad62:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 800ad64:	2301      	movs	r3, #1
 800ad66:	61fb      	str	r3, [r7, #28]
    break;
 800ad68:	e004      	b.n	800ad74 <tp_recv_handler+0x2a0>
  default:
	  srv_payload[0] = NEGATIVE_RESPONE;
 800ad6a:	4b06      	ldr	r3, [pc, #24]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ad6c:	227f      	movs	r2, #127	@ 0x7f
 800ad6e:	701a      	strb	r2, [r3, #0]
    resp_len = 1;
 800ad70:	2301      	movs	r3, #1
 800ad72:	61fb      	str	r3, [r7, #28]
  }
  send_isotp(srv_payload, resp_len);
 800ad74:	69f9      	ldr	r1, [r7, #28]
 800ad76:	4803      	ldr	r0, [pc, #12]	@ (800ad84 <tp_recv_handler+0x2b0>)
 800ad78:	f7ff fdaa 	bl	800a8d0 <send_isotp>
}
 800ad7c:	bf00      	nop
 800ad7e:	3720      	adds	r7, #32
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	20000a44 	.word	0x20000a44

0800ad88 <UDS_Srv_Init>:

void UDS_Srv_Init() {
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
  srv_link.recv_cb = tp_recv_handler;
 800ad8c:	4b09      	ldr	r3, [pc, #36]	@ (800adb4 <UDS_Srv_Init+0x2c>)
 800ad8e:	4a0a      	ldr	r2, [pc, #40]	@ (800adb8 <UDS_Srv_Init+0x30>)
 800ad90:	619a      	str	r2, [r3, #24]
  srv_link.rx_buff = srv_payload;
 800ad92:	4b08      	ldr	r3, [pc, #32]	@ (800adb4 <UDS_Srv_Init+0x2c>)
 800ad94:	4a09      	ldr	r2, [pc, #36]	@ (800adbc <UDS_Srv_Init+0x34>)
 800ad96:	609a      	str	r2, [r3, #8]
  srv_link.rx_addr = UDS_SOURCE_ADDR;
 800ad98:	4b06      	ldr	r3, [pc, #24]	@ (800adb4 <UDS_Srv_Init+0x2c>)
 800ad9a:	f240 7219 	movw	r2, #1817	@ 0x719
 800ad9e:	601a      	str	r2, [r3, #0]
  srv_link.tx_addr = UDS_TARGET_ADDR;
 800ada0:	4b04      	ldr	r3, [pc, #16]	@ (800adb4 <UDS_Srv_Init+0x2c>)
 800ada2:	f240 7291 	movw	r2, #1937	@ 0x791
 800ada6:	605a      	str	r2, [r3, #4]
  set_isotp_link(&srv_link);
 800ada8:	4802      	ldr	r0, [pc, #8]	@ (800adb4 <UDS_Srv_Init+0x2c>)
 800adaa:	f7ff fc89 	bl	800a6c0 <set_isotp_link>
}
 800adae:	bf00      	nop
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	20000a84 	.word	0x20000a84
 800adb8:	0800aad5 	.word	0x0800aad5
 800adbc:	20000a44 	.word	0x20000a44

0800adc0 <ota_ini_after_reset>:
Ota_Flashing_State ota_flashing_state = FLASHING_IDLE;

static uint32_t addr_index = 0;

void ota_ini_after_reset()
{
 800adc0:	b480      	push	{r7}
 800adc2:	af00      	add	r7, sp, #0

}
 800adc4:	bf00      	nop
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bc80      	pop	{r7}
 800adca:	4770      	bx	lr

0800adcc <ota_flashing_begin>:


void ota_flashing_begin(void)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800add0:	f7fc fe03 	bl	80079da <HAL_NVIC_SystemReset>
}
 800add4:	bf00      	nop
 800add6:	bd80      	pop	{r7, pc}

0800add8 <ota_flashing_inprogress>:


void ota_flashing_inprogress(uint32_t data)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]

}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bc80      	pop	{r7}
 800ade8:	4770      	bx	lr

0800adea <ota_flashing_end>:


void ota_flashing_end(void)
{
 800adea:	b480      	push	{r7}
 800adec:	af00      	add	r7, sp, #0

}
 800adee:	bf00      	nop
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bc80      	pop	{r7}
 800adf4:	4770      	bx	lr

0800adf6 <buffer_rotate>:
 * [ ] [x] [x] [x]
 *
 */

static uint16_t buffer_rotate(uint16_t point, uint16_t max)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b085      	sub	sp, #20
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	4603      	mov	r3, r0
 800adfe:	460a      	mov	r2, r1
 800ae00:	80fb      	strh	r3, [r7, #6]
 800ae02:	4613      	mov	r3, r2
 800ae04:	80bb      	strh	r3, [r7, #4]
  uint16_t ret = point + 1;
 800ae06:	88fb      	ldrh	r3, [r7, #6]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	81fb      	strh	r3, [r7, #14]
  if (ret == max)
 800ae0c:	89fa      	ldrh	r2, [r7, #14]
 800ae0e:	88bb      	ldrh	r3, [r7, #4]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d101      	bne.n	800ae18 <buffer_rotate+0x22>
    ret = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	81fb      	strh	r3, [r7, #14]
  return ret;
 800ae18:	89fb      	ldrh	r3, [r7, #14]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bc80      	pop	{r7}
 800ae22:	4770      	bx	lr

0800ae24 <init_buffer>:

void init_buffer(buff_handler_t handler, void *buff, uint16_t size)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	80fb      	strh	r3, [r7, #6]
  handler->buff = buff;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	601a      	str	r2, [r3, #0]
  handler->buff_size = size;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	88fa      	ldrh	r2, [r7, #6]
 800ae3c:	811a      	strh	r2, [r3, #8]
  handler->head = 0u;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2200      	movs	r2, #0
 800ae42:	809a      	strh	r2, [r3, #4]
  handler->tail = 0u;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	80da      	strh	r2, [r3, #6]
}
 800ae4a:	bf00      	nop
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bc80      	pop	{r7}
 800ae52:	4770      	bx	lr

0800ae54 <buffer_available>:

int32_t buffer_available(const buff_handler_t handler)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  return (handler->head == handler->tail) ? -1 : 0;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	889a      	ldrh	r2, [r3, #4]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	88db      	ldrh	r3, [r3, #6]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d102      	bne.n	800ae6e <buffer_available+0x1a>
 800ae68:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6c:	e000      	b.n	800ae70 <buffer_available+0x1c>
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bc80      	pop	{r7}
 800ae78:	4770      	bx	lr

0800ae7a <buffer_front>:

message_t buffer_front(buff_handler_t handler, uint16_t msg_size)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	807b      	strh	r3, [r7, #2]
  message_t ret = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	60fb      	str	r3, [r7, #12]
  if (buffer_available(handler) != -1)
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff ffe2 	bl	800ae54 <buffer_available>
 800ae90:	4603      	mov	r3, r0
 800ae92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae96:	d009      	beq.n	800aeac <buffer_front+0x32>
  {
    ret = handler->buff + handler->head * msg_size;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	8892      	ldrh	r2, [r2, #4]
 800aea0:	4611      	mov	r1, r2
 800aea2:	887a      	ldrh	r2, [r7, #2]
 800aea4:	fb01 f202 	mul.w	r2, r1, r2
 800aea8:	4413      	add	r3, r2
 800aeaa:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800aeac:	68fb      	ldr	r3, [r7, #12]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <buffer_push>:

int32_t buffer_push(buff_handler_t handler, message_t msg, uint16_t msg_size)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	60f8      	str	r0, [r7, #12]
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	4613      	mov	r3, r2
 800aec2:	80fb      	strh	r3, [r7, #6]
  if (buffer_rotate(handler->tail, handler->buff_size) != handler->head)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	88da      	ldrh	r2, [r3, #6]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	891b      	ldrh	r3, [r3, #8]
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f7ff ff91 	bl	800adf6 <buffer_rotate>
 800aed4:	4603      	mov	r3, r0
 800aed6:	461a      	mov	r2, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	889b      	ldrh	r3, [r3, #4]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d01b      	beq.n	800af18 <buffer_push+0x62>
  {
    us_memcpy(handler->buff + handler->tail * msg_size, msg, msg_size);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	88d2      	ldrh	r2, [r2, #6]
 800aee8:	4611      	mov	r1, r2
 800aeea:	88fa      	ldrh	r2, [r7, #6]
 800aeec:	fb01 f202 	mul.w	r2, r1, r2
 800aef0:	4413      	add	r3, r2
 800aef2:	88fa      	ldrh	r2, [r7, #6]
 800aef4:	68b9      	ldr	r1, [r7, #8]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 f833 	bl	800af62 <us_memcpy>
    handler->tail = buffer_rotate(handler->tail, handler->buff_size);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	88da      	ldrh	r2, [r3, #6]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	891b      	ldrh	r3, [r3, #8]
 800af04:	4619      	mov	r1, r3
 800af06:	4610      	mov	r0, r2
 800af08:	f7ff ff75 	bl	800adf6 <buffer_rotate>
 800af0c:	4603      	mov	r3, r0
 800af0e:	461a      	mov	r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	80da      	strh	r2, [r3, #6]
    return 0;
 800af14:	2300      	movs	r3, #0
 800af16:	e001      	b.n	800af1c <buffer_push+0x66>
  }
  return -1;
 800af18:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <buffer_pop>:

int32_t buffer_pop(buff_handler_t handler)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  if (buffer_available(handler) != -1)
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7ff ff91 	bl	800ae54 <buffer_available>
 800af32:	4603      	mov	r3, r0
 800af34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af38:	d00d      	beq.n	800af56 <buffer_pop+0x32>
  {
    handler->head = buffer_rotate(handler->head, handler->buff_size);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	889a      	ldrh	r2, [r3, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	891b      	ldrh	r3, [r3, #8]
 800af42:	4619      	mov	r1, r3
 800af44:	4610      	mov	r0, r2
 800af46:	f7ff ff56 	bl	800adf6 <buffer_rotate>
 800af4a:	4603      	mov	r3, r0
 800af4c:	461a      	mov	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	809a      	strh	r2, [r3, #4]
    return 0;
 800af52:	2300      	movs	r3, #0
 800af54:	e001      	b.n	800af5a <buffer_pop+0x36>
  }
  return -1;
 800af56:	f04f 33ff 	mov.w	r3, #4294967295
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <us_memcpy>:
 */

#include "us_memcpy.h"

void us_memcpy(void *dst, const void *src, uint32_t size)
{
 800af62:	b480      	push	{r7}
 800af64:	b085      	sub	sp, #20
 800af66:	af00      	add	r7, sp, #0
 800af68:	60f8      	str	r0, [r7, #12]
 800af6a:	60b9      	str	r1, [r7, #8]
 800af6c:	607a      	str	r2, [r7, #4]
  // Copy longwords, taking advantage of STM ability to read/write unaligned data
  while (size >= 4)
 800af6e:	e00c      	b.n	800af8a <us_memcpy+0x28>
  {
    *(uint32_t *)dst = *(
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	601a      	str	r2, [r3, #0]
        const uint32_t *)src;
    dst = (uint8_t *)dst + 4;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	3304      	adds	r3, #4
 800af7c:	60fb      	str	r3, [r7, #12]
    src = (const uint8_t *)src + 4;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	3304      	adds	r3, #4
 800af82:	60bb      	str	r3, [r7, #8]
    size -= 4;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3b04      	subs	r3, #4
 800af88:	607b      	str	r3, [r7, #4]
  while (size >= 4)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d8ef      	bhi.n	800af70 <us_memcpy+0xe>
  }
  // Copy the couple of leftover bytes
  while (size--)
 800af90:	e009      	b.n	800afa6 <us_memcpy+0x44>
  {
    *(uint8_t *)dst = *(
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	781a      	ldrb	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	701a      	strb	r2, [r3, #0]
        const uint8_t *)src;
    dst = (uint8_t *)dst + 1;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	3301      	adds	r3, #1
 800af9e:	60fb      	str	r3, [r7, #12]
    src = (const uint8_t *)src + 1;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	3301      	adds	r3, #1
 800afa4:	60bb      	str	r3, [r7, #8]
  while (size--)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	1e5a      	subs	r2, r3, #1
 800afaa:	607a      	str	r2, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1f0      	bne.n	800af92 <us_memcpy+0x30>
  }
}
 800afb0:	bf00      	nop
 800afb2:	bf00      	nop
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bc80      	pop	{r7}
 800afba:	4770      	bx	lr

0800afbc <memset>:
 800afbc:	4603      	mov	r3, r0
 800afbe:	4402      	add	r2, r0
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d100      	bne.n	800afc6 <memset+0xa>
 800afc4:	4770      	bx	lr
 800afc6:	f803 1b01 	strb.w	r1, [r3], #1
 800afca:	e7f9      	b.n	800afc0 <memset+0x4>

0800afcc <__libc_init_array>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	2600      	movs	r6, #0
 800afd0:	4d0c      	ldr	r5, [pc, #48]	@ (800b004 <__libc_init_array+0x38>)
 800afd2:	4c0d      	ldr	r4, [pc, #52]	@ (800b008 <__libc_init_array+0x3c>)
 800afd4:	1b64      	subs	r4, r4, r5
 800afd6:	10a4      	asrs	r4, r4, #2
 800afd8:	42a6      	cmp	r6, r4
 800afda:	d109      	bne.n	800aff0 <__libc_init_array+0x24>
 800afdc:	f000 f828 	bl	800b030 <_init>
 800afe0:	2600      	movs	r6, #0
 800afe2:	4d0a      	ldr	r5, [pc, #40]	@ (800b00c <__libc_init_array+0x40>)
 800afe4:	4c0a      	ldr	r4, [pc, #40]	@ (800b010 <__libc_init_array+0x44>)
 800afe6:	1b64      	subs	r4, r4, r5
 800afe8:	10a4      	asrs	r4, r4, #2
 800afea:	42a6      	cmp	r6, r4
 800afec:	d105      	bne.n	800affa <__libc_init_array+0x2e>
 800afee:	bd70      	pop	{r4, r5, r6, pc}
 800aff0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aff4:	4798      	blx	r3
 800aff6:	3601      	adds	r6, #1
 800aff8:	e7ee      	b.n	800afd8 <__libc_init_array+0xc>
 800affa:	f855 3b04 	ldr.w	r3, [r5], #4
 800affe:	4798      	blx	r3
 800b000:	3601      	adds	r6, #1
 800b002:	e7f2      	b.n	800afea <__libc_init_array+0x1e>
 800b004:	0800b084 	.word	0x0800b084
 800b008:	0800b084 	.word	0x0800b084
 800b00c:	0800b084 	.word	0x0800b084
 800b010:	0800b088 	.word	0x0800b088

0800b014 <memcpy>:
 800b014:	440a      	add	r2, r1
 800b016:	4291      	cmp	r1, r2
 800b018:	f100 33ff 	add.w	r3, r0, #4294967295
 800b01c:	d100      	bne.n	800b020 <memcpy+0xc>
 800b01e:	4770      	bx	lr
 800b020:	b510      	push	{r4, lr}
 800b022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b026:	4291      	cmp	r1, r2
 800b028:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b02c:	d1f9      	bne.n	800b022 <memcpy+0xe>
 800b02e:	bd10      	pop	{r4, pc}

0800b030 <_init>:
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	bf00      	nop
 800b034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b036:	bc08      	pop	{r3}
 800b038:	469e      	mov	lr, r3
 800b03a:	4770      	bx	lr

0800b03c <_fini>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	bf00      	nop
 800b040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b042:	bc08      	pop	{r3}
 800b044:	469e      	mov	lr, r3
 800b046:	4770      	bx	lr
