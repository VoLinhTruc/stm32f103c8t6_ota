
ota_boot_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d4c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005e58  08005e58  00006e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ee4  08005ee4  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  08005ee4  08005ee4  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ee4  08005ee4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ee8  08005ee8  00006ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005eec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c1c  20000060  08005f4c  00007060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000c7c  08005f4c  00007c7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d75  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fcd  00000000  00000000  00017dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0001add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbd  00000000  00000000  0001be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c47  00000000  00000000  0001cb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014898  00000000  00000000  00035764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfdf  00000000  00000000  00049ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7fdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000482c  00000000  00000000  000d8020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000dc84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e40 	.word	0x08005e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08005e40 	.word	0x08005e40

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc82 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f817 	bl	8000186 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f9e2 	bl	8000520 <MX_GPIO_Init>
  MX_CAN_Init();
 800015c:	f000 f858 	bl	8000210 <MX_CAN_Init>
  MX_TIM1_Init();
 8000160:	f000 f88c 	bl	800027c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000164:	f000 f92e 	bl	80003c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000168:	f000 f9b0 	bl	80004cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  COM_Proc_Init();
 800016c:	f004 fc9a 	bl	8004aa4 <COM_Proc_Init>
  DCM_Proc_Init();
 8000170:	f004 fbc0 	bl	80048f4 <DCM_Proc_Init>
  ota_init();
 8000174:	f005 f83e 	bl	80051f4 <ota_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  COM_Proc_1ms();
 8000178:	f004 fc9a 	bl	8004ab0 <COM_Proc_1ms>
	  HAL_Delay(1);
 800017c:	2001      	movs	r0, #1
 800017e:	f000 fccd 	bl	8000b1c <HAL_Delay>
	  COM_Proc_1ms();
 8000182:	bf00      	nop
 8000184:	e7f8      	b.n	8000178 <main+0x2c>

08000186 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000186:	b580      	push	{r7, lr}
 8000188:	b090      	sub	sp, #64	@ 0x40
 800018a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018c:	f107 0318 	add.w	r3, r7, #24
 8000190:	2228      	movs	r2, #40	@ 0x28
 8000192:	2100      	movs	r1, #0
 8000194:	4618      	mov	r0, r3
 8000196:	f005 f9c3 	bl	8005520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019a:	1d3b      	adds	r3, r7, #4
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
 80001a0:	605a      	str	r2, [r3, #4]
 80001a2:	609a      	str	r2, [r3, #8]
 80001a4:	60da      	str	r2, [r3, #12]
 80001a6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a8:	2301      	movs	r3, #1
 80001aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b2:	2300      	movs	r3, #0
 80001b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ba:	2302      	movs	r3, #2
 80001bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80001c4:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80001c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 f898 	bl	8002304 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001da:	f000 f9f9 	bl	80005d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e2:	2302      	movs	r3, #2
 80001e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2102      	movs	r1, #2
 80001f8:	4618      	mov	r0, r3
 80001fa:	f002 fb05 	bl	8002808 <HAL_RCC_ClockConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000204:	f000 f9e4 	bl	80005d0 <Error_Handler>
  }
}
 8000208:	bf00      	nop
 800020a:	3740      	adds	r7, #64	@ 0x40
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}

08000210 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000214:	4b17      	ldr	r3, [pc, #92]	@ (8000274 <MX_CAN_Init+0x64>)
 8000216:	4a18      	ldr	r2, [pc, #96]	@ (8000278 <MX_CAN_Init+0x68>)
 8000218:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800021a:	4b16      	ldr	r3, [pc, #88]	@ (8000274 <MX_CAN_Init+0x64>)
 800021c:	2204      	movs	r2, #4
 800021e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000220:	4b14      	ldr	r3, [pc, #80]	@ (8000274 <MX_CAN_Init+0x64>)
 8000222:	2200      	movs	r2, #0
 8000224:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000226:	4b13      	ldr	r3, [pc, #76]	@ (8000274 <MX_CAN_Init+0x64>)
 8000228:	2200      	movs	r2, #0
 800022a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 800022c:	4b11      	ldr	r3, [pc, #68]	@ (8000274 <MX_CAN_Init+0x64>)
 800022e:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8000232:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000234:	4b0f      	ldr	r3, [pc, #60]	@ (8000274 <MX_CAN_Init+0x64>)
 8000236:	2200      	movs	r2, #0
 8000238:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800023a:	4b0e      	ldr	r3, [pc, #56]	@ (8000274 <MX_CAN_Init+0x64>)
 800023c:	2200      	movs	r2, #0
 800023e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000240:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <MX_CAN_Init+0x64>)
 8000242:	2201      	movs	r2, #1
 8000244:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000246:	4b0b      	ldr	r3, [pc, #44]	@ (8000274 <MX_CAN_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800024c:	4b09      	ldr	r3, [pc, #36]	@ (8000274 <MX_CAN_Init+0x64>)
 800024e:	2200      	movs	r2, #0
 8000250:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000252:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <MX_CAN_Init+0x64>)
 8000254:	2200      	movs	r2, #0
 8000256:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000258:	4b06      	ldr	r3, [pc, #24]	@ (8000274 <MX_CAN_Init+0x64>)
 800025a:	2200      	movs	r2, #0
 800025c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800025e:	4805      	ldr	r0, [pc, #20]	@ (8000274 <MX_CAN_Init+0x64>)
 8000260:	f000 fc80 	bl	8000b64 <HAL_CAN_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800026a:	f000 f9b1 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	2000007c 	.word	0x2000007c
 8000278:	40006400 	.word	0x40006400

0800027c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b096      	sub	sp, #88	@ 0x58
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
//
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000282:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000290:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800029a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2220      	movs	r2, #32
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f005 f933 	bl	8005520 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
//
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002ba:	4b40      	ldr	r3, [pc, #256]	@ (80003bc <MX_TIM1_Init+0x140>)
 80002bc:	4a40      	ldr	r2, [pc, #256]	@ (80003c0 <MX_TIM1_Init+0x144>)
 80002be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002c0:	4b3e      	ldr	r3, [pc, #248]	@ (80003bc <MX_TIM1_Init+0x140>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c6:	4b3d      	ldr	r3, [pc, #244]	@ (80003bc <MX_TIM1_Init+0x140>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 80002cc:	4b3b      	ldr	r3, [pc, #236]	@ (80003bc <MX_TIM1_Init+0x140>)
 80002ce:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80002d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d4:	4b39      	ldr	r3, [pc, #228]	@ (80003bc <MX_TIM1_Init+0x140>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002da:	4b38      	ldr	r3, [pc, #224]	@ (80003bc <MX_TIM1_Init+0x140>)
 80002dc:	2200      	movs	r2, #0
 80002de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002e0:	4b36      	ldr	r3, [pc, #216]	@ (80003bc <MX_TIM1_Init+0x140>)
 80002e2:	2280      	movs	r2, #128	@ 0x80
 80002e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002e6:	4835      	ldr	r0, [pc, #212]	@ (80003bc <MX_TIM1_Init+0x140>)
 80002e8:	f002 fc1c 	bl	8002b24 <HAL_TIM_Base_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80002f2:	f000 f96d 	bl	80005d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000300:	4619      	mov	r1, r3
 8000302:	482e      	ldr	r0, [pc, #184]	@ (80003bc <MX_TIM1_Init+0x140>)
 8000304:	f002 ff74 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800030e:	f000 f95f 	bl	80005d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000312:	482a      	ldr	r0, [pc, #168]	@ (80003bc <MX_TIM1_Init+0x140>)
 8000314:	f002 fc55 	bl	8002bc2 <HAL_TIM_PWM_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800031e:	f000 f957 	bl	80005d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000322:	2300      	movs	r3, #0
 8000324:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000326:	2300      	movs	r3, #0
 8000328:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800032a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800032e:	4619      	mov	r1, r3
 8000330:	4822      	ldr	r0, [pc, #136]	@ (80003bc <MX_TIM1_Init+0x140>)
 8000332:	f003 fbfb 	bl	8003b2c <HAL_TIMEx_MasterConfigSynchronization>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800033c:	f000 f948 	bl	80005d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000340:	2360      	movs	r3, #96	@ 0x60
 8000342:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000348:	2300      	movs	r3, #0
 800034a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800034c:	2300      	movs	r3, #0
 800034e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000354:	2300      	movs	r3, #0
 8000356:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000358:	2300      	movs	r3, #0
 800035a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000360:	2200      	movs	r2, #0
 8000362:	4619      	mov	r1, r3
 8000364:	4815      	ldr	r0, [pc, #84]	@ (80003bc <MX_TIM1_Init+0x140>)
 8000366:	f002 fe81 	bl	800306c <HAL_TIM_PWM_ConfigChannel>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000370:	f000 f92e 	bl	80005d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000374:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000378:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800037a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800037e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 36;
 8000384:	2324      	movs	r3, #36	@ 0x24
 8000386:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800038c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000390:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000392:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000396:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4807      	ldr	r0, [pc, #28]	@ (80003bc <MX_TIM1_Init+0x140>)
 800039e:	f003 fc23 	bl	8003be8 <HAL_TIMEx_ConfigBreakDeadTime>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 80003a8:	f000 f912 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
//
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003ac:	4803      	ldr	r0, [pc, #12]	@ (80003bc <MX_TIM1_Init+0x140>)
 80003ae:	f000 fa07 	bl	80007c0 <HAL_TIM_MspPostInit>

}
 80003b2:	bf00      	nop
 80003b4:	3758      	adds	r7, #88	@ 0x58
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	200000a4 	.word	0x200000a4
 80003c0:	40012c00 	.word	0x40012c00

080003c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	@ 0x28
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
//
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0318 	add.w	r3, r7, #24
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	f107 0310 	add.w	r3, r7, #16
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003e2:	463b      	mov	r3, r7
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */
//
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ee:	4b36      	ldr	r3, [pc, #216]	@ (80004c8 <MX_TIM2_Init+0x104>)
 80003f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 199;
 80003f6:	4b34      	ldr	r3, [pc, #208]	@ (80004c8 <MX_TIM2_Init+0x104>)
 80003f8:	22c7      	movs	r2, #199	@ 0xc7
 80003fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fc:	4b32      	ldr	r3, [pc, #200]	@ (80004c8 <MX_TIM2_Init+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000402:	4b31      	ldr	r3, [pc, #196]	@ (80004c8 <MX_TIM2_Init+0x104>)
 8000404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000408:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <MX_TIM2_Init+0x104>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000410:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <MX_TIM2_Init+0x104>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000416:	482c      	ldr	r0, [pc, #176]	@ (80004c8 <MX_TIM2_Init+0x104>)
 8000418:	f002 fb84 	bl	8002b24 <HAL_TIM_Base_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000422:	f000 f8d5 	bl	80005d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000426:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800042a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800042c:	f107 0318 	add.w	r3, r7, #24
 8000430:	4619      	mov	r1, r3
 8000432:	4825      	ldr	r0, [pc, #148]	@ (80004c8 <MX_TIM2_Init+0x104>)
 8000434:	f002 fedc 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800043e:	f000 f8c7 	bl	80005d0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000442:	4821      	ldr	r0, [pc, #132]	@ (80004c8 <MX_TIM2_Init+0x104>)
 8000444:	f002 fc15 	bl	8002c72 <HAL_TIM_IC_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800044e:	f000 f8bf 	bl	80005d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000452:	2300      	movs	r3, #0
 8000454:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	4819      	ldr	r0, [pc, #100]	@ (80004c8 <MX_TIM2_Init+0x104>)
 8000462:	f003 fb63 	bl	8003b2c <HAL_TIMEx_MasterConfigSynchronization>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800046c:	f000 f8b0 	bl	80005d0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000470:	2300      	movs	r3, #0
 8000472:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000474:	2301      	movs	r3, #1
 8000476:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000478:	2300      	movs	r3, #0
 800047a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800047c:	230f      	movs	r3, #15
 800047e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000480:	463b      	mov	r3, r7
 8000482:	2200      	movs	r2, #0
 8000484:	4619      	mov	r1, r3
 8000486:	4810      	ldr	r0, [pc, #64]	@ (80004c8 <MX_TIM2_Init+0x104>)
 8000488:	f002 fd53 	bl	8002f32 <HAL_TIM_IC_ConfigChannel>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000492:	f000 f89d 	bl	80005d0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	2204      	movs	r2, #4
 800049a:	4619      	mov	r1, r3
 800049c:	480a      	ldr	r0, [pc, #40]	@ (80004c8 <MX_TIM2_Init+0x104>)
 800049e:	f002 fd48 	bl	8002f32 <HAL_TIM_IC_ConfigChannel>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80004a8:	f000 f892 	bl	80005d0 <Error_Handler>
  }
  if (HAL_TIM_ConfigTI1Input(&htim2, TIM_TI1SELECTION_XORCOMBINATION) != HAL_OK)
 80004ac:	2180      	movs	r1, #128	@ 0x80
 80004ae:	4806      	ldr	r0, [pc, #24]	@ (80004c8 <MX_TIM2_Init+0x104>)
 80004b0:	f002 ff65 	bl	800337e <HAL_TIM_ConfigTI1Input>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80004ba:	f000 f889 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
//
  /* USER CODE END TIM2_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	3728      	adds	r7, #40	@ 0x28
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	200000ec 	.word	0x200000ec

080004cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004d0:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <MX_USART2_UART_Init+0x4c>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	@ (800051c <MX_USART2_UART_Init+0x50>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004d6:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <MX_USART2_UART_Init+0x4c>)
 80004d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <MX_USART2_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <MX_USART2_UART_Init+0x4c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000518 <MX_USART2_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <MX_USART2_UART_Init+0x4c>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <MX_USART2_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <MX_USART2_UART_Init+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000502:	4805      	ldr	r0, [pc, #20]	@ (8000518 <MX_USART2_UART_Init+0x4c>)
 8000504:	f003 fbd3 	bl	8003cae <HAL_UART_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800050e:	f000 f85f 	bl	80005d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000134 	.word	0x20000134
 800051c:	40004400 	.word	0x40004400

08000520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a23      	ldr	r2, [pc, #140]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0310 	and.w	r3, r3, #16
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054c:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a1d      	ldr	r2, [pc, #116]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 8000552:	f043 0320 	orr.w	r3, r3, #32
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0320 	and.w	r3, r3, #32
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a17      	ldr	r2, [pc, #92]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a11      	ldr	r2, [pc, #68]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 8000582:	f043 0308 	orr.w	r3, r3, #8
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <MX_GPIO_Init+0xa8>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0308 	and.w	r3, r3, #8
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059a:	480c      	ldr	r0, [pc, #48]	@ (80005cc <MX_GPIO_Init+0xac>)
 800059c:	f001 fe80 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80005a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	4804      	ldr	r0, [pc, #16]	@ (80005cc <MX_GPIO_Init+0xac>)
 80005ba:	f001 fced 	bl	8001f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40011000 	.word	0x40011000

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d4:	b672      	cpsid	i
}
 80005d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <Error_Handler+0x8>

080005dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <HAL_MspInit+0x5c>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	4a14      	ldr	r2, [pc, #80]	@ (8000638 <HAL_MspInit+0x5c>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6193      	str	r3, [r2, #24]
 80005ee:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <HAL_MspInit+0x5c>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <HAL_MspInit+0x5c>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <HAL_MspInit+0x5c>)
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <HAL_MspInit+0x5c>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <HAL_MspInit+0x60>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	4a04      	ldr	r2, [pc, #16]	@ (800063c <HAL_MspInit+0x60>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	40021000 	.word	0x40021000
 800063c:	40010000 	.word	0x40010000

08000640 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a29      	ldr	r2, [pc, #164]	@ (8000700 <HAL_CAN_MspInit+0xc0>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d14b      	bne.n	80006f8 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000660:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <HAL_CAN_MspInit+0xc4>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <HAL_CAN_MspInit+0xc4>)
 8000666:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800066a:	61d3      	str	r3, [r2, #28]
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <HAL_CAN_MspInit+0xc4>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <HAL_CAN_MspInit+0xc4>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <HAL_CAN_MspInit+0xc4>)
 800067e:	f043 0308 	orr.w	r3, r3, #8
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <HAL_CAN_MspInit+0xc4>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0308 	and.w	r3, r3, #8
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4818      	ldr	r0, [pc, #96]	@ (8000708 <HAL_CAN_MspInit+0xc8>)
 80006a6:	f001 fc77 	bl	8001f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4812      	ldr	r0, [pc, #72]	@ (8000708 <HAL_CAN_MspInit+0xc8>)
 80006c0:	f001 fc6a 	bl	8001f98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <HAL_CAN_MspInit+0xcc>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006cc:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80006da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <HAL_CAN_MspInit+0xcc>)
 80006e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e6:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2014      	movs	r0, #20
 80006ee:	f001 f966 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006f2:	2014      	movs	r0, #20
 80006f4:	f001 f97f 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	@ 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40006400 	.word	0x40006400
 8000704:	40021000 	.word	0x40021000
 8000708:	40010c00 	.word	0x40010c00
 800070c:	40010000 	.word	0x40010000

08000710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0318 	add.w	r3, r7, #24
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <HAL_TIM_Base_MspInit+0xa4>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d10c      	bne.n	800074a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000730:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <HAL_TIM_Base_MspInit+0xa8>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a20      	ldr	r2, [pc, #128]	@ (80007b8 <HAL_TIM_Base_MspInit+0xa8>)
 8000736:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <HAL_TIM_Base_MspInit+0xa8>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000748:	e030      	b.n	80007ac <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000752:	d12b      	bne.n	80007ac <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <HAL_TIM_Base_MspInit+0xa8>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <HAL_TIM_Base_MspInit+0xa8>)
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	61d3      	str	r3, [r2, #28]
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <HAL_TIM_Base_MspInit+0xa8>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	f003 0301 	and.w	r3, r3, #1
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <HAL_TIM_Base_MspInit+0xa8>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a11      	ldr	r2, [pc, #68]	@ (80007b8 <HAL_TIM_Base_MspInit+0xa8>)
 8000772:	f043 0304 	orr.w	r3, r3, #4
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <HAL_TIM_Base_MspInit+0xa8>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000784:	2303      	movs	r3, #3
 8000786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0318 	add.w	r3, r7, #24
 8000794:	4619      	mov	r1, r3
 8000796:	4809      	ldr	r0, [pc, #36]	@ (80007bc <HAL_TIM_Base_MspInit+0xac>)
 8000798:	f001 fbfe 	bl	8001f98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	201c      	movs	r0, #28
 80007a2:	f001 f90c 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007a6:	201c      	movs	r0, #28
 80007a8:	f001 f925 	bl	80019f6 <HAL_NVIC_EnableIRQ>
}
 80007ac:	bf00      	nop
 80007ae:	3728      	adds	r7, #40	@ 0x28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40012c00 	.word	0x40012c00
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a19      	ldr	r2, [pc, #100]	@ (8000840 <HAL_TIM_MspPostInit+0x80>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d12a      	bne.n	8000836 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <HAL_TIM_MspPostInit+0x84>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <HAL_TIM_MspPostInit+0x84>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b15      	ldr	r3, [pc, #84]	@ (8000844 <HAL_TIM_MspPostInit+0x84>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007f8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80007fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	480e      	ldr	r0, [pc, #56]	@ (8000848 <HAL_TIM_MspPostInit+0x88>)
 800080e:	f001 fbc3 	bl	8001f98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_TIM_MspPostInit+0x8c>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800081e:	61fb      	str	r3, [r7, #28]
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800082e:	61fb      	str	r3, [r7, #28]
 8000830:	4a06      	ldr	r2, [pc, #24]	@ (800084c <HAL_TIM_MspPostInit+0x8c>)
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40012c00 	.word	0x40012c00
 8000844:	40021000 	.word	0x40021000
 8000848:	40010800 	.word	0x40010800
 800084c:	40010000 	.word	0x40010000

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a1f      	ldr	r2, [pc, #124]	@ (80008e8 <HAL_UART_MspInit+0x98>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d137      	bne.n	80008e0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <HAL_UART_MspInit+0x9c>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a1d      	ldr	r2, [pc, #116]	@ (80008ec <HAL_UART_MspInit+0x9c>)
 8000876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ec <HAL_UART_MspInit+0x9c>)
 800087e:	69db      	ldr	r3, [r3, #28]
 8000880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <HAL_UART_MspInit+0x9c>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <HAL_UART_MspInit+0x9c>)
 800088e:	f043 0304 	orr.w	r3, r3, #4
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <HAL_UART_MspInit+0x9c>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0304 	and.w	r3, r3, #4
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a0:	2304      	movs	r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	480f      	ldr	r0, [pc, #60]	@ (80008f0 <HAL_UART_MspInit+0xa0>)
 80008b4:	f001 fb70 	bl	8001f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008b8:	2308      	movs	r3, #8
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <HAL_UART_MspInit+0xa0>)
 80008cc:	f001 fb64 	bl	8001f98 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2026      	movs	r0, #38	@ 0x26
 80008d6:	f001 f872 	bl	80019be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008da:	2026      	movs	r0, #38	@ 0x26
 80008dc:	f001 f88b 	bl	80019f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40004400 	.word	0x40004400
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <NMI_Handler+0x4>

080008fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <MemManage_Handler+0x4>

0800090c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <UsageFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8ce 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000952:	f000 fd24 	bl	800139e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000007c 	.word	0x2000007c

08000960 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <TIM2_IRQHandler+0x10>)
 8000966:	f002 f9dc 	bl	8002d22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000ec 	.word	0x200000ec

08000974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <USART2_IRQHandler+0x10>)
 800097a:	f003 fa6b 	bl	8003e54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000134 	.word	0x20000134

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	@ (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	@ (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	@ (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f004 fdba 	bl	8005530 <__errno>
 80009bc:	4603      	mov	r3, r0
 80009be:	220c      	movs	r2, #12
 80009c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20005000 	.word	0x20005000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	2000017c 	.word	0x2000017c
 80009f0:	20000c80 	.word	0x20000c80

080009f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <SystemInit+0x14>)
 80009fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80009fe:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a0c:	f7ff fff2 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480b      	ldr	r0, [pc, #44]	@ (8000a40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a12:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a14:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a09      	ldr	r2, [pc, #36]	@ (8000a4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a28:	4c09      	ldr	r4, [pc, #36]	@ (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a36:	f004 fd81 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fb87 	bl	800014c <main>
  bx lr
 8000a3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a48:	08005eec 	.word	0x08005eec
  ldr r2, =_sbss
 8000a4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a50:	20000c7c 	.word	0x20000c7c

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <HAL_Init+0x28>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a07      	ldr	r2, [pc, #28]	@ (8000a80 <HAL_Init+0x28>)
 8000a62:	f043 0310 	orr.w	r3, r3, #16
 8000a66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 ff9d 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a6e:	200f      	movs	r0, #15
 8000a70:	f000 f808 	bl	8000a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a74:	f7ff fdb2 	bl	80005dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40022000 	.word	0x40022000

08000a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_InitTick+0x54>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0x58>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 ffb9 	bl	8001a1a <HAL_SYSTICK_Config>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00e      	b.n	8000ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d80a      	bhi.n	8000ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	f000 ff7d 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4a06      	ldr	r2, [pc, #24]	@ (8000ae0 <HAL_InitTick+0x5c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a03      	ldr	r2, [pc, #12]	@ (8000b04 <HAL_IncTick+0x20>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000180 	.word	0x20000180

08000b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	@ (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000180 	.word	0x20000180

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff fff0 	bl	8000b08 <HAL_GetTick>
 8000b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d005      	beq.n	8000b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_Delay+0x44>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4413      	add	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b42:	bf00      	nop
 8000b44:	f7ff ffe0 	bl	8000b08 <HAL_GetTick>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	1ad3      	subs	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8f7      	bhi.n	8000b44 <HAL_Delay+0x28>
  {
  }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000008 	.word	0x20000008

08000b64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e0ed      	b.n	8000d52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d102      	bne.n	8000b88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff fd5c 	bl	8000640 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0201 	orr.w	r2, r2, #1
 8000b96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b98:	f7ff ffb6 	bl	8000b08 <HAL_GetTick>
 8000b9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b9e:	e012      	b.n	8000bc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba0:	f7ff ffb2 	bl	8000b08 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b0a      	cmp	r3, #10
 8000bac:	d90b      	bls.n	8000bc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2205      	movs	r2, #5
 8000bbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e0c5      	b.n	8000d52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0e5      	beq.n	8000ba0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0202 	bic.w	r2, r2, #2
 8000be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000be4:	f7ff ff90 	bl	8000b08 <HAL_GetTick>
 8000be8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bea:	e012      	b.n	8000c12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bec:	f7ff ff8c 	bl	8000b08 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b0a      	cmp	r3, #10
 8000bf8:	d90b      	bls.n	8000c12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2205      	movs	r2, #5
 8000c0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e09f      	b.n	8000d52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1e5      	bne.n	8000bec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7e1b      	ldrb	r3, [r3, #24]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d108      	bne.n	8000c3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	e007      	b.n	8000c4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7e5b      	ldrb	r3, [r3, #25]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d108      	bne.n	8000c64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	e007      	b.n	8000c74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7e9b      	ldrb	r3, [r3, #26]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d108      	bne.n	8000c8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f042 0220 	orr.w	r2, r2, #32
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	e007      	b.n	8000c9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0220 	bic.w	r2, r2, #32
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7edb      	ldrb	r3, [r3, #27]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d108      	bne.n	8000cb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f022 0210 	bic.w	r2, r2, #16
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	e007      	b.n	8000cc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 0210 	orr.w	r2, r2, #16
 8000cc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7f1b      	ldrb	r3, [r3, #28]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d108      	bne.n	8000ce2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0208 	orr.w	r2, r2, #8
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e007      	b.n	8000cf2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0208 	bic.w	r2, r2, #8
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	7f5b      	ldrb	r3, [r3, #29]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d108      	bne.n	8000d0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f042 0204 	orr.w	r2, r2, #4
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	e007      	b.n	8000d1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0204 	bic.w	r2, r2, #4
 8000d1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	431a      	orrs	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	ea42 0103 	orr.w	r1, r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b087      	sub	sp, #28
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d70:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d72:	7cfb      	ldrb	r3, [r7, #19]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d003      	beq.n	8000d80 <HAL_CAN_ConfigFilter+0x26>
 8000d78:	7cfb      	ldrb	r3, [r7, #19]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	f040 80aa 	bne.w	8000ed4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d86:	f043 0201 	orr.w	r2, r3, #1
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f003 031f 	and.w	r3, r3, #31
 8000d98:	2201      	movs	r2, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d123      	bne.n	8000e02 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ddc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3248      	adds	r2, #72	@ 0x48
 8000de2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000df6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000df8:	6979      	ldr	r1, [r7, #20]
 8000dfa:	3348      	adds	r3, #72	@ 0x48
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	440b      	add	r3, r1
 8000e00:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d122      	bne.n	8000e50 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	431a      	orrs	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e2a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3248      	adds	r2, #72	@ 0x48
 8000e30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e44:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e46:	6979      	ldr	r1, [r7, #20]
 8000e48:	3348      	adds	r3, #72	@ 0x48
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	440b      	add	r3, r1
 8000e4e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d109      	bne.n	8000e6c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000e6a:	e007      	b.n	8000e7c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	431a      	orrs	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d109      	bne.n	8000e98 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000e96:	e007      	b.n	8000ea8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d107      	bne.n	8000ec0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ec6:	f023 0201 	bic.w	r2, r3, #1
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	e006      	b.n	8000ee2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
  }
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d12e      	bne.n	8000f5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f18:	f7ff fdf6 	bl	8000b08 <HAL_GetTick>
 8000f1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f1e:	e012      	b.n	8000f46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f20:	f7ff fdf2 	bl	8000b08 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d90b      	bls.n	8000f46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e012      	b.n	8000f6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1e5      	bne.n	8000f20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e006      	b.n	8000f6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f62:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
  }
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f92:	7ffb      	ldrb	r3, [r7, #31]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d003      	beq.n	8000fa0 <HAL_CAN_AddTxMessage+0x2c>
 8000f98:	7ffb      	ldrb	r3, [r7, #31]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	f040 80ad 	bne.w	80010fa <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10a      	bne.n	8000fc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d105      	bne.n	8000fc0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 8095 	beq.w	80010ea <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	0e1b      	lsrs	r3, r3, #24
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10d      	bne.n	8000ff8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	6809      	ldr	r1, [r1, #0]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3318      	adds	r3, #24
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	440b      	add	r3, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e00f      	b.n	8001018 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001002:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800100c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3318      	adds	r3, #24
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	440b      	add	r3, r1
 8001016:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3318      	adds	r3, #24
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	440b      	add	r3, r1
 8001028:	3304      	adds	r3, #4
 800102a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	7d1b      	ldrb	r3, [r3, #20]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d111      	bne.n	8001058 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3318      	adds	r3, #24
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	3304      	adds	r3, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	6811      	ldr	r1, [r2, #0]
 8001048:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3318      	adds	r3, #24
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	440b      	add	r3, r1
 8001054:	3304      	adds	r3, #4
 8001056:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3307      	adds	r3, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	061a      	lsls	r2, r3, #24
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3306      	adds	r3, #6
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	041b      	lsls	r3, r3, #16
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3305      	adds	r3, #5
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	4313      	orrs	r3, r2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	3204      	adds	r2, #4
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	4610      	mov	r0, r2
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	6811      	ldr	r1, [r2, #0]
 8001080:	ea43 0200 	orr.w	r2, r3, r0
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	440b      	add	r3, r1
 800108a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800108e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3303      	adds	r3, #3
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	061a      	lsls	r2, r3, #24
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3302      	adds	r3, #2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3301      	adds	r3, #1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	4313      	orrs	r3, r2
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	4610      	mov	r0, r2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	6811      	ldr	r1, [r2, #0]
 80010b6:	ea43 0200 	orr.w	r2, r3, r0
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	440b      	add	r3, r1
 80010c0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80010c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3318      	adds	r3, #24
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	6811      	ldr	r1, [r2, #0]
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3318      	adds	r3, #24
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	440b      	add	r3, r1
 80010e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e00e      	b.n	8001108 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e006      	b.n	8001108 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
  }
}
 8001108:	4618      	mov	r0, r3
 800110a:	3724      	adds	r7, #36	@ 0x24
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001112:	b480      	push	{r7}
 8001114:	b087      	sub	sp, #28
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001126:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d003      	beq.n	8001136 <HAL_CAN_GetRxMessage+0x24>
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b02      	cmp	r3, #2
 8001132:	f040 8103 	bne.w	800133c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10e      	bne.n	800115a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d116      	bne.n	8001178 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e0f7      	b.n	800134a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d107      	bne.n	8001178 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e0e8      	b.n	800134a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	331b      	adds	r3, #27
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	4413      	add	r3, r2
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0204 	and.w	r2, r3, #4
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10c      	bne.n	80011b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	331b      	adds	r3, #27
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	4413      	add	r3, r2
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0d5b      	lsrs	r3, r3, #21
 80011a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e00b      	b.n	80011c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	331b      	adds	r3, #27
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	4413      	add	r3, r2
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	331b      	adds	r3, #27
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	4413      	add	r3, r2
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0202 	and.w	r2, r3, #2
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	331b      	adds	r3, #27
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	3304      	adds	r3, #4
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2208      	movs	r2, #8
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	e00b      	b.n	8001216 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	331b      	adds	r3, #27
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	3304      	adds	r3, #4
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 020f 	and.w	r2, r3, #15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	331b      	adds	r3, #27
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4413      	add	r3, r2
 8001222:	3304      	adds	r3, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	331b      	adds	r3, #27
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	4413      	add	r3, r2
 800123a:	3304      	adds	r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	0c1b      	lsrs	r3, r3, #16
 8001240:	b29a      	uxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	4413      	add	r3, r2
 8001250:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4413      	add	r3, r2
 8001266:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	0a1a      	lsrs	r2, r3, #8
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	0c1a      	lsrs	r2, r3, #16
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3302      	adds	r3, #2
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	4413      	add	r3, r2
 800129a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0e1a      	lsrs	r2, r3, #24
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3303      	adds	r3, #3
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	3304      	adds	r3, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	4413      	add	r3, r2
 80012cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	0a1a      	lsrs	r2, r3, #8
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	3305      	adds	r3, #5
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	4413      	add	r3, r2
 80012e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	0c1a      	lsrs	r2, r3, #16
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	3306      	adds	r3, #6
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0e1a      	lsrs	r2, r3, #24
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	3307      	adds	r3, #7
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d108      	bne.n	8001328 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0220 	orr.w	r2, r2, #32
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	e007      	b.n	8001338 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691a      	ldr	r2, [r3, #16]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0220 	orr.w	r2, r2, #32
 8001336:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	e006      	b.n	800134a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001340:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
  }
}
 800134a:	4618      	mov	r0, r3
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001364:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d002      	beq.n	8001372 <HAL_CAN_ActivateNotification+0x1e>
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d109      	bne.n	8001386 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6959      	ldr	r1, [r3, #20]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	430a      	orrs	r2, r1
 8001380:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e006      	b.n	8001394 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
  }
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b08a      	sub	sp, #40	@ 0x28
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d07c      	beq.n	80014de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d023      	beq.n	8001436 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2201      	movs	r2, #1
 80013f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f983 	bl	800170c <HAL_CAN_TxMailbox0CompleteCallback>
 8001406:	e016      	b.n	8001436 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
 800141a:	e00c      	b.n	8001436 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d004      	beq.n	8001430 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
 800142e:	e002      	b.n	8001436 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f986 	bl	8001742 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d024      	beq.n	800148a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001448:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f962 	bl	800171e <HAL_CAN_TxMailbox1CompleteCallback>
 800145a:	e016      	b.n	800148a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001462:	2b00      	cmp	r3, #0
 8001464:	d004      	beq.n	8001470 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
 800146e:	e00c      	b.n	800148a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001476:	2b00      	cmp	r3, #0
 8001478:	d004      	beq.n	8001484 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
 8001482:	e002      	b.n	800148a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f965 	bl	8001754 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d024      	beq.n	80014de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800149c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f941 	bl	8001730 <HAL_CAN_TxMailbox2CompleteCallback>
 80014ae:	e016      	b.n	80014de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80014c2:	e00c      	b.n	80014de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d004      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d6:	e002      	b.n	80014de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f944 	bl	8001766 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00c      	beq.n	8001502 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2210      	movs	r2, #16
 8001500:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2208      	movs	r2, #8
 800151c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f92a 	bl	8001778 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f003 fa21 	bl	8004984 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00c      	beq.n	8001566 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2210      	movs	r2, #16
 8001564:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2208      	movs	r2, #8
 8001580:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 f90a 	bl	800179c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f8f2 	bl	800178a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2210      	movs	r2, #16
 80015c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8f3 	bl	80017ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00b      	beq.n	80015ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2208      	movs	r2, #8
 80015e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f8eb 	bl	80017c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d07b      	beq.n	80016ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0304 	and.w	r3, r3, #4
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d072      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001658:	2b00      	cmp	r3, #0
 800165a:	d043      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03e      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800166c:	2b60      	cmp	r3, #96	@ 0x60
 800166e:	d02b      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x32a>
 8001670:	2b60      	cmp	r3, #96	@ 0x60
 8001672:	d82e      	bhi.n	80016d2 <HAL_CAN_IRQHandler+0x334>
 8001674:	2b50      	cmp	r3, #80	@ 0x50
 8001676:	d022      	beq.n	80016be <HAL_CAN_IRQHandler+0x320>
 8001678:	2b50      	cmp	r3, #80	@ 0x50
 800167a:	d82a      	bhi.n	80016d2 <HAL_CAN_IRQHandler+0x334>
 800167c:	2b40      	cmp	r3, #64	@ 0x40
 800167e:	d019      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x316>
 8001680:	2b40      	cmp	r3, #64	@ 0x40
 8001682:	d826      	bhi.n	80016d2 <HAL_CAN_IRQHandler+0x334>
 8001684:	2b30      	cmp	r3, #48	@ 0x30
 8001686:	d010      	beq.n	80016aa <HAL_CAN_IRQHandler+0x30c>
 8001688:	2b30      	cmp	r3, #48	@ 0x30
 800168a:	d822      	bhi.n	80016d2 <HAL_CAN_IRQHandler+0x334>
 800168c:	2b10      	cmp	r3, #16
 800168e:	d002      	beq.n	8001696 <HAL_CAN_IRQHandler+0x2f8>
 8001690:	2b20      	cmp	r3, #32
 8001692:	d005      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001694:	e01d      	b.n	80016d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800169e:	e019      	b.n	80016d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016a8:	e014      	b.n	80016d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016b2:	e00f      	b.n	80016d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016bc:	e00a      	b.n	80016d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016c6:	e005      	b.n	80016d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016d0:	e000      	b.n	80016d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80016d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80016e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2204      	movs	r2, #4
 80016ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f867 	bl	80017d2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	@ 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr

08001742 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0b      	blt.n	8001872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	4906      	ldr	r1, [pc, #24]	@ (800187c <__NVIC_EnableIRQ+0x34>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100

08001880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	6039      	str	r1, [r7, #0]
 800188a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	db0a      	blt.n	80018aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	b2da      	uxtb	r2, r3
 8001898:	490c      	ldr	r1, [pc, #48]	@ (80018cc <__NVIC_SetPriority+0x4c>)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	0112      	lsls	r2, r2, #4
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	440b      	add	r3, r1
 80018a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a8:	e00a      	b.n	80018c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4908      	ldr	r1, [pc, #32]	@ (80018d0 <__NVIC_SetPriority+0x50>)
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3b04      	subs	r3, #4
 80018b8:	0112      	lsls	r2, r2, #4
 80018ba:	b2d2      	uxtb	r2, r2
 80018bc:	440b      	add	r3, r1
 80018be:	761a      	strb	r2, [r3, #24]
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b089      	sub	sp, #36	@ 0x24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f1c3 0307 	rsb	r3, r3, #7
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	bf28      	it	cs
 80018f2:	2304      	movcs	r3, #4
 80018f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3304      	adds	r3, #4
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d902      	bls.n	8001904 <NVIC_EncodePriority+0x30>
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3b03      	subs	r3, #3
 8001902:	e000      	b.n	8001906 <NVIC_EncodePriority+0x32>
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001908:	f04f 32ff 	mov.w	r2, #4294967295
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	401a      	ands	r2, r3
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43d9      	mvns	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	4313      	orrs	r3, r2
         );
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	@ 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800193c:	f3bf 8f4f 	dsb	sy
}
 8001940:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <__NVIC_SystemReset+0x24>)
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800194a:	4904      	ldr	r1, [pc, #16]	@ (800195c <__NVIC_SystemReset+0x24>)
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_SystemReset+0x28>)
 800194e:	4313      	orrs	r3, r2
 8001950:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001952:	f3bf 8f4f 	dsb	sy
}
 8001956:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <__NVIC_SystemReset+0x20>
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	05fa0004 	.word	0x05fa0004

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff7a 	bl	8001880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff17 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff2c 	bl	800182c <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff7a 	bl	80018d4 <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff49 	bl	8001880 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff1f 	bl	8001848 <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001a16:	f7ff ff8f 	bl	8001938 <__NVIC_SystemReset>

08001a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff9e 	bl	8001964 <SysTick_Config>
 8001a28:	4603      	mov	r3, r0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d008      	beq.n	8001a5c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e020      	b.n	8001a9e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 020e 	bic.w	r2, r2, #14
 8001a6a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d005      	beq.n	8001acc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e051      	b.n	8001b70 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 020e 	bic.w	r2, r2, #14
 8001ada:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a22      	ldr	r2, [pc, #136]	@ (8001b7c <HAL_DMA_Abort_IT+0xd4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d029      	beq.n	8001b4a <HAL_DMA_Abort_IT+0xa2>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a21      	ldr	r2, [pc, #132]	@ (8001b80 <HAL_DMA_Abort_IT+0xd8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d022      	beq.n	8001b46 <HAL_DMA_Abort_IT+0x9e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a1f      	ldr	r2, [pc, #124]	@ (8001b84 <HAL_DMA_Abort_IT+0xdc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d01a      	beq.n	8001b40 <HAL_DMA_Abort_IT+0x98>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001b88 <HAL_DMA_Abort_IT+0xe0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d012      	beq.n	8001b3a <HAL_DMA_Abort_IT+0x92>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	@ (8001b8c <HAL_DMA_Abort_IT+0xe4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00a      	beq.n	8001b34 <HAL_DMA_Abort_IT+0x8c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <HAL_DMA_Abort_IT+0xe8>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d102      	bne.n	8001b2e <HAL_DMA_Abort_IT+0x86>
 8001b28:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b2c:	e00e      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b2e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b32:	e00b      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b38:	e008      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b3e:	e005      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b44:	e002      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b46:	2310      	movs	r3, #16
 8001b48:	e000      	b.n	8001b4c <HAL_DMA_Abort_IT+0xa4>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	4a11      	ldr	r2, [pc, #68]	@ (8001b94 <HAL_DMA_Abort_IT+0xec>)
 8001b4e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
    } 
  }
  return status;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40020008 	.word	0x40020008
 8001b80:	4002001c 	.word	0x4002001c
 8001b84:	40020030 	.word	0x40020030
 8001b88:	40020044 	.word	0x40020044
 8001b8c:	40020058 	.word	0x40020058
 8001b90:	4002006c 	.word	0x4002006c
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <HAL_FLASH_Program+0xd8>)
 8001bb4:	7e1b      	ldrb	r3, [r3, #24]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_FLASH_Program+0x26>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e054      	b.n	8001c68 <HAL_FLASH_Program+0xd0>
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001c70 <HAL_FLASH_Program+0xd8>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bc4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001bc8:	f000 f8a8 	bl	8001d1c <FLASH_WaitForLastOperation>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d144      	bne.n	8001c60 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	757b      	strb	r3, [r7, #21]
 8001be0:	e007      	b.n	8001bf2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d102      	bne.n	8001bee <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001be8:	2302      	movs	r3, #2
 8001bea:	757b      	strb	r3, [r7, #21]
 8001bec:	e001      	b.n	8001bf2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75bb      	strb	r3, [r7, #22]
 8001bf6:	e02d      	b.n	8001c54 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001bf8:	7dbb      	ldrb	r3, [r7, #22]
 8001bfa:	005a      	lsls	r2, r3, #1
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	eb02 0c03 	add.w	ip, r2, r3
 8001c02:	7dbb      	ldrb	r3, [r7, #22]
 8001c04:	0119      	lsls	r1, r3, #4
 8001c06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c0a:	f1c1 0620 	rsb	r6, r1, #32
 8001c0e:	f1a1 0020 	sub.w	r0, r1, #32
 8001c12:	fa22 f401 	lsr.w	r4, r2, r1
 8001c16:	fa03 f606 	lsl.w	r6, r3, r6
 8001c1a:	4334      	orrs	r4, r6
 8001c1c:	fa23 f000 	lsr.w	r0, r3, r0
 8001c20:	4304      	orrs	r4, r0
 8001c22:	fa23 f501 	lsr.w	r5, r3, r1
 8001c26:	b2a3      	uxth	r3, r4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4660      	mov	r0, ip
 8001c2c:	f000 f85a 	bl	8001ce4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c30:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c34:	f000 f872 	bl	8001d1c <FLASH_WaitForLastOperation>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_FLASH_Program+0xdc>)
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	4a0c      	ldr	r2, [pc, #48]	@ (8001c74 <HAL_FLASH_Program+0xdc>)
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d107      	bne.n	8001c5e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001c4e:	7dbb      	ldrb	r3, [r7, #22]
 8001c50:	3301      	adds	r3, #1
 8001c52:	75bb      	strb	r3, [r7, #22]
 8001c54:	7dba      	ldrb	r2, [r7, #22]
 8001c56:	7d7b      	ldrb	r3, [r7, #21]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d3cd      	bcc.n	8001bf8 <HAL_FLASH_Program+0x60>
 8001c5c:	e000      	b.n	8001c60 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001c5e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_FLASH_Program+0xd8>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	761a      	strb	r2, [r3, #24]

  return status;
 8001c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c70:	20000188 	.word	0x20000188
 8001c74:	40022000 	.word	0x40022000

08001c78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_FLASH_Unlock+0x40>)
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00d      	beq.n	8001caa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_FLASH_Unlock+0x40>)
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_FLASH_Unlock+0x44>)
 8001c92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <HAL_FLASH_Unlock+0x40>)
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_FLASH_Unlock+0x48>)
 8001c98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <HAL_FLASH_Unlock+0x40>)
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001caa:	79fb      	ldrb	r3, [r7, #7]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	45670123 	.word	0x45670123
 8001cc0:	cdef89ab 	.word	0xcdef89ab

08001cc4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <HAL_FLASH_Lock+0x1c>)
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <HAL_FLASH_Lock+0x1c>)
 8001cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <FLASH_Program_HalfWord+0x30>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001cf6:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <FLASH_Program_HalfWord+0x34>)
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	4a07      	ldr	r2, [pc, #28]	@ (8001d18 <FLASH_Program_HalfWord+0x34>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	801a      	strh	r2, [r3, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000188 	.word	0x20000188
 8001d18:	40022000 	.word	0x40022000

08001d1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7fe fef0 	bl	8000b08 <HAL_GetTick>
 8001d28:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001d2a:	e010      	b.n	8001d4e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d32:	d00c      	beq.n	8001d4e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <FLASH_WaitForLastOperation+0x2e>
 8001d3a:	f7fe fee5 	bl	8000b08 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d201      	bcs.n	8001d4e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e025      	b.n	8001d9a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <FLASH_WaitForLastOperation+0x88>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e8      	bne.n	8001d2c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001d5a:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <FLASH_WaitForLastOperation+0x88>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <FLASH_WaitForLastOperation+0x88>)
 8001d68:	2220      	movs	r2, #32
 8001d6a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <FLASH_WaitForLastOperation+0x88>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10b      	bne.n	8001d90 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001d78:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <FLASH_WaitForLastOperation+0x88>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d105      	bne.n	8001d90 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001d84:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <FLASH_WaitForLastOperation+0x88>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001d90:	f000 f80a 	bl	8001da8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40022000 	.word	0x40022000

08001da8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001db2:	4b23      	ldr	r3, [pc, #140]	@ (8001e40 <FLASH_SetErrorCode+0x98>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <FLASH_SetErrorCode+0x9c>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f043 0302 	orr.w	r3, r3, #2
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e44 <FLASH_SetErrorCode+0x9c>)
 8001dc8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f043 0310 	orr.w	r3, r3, #16
 8001dd0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <FLASH_SetErrorCode+0x98>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d009      	beq.n	8001df2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001dde:	4b19      	ldr	r3, [pc, #100]	@ (8001e44 <FLASH_SetErrorCode+0x9c>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <FLASH_SetErrorCode+0x9c>)
 8001de8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <FLASH_SetErrorCode+0x98>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <FLASH_SetErrorCode+0x9c>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	4a0f      	ldr	r2, [pc, #60]	@ (8001e44 <FLASH_SetErrorCode+0x9c>)
 8001e08:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <FLASH_SetErrorCode+0x98>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <FLASH_SetErrorCode+0x98>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f240 1201 	movw	r2, #257	@ 0x101
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d106      	bne.n	8001e2e <FLASH_SetErrorCode+0x86>
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <FLASH_SetErrorCode+0x98>)
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <FLASH_SetErrorCode+0x98>)
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	61d3      	str	r3, [r2, #28]
}  
 8001e2c:	e002      	b.n	8001e34 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001e2e:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <FLASH_SetErrorCode+0x98>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	60d3      	str	r3, [r2, #12]
}  
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40022000 	.word	0x40022000
 8001e44:	20000188 	.word	0x20000188

08001e48 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f18 <HAL_FLASHEx_Erase+0xd0>)
 8001e5c:	7e1b      	ldrb	r3, [r3, #24]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_FLASHEx_Erase+0x1e>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e053      	b.n	8001f0e <HAL_FLASHEx_Erase+0xc6>
 8001e66:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <HAL_FLASHEx_Erase+0xd0>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d116      	bne.n	8001ea2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001e74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e78:	f7ff ff50 	bl	8001d1c <FLASH_WaitForLastOperation>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d141      	bne.n	8001f06 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 f84c 	bl	8001f20 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e8c:	f7ff ff46 	bl	8001d1c <FLASH_WaitForLastOperation>
 8001e90:	4603      	mov	r3, r0
 8001e92:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001e94:	4b21      	ldr	r3, [pc, #132]	@ (8001f1c <HAL_FLASHEx_Erase+0xd4>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4a20      	ldr	r2, [pc, #128]	@ (8001f1c <HAL_FLASHEx_Erase+0xd4>)
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	6113      	str	r3, [r2, #16]
 8001ea0:	e031      	b.n	8001f06 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001ea2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ea6:	f7ff ff39 	bl	8001d1c <FLASH_WaitForLastOperation>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d12a      	bne.n	8001f06 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	e019      	b.n	8001ef4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001ec0:	68b8      	ldr	r0, [r7, #8]
 8001ec2:	f000 f849 	bl	8001f58 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ec6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001eca:	f7ff ff27 	bl	8001d1c <FLASH_WaitForLastOperation>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001ed2:	4b12      	ldr	r3, [pc, #72]	@ (8001f1c <HAL_FLASHEx_Erase+0xd4>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <HAL_FLASHEx_Erase+0xd4>)
 8001ed8:	f023 0302 	bic.w	r3, r3, #2
 8001edc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	601a      	str	r2, [r3, #0]
            break;
 8001eea:	e00c      	b.n	8001f06 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ef2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	029a      	lsls	r2, r3, #10
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	4413      	add	r3, r2
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3dc      	bcc.n	8001ec0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f06:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <HAL_FLASHEx_Erase+0xd0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	761a      	strb	r2, [r3, #24]

  return status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000188 	.word	0x20000188
 8001f1c:	40022000 	.word	0x40022000

08001f20 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f28:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <FLASH_MassErase+0x30>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <FLASH_MassErase+0x34>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	4a08      	ldr	r2, [pc, #32]	@ (8001f54 <FLASH_MassErase+0x34>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <FLASH_MassErase+0x34>)
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	4a05      	ldr	r2, [pc, #20]	@ (8001f54 <FLASH_MassErase+0x34>)
 8001f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f44:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr
 8001f50:	20000188 	.word	0x20000188
 8001f54:	40022000 	.word	0x40022000

08001f58 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <FLASH_PageErase+0x38>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <FLASH_PageErase+0x3c>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f94 <FLASH_PageErase+0x3c>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001f72:	4a08      	ldr	r2, [pc, #32]	@ (8001f94 <FLASH_PageErase+0x3c>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <FLASH_PageErase+0x3c>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	4a05      	ldr	r2, [pc, #20]	@ (8001f94 <FLASH_PageErase+0x3c>)
 8001f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f82:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20000188 	.word	0x20000188
 8001f94:	40022000 	.word	0x40022000

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b08b      	sub	sp, #44	@ 0x2c
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	e169      	b.n	8002280 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fac:	2201      	movs	r2, #1
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8158 	bne.w	800227a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a9a      	ldr	r2, [pc, #616]	@ (8002238 <HAL_GPIO_Init+0x2a0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d05e      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8001fd4:	4a98      	ldr	r2, [pc, #608]	@ (8002238 <HAL_GPIO_Init+0x2a0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d875      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8001fda:	4a98      	ldr	r2, [pc, #608]	@ (800223c <HAL_GPIO_Init+0x2a4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d058      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8001fe0:	4a96      	ldr	r2, [pc, #600]	@ (800223c <HAL_GPIO_Init+0x2a4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d86f      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8001fe6:	4a96      	ldr	r2, [pc, #600]	@ (8002240 <HAL_GPIO_Init+0x2a8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d052      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8001fec:	4a94      	ldr	r2, [pc, #592]	@ (8002240 <HAL_GPIO_Init+0x2a8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d869      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8001ff2:	4a94      	ldr	r2, [pc, #592]	@ (8002244 <HAL_GPIO_Init+0x2ac>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d04c      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8001ff8:	4a92      	ldr	r2, [pc, #584]	@ (8002244 <HAL_GPIO_Init+0x2ac>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d863      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8001ffe:	4a92      	ldr	r2, [pc, #584]	@ (8002248 <HAL_GPIO_Init+0x2b0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d046      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8002004:	4a90      	ldr	r2, [pc, #576]	@ (8002248 <HAL_GPIO_Init+0x2b0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d85d      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 800200a:	2b12      	cmp	r3, #18
 800200c:	d82a      	bhi.n	8002064 <HAL_GPIO_Init+0xcc>
 800200e:	2b12      	cmp	r3, #18
 8002010:	d859      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8002012:	a201      	add	r2, pc, #4	@ (adr r2, 8002018 <HAL_GPIO_Init+0x80>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	08002093 	.word	0x08002093
 800201c:	0800206d 	.word	0x0800206d
 8002020:	0800207f 	.word	0x0800207f
 8002024:	080020c1 	.word	0x080020c1
 8002028:	080020c7 	.word	0x080020c7
 800202c:	080020c7 	.word	0x080020c7
 8002030:	080020c7 	.word	0x080020c7
 8002034:	080020c7 	.word	0x080020c7
 8002038:	080020c7 	.word	0x080020c7
 800203c:	080020c7 	.word	0x080020c7
 8002040:	080020c7 	.word	0x080020c7
 8002044:	080020c7 	.word	0x080020c7
 8002048:	080020c7 	.word	0x080020c7
 800204c:	080020c7 	.word	0x080020c7
 8002050:	080020c7 	.word	0x080020c7
 8002054:	080020c7 	.word	0x080020c7
 8002058:	080020c7 	.word	0x080020c7
 800205c:	08002075 	.word	0x08002075
 8002060:	08002089 	.word	0x08002089
 8002064:	4a79      	ldr	r2, [pc, #484]	@ (800224c <HAL_GPIO_Init+0x2b4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800206a:	e02c      	b.n	80020c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	623b      	str	r3, [r7, #32]
          break;
 8002072:	e029      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	3304      	adds	r3, #4
 800207a:	623b      	str	r3, [r7, #32]
          break;
 800207c:	e024      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	3308      	adds	r3, #8
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e01f      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	330c      	adds	r3, #12
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e01a      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800209a:	2304      	movs	r3, #4
 800209c:	623b      	str	r3, [r7, #32]
          break;
 800209e:	e013      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a8:	2308      	movs	r3, #8
 80020aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	611a      	str	r2, [r3, #16]
          break;
 80020b2:	e009      	b.n	80020c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b4:	2308      	movs	r3, #8
 80020b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	615a      	str	r2, [r3, #20]
          break;
 80020be:	e003      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
          break;
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          break;
 80020c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2bff      	cmp	r3, #255	@ 0xff
 80020cc:	d801      	bhi.n	80020d2 <HAL_GPIO_Init+0x13a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	e001      	b.n	80020d6 <HAL_GPIO_Init+0x13e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3304      	adds	r3, #4
 80020d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2bff      	cmp	r3, #255	@ 0xff
 80020dc:	d802      	bhi.n	80020e4 <HAL_GPIO_Init+0x14c>
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	e002      	b.n	80020ea <HAL_GPIO_Init+0x152>
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	3b08      	subs	r3, #8
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	210f      	movs	r1, #15
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	401a      	ands	r2, r3
 80020fc:	6a39      	ldr	r1, [r7, #32]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	431a      	orrs	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80b1 	beq.w	800227a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002118:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <HAL_GPIO_Init+0x2b8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a4c      	ldr	r2, [pc, #304]	@ (8002250 <HAL_GPIO_Init+0x2b8>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b4a      	ldr	r3, [pc, #296]	@ (8002250 <HAL_GPIO_Init+0x2b8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002130:	4a48      	ldr	r2, [pc, #288]	@ (8002254 <HAL_GPIO_Init+0x2bc>)
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	3302      	adds	r3, #2
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	220f      	movs	r2, #15
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a40      	ldr	r2, [pc, #256]	@ (8002258 <HAL_GPIO_Init+0x2c0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_GPIO_Init+0x1ec>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3f      	ldr	r2, [pc, #252]	@ (800225c <HAL_GPIO_Init+0x2c4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00d      	beq.n	8002180 <HAL_GPIO_Init+0x1e8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3e      	ldr	r2, [pc, #248]	@ (8002260 <HAL_GPIO_Init+0x2c8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d007      	beq.n	800217c <HAL_GPIO_Init+0x1e4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3d      	ldr	r2, [pc, #244]	@ (8002264 <HAL_GPIO_Init+0x2cc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_GPIO_Init+0x1e0>
 8002174:	2303      	movs	r3, #3
 8002176:	e006      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002178:	2304      	movs	r3, #4
 800217a:	e004      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 800217c:	2302      	movs	r3, #2
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002184:	2300      	movs	r3, #0
 8002186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002188:	f002 0203 	and.w	r2, r2, #3
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	4093      	lsls	r3, r2
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002196:	492f      	ldr	r1, [pc, #188]	@ (8002254 <HAL_GPIO_Init+0x2bc>)
 8002198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	492c      	ldr	r1, [pc, #176]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021be:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	4928      	ldr	r1, [pc, #160]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021d8:	4b23      	ldr	r3, [pc, #140]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	4922      	ldr	r1, [pc, #136]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60cb      	str	r3, [r1, #12]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	491e      	ldr	r1, [pc, #120]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d006      	beq.n	800220e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4918      	ldr	r1, [pc, #96]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800220e:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	43db      	mvns	r3, r3
 8002216:	4914      	ldr	r1, [pc, #80]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 8002218:	4013      	ands	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d021      	beq.n	800226c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	490e      	ldr	r1, [pc, #56]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e021      	b.n	800227a <HAL_GPIO_Init+0x2e2>
 8002236:	bf00      	nop
 8002238:	10320000 	.word	0x10320000
 800223c:	10310000 	.word	0x10310000
 8002240:	10220000 	.word	0x10220000
 8002244:	10210000 	.word	0x10210000
 8002248:	10120000 	.word	0x10120000
 800224c:	10110000 	.word	0x10110000
 8002250:	40021000 	.word	0x40021000
 8002254:	40010000 	.word	0x40010000
 8002258:	40010800 	.word	0x40010800
 800225c:	40010c00 	.word	0x40010c00
 8002260:	40011000 	.word	0x40011000
 8002264:	40011400 	.word	0x40011400
 8002268:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_GPIO_Init+0x304>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	43db      	mvns	r3, r3
 8002274:	4909      	ldr	r1, [pc, #36]	@ (800229c <HAL_GPIO_Init+0x304>)
 8002276:	4013      	ands	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	3301      	adds	r3, #1
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	f47f ae8e 	bne.w	8001fac <HAL_GPIO_Init+0x14>
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	372c      	adds	r7, #44	@ 0x2c
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022bc:	e003      	b.n	80022c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	611a      	str	r2, [r3, #16]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	43d9      	mvns	r1, r3
 80022ee:	887b      	ldrh	r3, [r7, #2]
 80022f0:	400b      	ands	r3, r1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
	...

08002304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e272      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8087 	beq.w	8002432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002324:	4b92      	ldr	r3, [pc, #584]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 030c 	and.w	r3, r3, #12
 800232c:	2b04      	cmp	r3, #4
 800232e:	d00c      	beq.n	800234a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002330:	4b8f      	ldr	r3, [pc, #572]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d112      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
 800233c:	4b8c      	ldr	r3, [pc, #560]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002348:	d10b      	bne.n	8002362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234a:	4b89      	ldr	r3, [pc, #548]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d06c      	beq.n	8002430 <HAL_RCC_OscConfig+0x12c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d168      	bne.n	8002430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e24c      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800236a:	d106      	bne.n	800237a <HAL_RCC_OscConfig+0x76>
 800236c:	4b80      	ldr	r3, [pc, #512]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a7f      	ldr	r2, [pc, #508]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e02e      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x98>
 8002382:	4b7b      	ldr	r3, [pc, #492]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a7a      	ldr	r2, [pc, #488]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b78      	ldr	r3, [pc, #480]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a77      	ldr	r2, [pc, #476]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	e01d      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCC_OscConfig+0xbc>
 80023a6:	4b72      	ldr	r3, [pc, #456]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a71      	ldr	r2, [pc, #452]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e00b      	b.n	80023d8 <HAL_RCC_OscConfig+0xd4>
 80023c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	4b68      	ldr	r3, [pc, #416]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a67      	ldr	r2, [pc, #412]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fb92 	bl	8000b08 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fb8e 	bl	8000b08 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	@ 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e200      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0xe4>
 8002406:	e014      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fb7e 	bl	8000b08 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe fb7a 	bl	8000b08 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	@ 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1ec      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x10c>
 800242e:	e000      	b.n	8002432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d063      	beq.n	8002506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800243e:	4b4c      	ldr	r3, [pc, #304]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00b      	beq.n	8002462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244a:	4b49      	ldr	r3, [pc, #292]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b08      	cmp	r3, #8
 8002454:	d11c      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
 8002456:	4b46      	ldr	r3, [pc, #280]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d116      	bne.n	8002490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002462:	4b43      	ldr	r3, [pc, #268]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d005      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1c0      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b3d      	ldr	r3, [pc, #244]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4939      	ldr	r1, [pc, #228]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	e03a      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d020      	beq.n	80024da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002498:	4b36      	ldr	r3, [pc, #216]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 800249a:	2201      	movs	r2, #1
 800249c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fb33 	bl	8000b08 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a6:	f7fe fb2f 	bl	8000b08 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1a1      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4927      	ldr	r1, [pc, #156]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b26      	ldr	r3, [pc, #152]	@ (8002574 <HAL_RCC_OscConfig+0x270>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fb12 	bl	8000b08 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e8:	f7fe fb0e 	bl	8000b08 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e180      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d03a      	beq.n	8002588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d019      	beq.n	800254e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251a:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <HAL_RCC_OscConfig+0x274>)
 800251c:	2201      	movs	r2, #1
 800251e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002520:	f7fe faf2 	bl	8000b08 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002528:	f7fe faee 	bl	8000b08 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e160      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <HAL_RCC_OscConfig+0x26c>)
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002546:	2001      	movs	r0, #1
 8002548:	f000 face 	bl	8002ae8 <RCC_Delay>
 800254c:	e01c      	b.n	8002588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800254e:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <HAL_RCC_OscConfig+0x274>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7fe fad8 	bl	8000b08 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255a:	e00f      	b.n	800257c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255c:	f7fe fad4 	bl	8000b08 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d908      	bls.n	800257c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e146      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	42420000 	.word	0x42420000
 8002578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	4b92      	ldr	r3, [pc, #584]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e9      	bne.n	800255c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80a6 	beq.w	80026e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259a:	4b8b      	ldr	r3, [pc, #556]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10d      	bne.n	80025c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4b88      	ldr	r3, [pc, #544]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4a87      	ldr	r2, [pc, #540]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025b0:	61d3      	str	r3, [r2, #28]
 80025b2:	4b85      	ldr	r3, [pc, #532]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b82      	ldr	r3, [pc, #520]	@ (80027cc <HAL_RCC_OscConfig+0x4c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d118      	bne.n	8002600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b7f      	ldr	r3, [pc, #508]	@ (80027cc <HAL_RCC_OscConfig+0x4c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a7e      	ldr	r2, [pc, #504]	@ (80027cc <HAL_RCC_OscConfig+0x4c8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe fa95 	bl	8000b08 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e2:	f7fe fa91 	bl	8000b08 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b64      	cmp	r3, #100	@ 0x64
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e103      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	4b75      	ldr	r3, [pc, #468]	@ (80027cc <HAL_RCC_OscConfig+0x4c8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x312>
 8002608:	4b6f      	ldr	r3, [pc, #444]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a6e      	ldr	r2, [pc, #440]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e02d      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x334>
 800261e:	4b6a      	ldr	r3, [pc, #424]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a69      	ldr	r2, [pc, #420]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	6213      	str	r3, [r2, #32]
 800262a:	4b67      	ldr	r3, [pc, #412]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a66      	ldr	r2, [pc, #408]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	e01c      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b05      	cmp	r3, #5
 800263e:	d10c      	bne.n	800265a <HAL_RCC_OscConfig+0x356>
 8002640:	4b61      	ldr	r3, [pc, #388]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4a60      	ldr	r2, [pc, #384]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	6213      	str	r3, [r2, #32]
 800264c:	4b5e      	ldr	r3, [pc, #376]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a5d      	ldr	r2, [pc, #372]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	e00b      	b.n	8002672 <HAL_RCC_OscConfig+0x36e>
 800265a:	4b5b      	ldr	r3, [pc, #364]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a5a      	ldr	r2, [pc, #360]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	4b58      	ldr	r3, [pc, #352]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a57      	ldr	r2, [pc, #348]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d015      	beq.n	80026a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267a:	f7fe fa45 	bl	8000b08 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002680:	e00a      	b.n	8002698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fa41 	bl	8000b08 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0b1      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002698:	4b4b      	ldr	r3, [pc, #300]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ee      	beq.n	8002682 <HAL_RCC_OscConfig+0x37e>
 80026a4:	e014      	b.n	80026d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fa2f 	bl	8000b08 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe fa2b 	bl	8000b08 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e09b      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c4:	4b40      	ldr	r3, [pc, #256]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ee      	bne.n	80026ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d6:	4b3c      	ldr	r3, [pc, #240]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a3b      	ldr	r2, [pc, #236]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 8087 	beq.w	80027fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ec:	4b36      	ldr	r3, [pc, #216]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d061      	beq.n	80027bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d146      	bne.n	800278e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b33      	ldr	r3, [pc, #204]	@ (80027d0 <HAL_RCC_OscConfig+0x4cc>)
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe f9ff 	bl	8000b08 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe f9fb 	bl	8000b08 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e06d      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002720:	4b29      	ldr	r3, [pc, #164]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f0      	bne.n	800270e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002734:	d108      	bne.n	8002748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002736:	4b24      	ldr	r3, [pc, #144]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4921      	ldr	r1, [pc, #132]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002748:	4b1f      	ldr	r3, [pc, #124]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a19      	ldr	r1, [r3, #32]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	430b      	orrs	r3, r1
 800275a:	491b      	ldr	r1, [pc, #108]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002760:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_RCC_OscConfig+0x4cc>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe f9cf 	bl	8000b08 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe f9cb 	bl	8000b08 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e03d      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002780:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x46a>
 800278c:	e035      	b.n	80027fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <HAL_RCC_OscConfig+0x4cc>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe f9b8 	bl	8000b08 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe f9b4 	bl	8000b08 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e026      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ae:	4b06      	ldr	r3, [pc, #24]	@ (80027c8 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x498>
 80027ba:	e01e      	b.n	80027fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e019      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40007000 	.word	0x40007000
 80027d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_RCC_OscConfig+0x500>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0d0      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b6a      	ldr	r3, [pc, #424]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d910      	bls.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b67      	ldr	r3, [pc, #412]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4965      	ldr	r1, [pc, #404]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b63      	ldr	r3, [pc, #396]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b8      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002864:	4b59      	ldr	r3, [pc, #356]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a58      	ldr	r2, [pc, #352]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800286e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800287c:	4b53      	ldr	r3, [pc, #332]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a52      	ldr	r2, [pc, #328]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b50      	ldr	r3, [pc, #320]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	494d      	ldr	r1, [pc, #308]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d040      	beq.n	8002928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b47      	ldr	r3, [pc, #284]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d115      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e07f      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b41      	ldr	r3, [pc, #260]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e073      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d6:	4b3d      	ldr	r3, [pc, #244]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06b      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e6:	4b39      	ldr	r3, [pc, #228]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4936      	ldr	r1, [pc, #216]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f8:	f7fe f906 	bl	8000b08 <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002900:	f7fe f902 	bl	8000b08 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e053      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	4b2d      	ldr	r3, [pc, #180]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 020c 	and.w	r2, r3, #12
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d1eb      	bne.n	8002900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002928:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d210      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4922      	ldr	r1, [pc, #136]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e032      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002964:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4916      	ldr	r1, [pc, #88]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002982:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	490e      	ldr	r1, [pc, #56]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002996:	f000 f821 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800299a:	4602      	mov	r2, r0
 800299c:	4b0b      	ldr	r3, [pc, #44]	@ (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	490a      	ldr	r1, [pc, #40]	@ (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	5ccb      	ldrb	r3, [r1, r3]
 80029aa:	fa22 f303 	lsr.w	r3, r2, r3
 80029ae:	4a09      	ldr	r2, [pc, #36]	@ (80029d4 <HAL_RCC_ClockConfig+0x1cc>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029b2:	4b09      	ldr	r3, [pc, #36]	@ (80029d8 <HAL_RCC_ClockConfig+0x1d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f864 	bl	8000a84 <HAL_InitTick>

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08005e84 	.word	0x08005e84
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000004 	.word	0x20000004

080029dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x94>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d002      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x30>
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d003      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x36>
 8002a0a:	e027      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a0c:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a0e:	613b      	str	r3, [r7, #16]
      break;
 8002a10:	e027      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	0c9b      	lsrs	r3, r3, #18
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	4a17      	ldr	r2, [pc, #92]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a1c:	5cd3      	ldrb	r3, [r2, r3]
 8002a1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d010      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a2a:	4b11      	ldr	r3, [pc, #68]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	0c5b      	lsrs	r3, r3, #17
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	4a11      	ldr	r2, [pc, #68]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a3e:	fb03 f202 	mul.w	r2, r3, r2
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e004      	b.n	8002a56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	613b      	str	r3, [r7, #16]
      break;
 8002a5a:	e002      	b.n	8002a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a5e:	613b      	str	r3, [r7, #16]
      break;
 8002a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a62:	693b      	ldr	r3, [r7, #16]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	08005e9c 	.word	0x08005e9c
 8002a7c:	08005eac 	.word	0x08005eac
 8002a80:	003d0900 	.word	0x003d0900

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b02      	ldr	r3, [pc, #8]	@ (8002a94 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	20000000 	.word	0x20000000

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a9c:	f7ff fff2 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	0a1b      	lsrs	r3, r3, #8
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4903      	ldr	r1, [pc, #12]	@ (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aae:	5ccb      	ldrb	r3, [r1, r3]
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	08005e94 	.word	0x08005e94

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	f7ff ffde 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	0adb      	lsrs	r3, r3, #11
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4903      	ldr	r1, [pc, #12]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad6:	5ccb      	ldrb	r3, [r1, r3]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	08005e94 	.word	0x08005e94

08002ae8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002af0:	4b0a      	ldr	r3, [pc, #40]	@ (8002b1c <RCC_Delay+0x34>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b20 <RCC_Delay+0x38>)
 8002af6:	fba2 2303 	umull	r2, r3, r2, r3
 8002afa:	0a5b      	lsrs	r3, r3, #9
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b04:	bf00      	nop
  }
  while (Delay --);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e5a      	subs	r2, r3, #1
 8002b0a:	60fa      	str	r2, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f9      	bne.n	8002b04 <RCC_Delay+0x1c>
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	10624dd3 	.word	0x10624dd3

08002b24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e041      	b.n	8002bba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fd fde0 	bl	8000710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f000 fc54 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e041      	b.n	8002c58 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f839 	bl	8002c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f000 fc05 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e041      	b.n	8002d08 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d106      	bne.n	8002c9e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f839 	bl	8002d10 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f000 fbad 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d122      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d11b      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0202 	mvn.w	r2, #2
 8002d4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fb37 	bl	80033d8 <HAL_TIM_IC_CaptureCallback>
 8002d6a:	e005      	b.n	8002d78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fb2a 	bl	80033c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fb39 	bl	80033ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d122      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d11b      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f06f 0204 	mvn.w	r2, #4
 8002da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fb0d 	bl	80033d8 <HAL_TIM_IC_CaptureCallback>
 8002dbe:	e005      	b.n	8002dcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fb00 	bl	80033c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fb0f 	bl	80033ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d122      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d11b      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0208 	mvn.w	r2, #8
 8002df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fae3 	bl	80033d8 <HAL_TIM_IC_CaptureCallback>
 8002e12:	e005      	b.n	8002e20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fad6 	bl	80033c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fae5 	bl	80033ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d122      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d11b      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 0210 	mvn.w	r2, #16
 8002e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2208      	movs	r2, #8
 8002e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fab9 	bl	80033d8 <HAL_TIM_IC_CaptureCallback>
 8002e66:	e005      	b.n	8002e74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 faac 	bl	80033c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fabb 	bl	80033ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10e      	bne.n	8002ea6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f06f 0201 	mvn.w	r2, #1
 8002e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa87 	bl	80033b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb0:	2b80      	cmp	r3, #128	@ 0x80
 8002eb2:	d10e      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebe:	2b80      	cmp	r3, #128	@ 0x80
 8002ec0:	d107      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fee5 	bl	8003c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002edc:	2b40      	cmp	r3, #64	@ 0x40
 8002ede:	d10e      	bne.n	8002efe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eea:	2b40      	cmp	r3, #64	@ 0x40
 8002eec:	d107      	bne.n	8002efe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa7f 	bl	80033fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d10e      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d107      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f06f 0220 	mvn.w	r2, #32
 8002f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 feb0 	bl	8003c8a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e088      	b.n	8003062 <HAL_TIM_IC_ConfigChannel+0x130>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d11b      	bne.n	8002f96 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002f6e:	f000 fc39 	bl	80037e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 020c 	bic.w	r2, r2, #12
 8002f80:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6999      	ldr	r1, [r3, #24]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	619a      	str	r2, [r3, #24]
 8002f94:	e060      	b.n	8003058 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d11c      	bne.n	8002fd6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002fac:	f000 fca2 	bl	80038f4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002fbe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6999      	ldr	r1, [r3, #24]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	021a      	lsls	r2, r3, #8
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]
 8002fd4:	e040      	b.n	8003058 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002fec:	f000 fced 	bl	80039ca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 020c 	bic.w	r2, r2, #12
 8002ffe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	69d9      	ldr	r1, [r3, #28]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	61da      	str	r2, [r3, #28]
 8003012:	e021      	b.n	8003058 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b0c      	cmp	r3, #12
 8003018:	d11c      	bne.n	8003054 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800302a:	f000 fd09 	bl	8003a40 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800303c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69d9      	ldr	r1, [r3, #28]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	021a      	lsls	r2, r3, #8
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	61da      	str	r2, [r3, #28]
 8003052:	e001      	b.n	8003058 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003086:	2302      	movs	r3, #2
 8003088:	e0ae      	b.n	80031e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b0c      	cmp	r3, #12
 8003096:	f200 809f 	bhi.w	80031d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800309a:	a201      	add	r2, pc, #4	@ (adr r2, 80030a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030d5 	.word	0x080030d5
 80030a4:	080031d9 	.word	0x080031d9
 80030a8:	080031d9 	.word	0x080031d9
 80030ac:	080031d9 	.word	0x080031d9
 80030b0:	08003115 	.word	0x08003115
 80030b4:	080031d9 	.word	0x080031d9
 80030b8:	080031d9 	.word	0x080031d9
 80030bc:	080031d9 	.word	0x080031d9
 80030c0:	08003157 	.word	0x08003157
 80030c4:	080031d9 	.word	0x080031d9
 80030c8:	080031d9 	.word	0x080031d9
 80030cc:	080031d9 	.word	0x080031d9
 80030d0:	08003197 	.word	0x08003197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68b9      	ldr	r1, [r7, #8]
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f9fa 	bl	80034d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0208 	orr.w	r2, r2, #8
 80030ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0204 	bic.w	r2, r2, #4
 80030fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6999      	ldr	r1, [r3, #24]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	619a      	str	r2, [r3, #24]
      break;
 8003112:	e064      	b.n	80031de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68b9      	ldr	r1, [r7, #8]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fa40 	bl	80035a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800312e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699a      	ldr	r2, [r3, #24]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6999      	ldr	r1, [r3, #24]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	021a      	lsls	r2, r3, #8
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	619a      	str	r2, [r3, #24]
      break;
 8003154:	e043      	b.n	80031de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fa89 	bl	8003674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0208 	orr.w	r2, r2, #8
 8003170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69da      	ldr	r2, [r3, #28]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0204 	bic.w	r2, r2, #4
 8003180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	69d9      	ldr	r1, [r3, #28]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	61da      	str	r2, [r3, #28]
      break;
 8003194:	e023      	b.n	80031de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fad3 	bl	8003748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69d9      	ldr	r1, [r3, #28]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	021a      	lsls	r2, r3, #8
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	61da      	str	r2, [r3, #28]
      break;
 80031d6:	e002      	b.n	80031de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	75fb      	strb	r3, [r7, #23]
      break;
 80031dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIM_ConfigClockSource+0x1c>
 8003208:	2302      	movs	r3, #2
 800320a:	e0b4      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x186>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800322a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003244:	d03e      	beq.n	80032c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800324a:	f200 8087 	bhi.w	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003252:	f000 8086 	beq.w	8003362 <HAL_TIM_ConfigClockSource+0x172>
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800325a:	d87f      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b70      	cmp	r3, #112	@ 0x70
 800325e:	d01a      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0xa6>
 8003260:	2b70      	cmp	r3, #112	@ 0x70
 8003262:	d87b      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b60      	cmp	r3, #96	@ 0x60
 8003266:	d050      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x11a>
 8003268:	2b60      	cmp	r3, #96	@ 0x60
 800326a:	d877      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b50      	cmp	r3, #80	@ 0x50
 800326e:	d03c      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0xfa>
 8003270:	2b50      	cmp	r3, #80	@ 0x50
 8003272:	d873      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d058      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x13a>
 8003278:	2b40      	cmp	r3, #64	@ 0x40
 800327a:	d86f      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b30      	cmp	r3, #48	@ 0x30
 800327e:	d064      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x15a>
 8003280:	2b30      	cmp	r3, #48	@ 0x30
 8003282:	d86b      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d060      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	2b20      	cmp	r3, #32
 800328a:	d867      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d05c      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	2b10      	cmp	r3, #16
 8003292:	d05a      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	e062      	b.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032a6:	f000 fc21 	bl	8003aec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	609a      	str	r2, [r3, #8]
      break;
 80032c2:	e04f      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032d4:	f000 fc0a 	bl	8003aec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032e6:	609a      	str	r2, [r3, #8]
      break;
 80032e8:	e03c      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f6:	461a      	mov	r2, r3
 80032f8:	f000 face 	bl	8003898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2150      	movs	r1, #80	@ 0x50
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fbd8 	bl	8003ab8 <TIM_ITRx_SetConfig>
      break;
 8003308:	e02c      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003316:	461a      	mov	r2, r3
 8003318:	f000 fb28 	bl	800396c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2160      	movs	r1, #96	@ 0x60
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fbc8 	bl	8003ab8 <TIM_ITRx_SetConfig>
      break;
 8003328:	e01c      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	461a      	mov	r2, r3
 8003338:	f000 faae 	bl	8003898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2140      	movs	r1, #64	@ 0x40
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fbb8 	bl	8003ab8 <TIM_ITRx_SetConfig>
      break;
 8003348:	e00c      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f000 fbaf 	bl	8003ab8 <TIM_ITRx_SetConfig>
      break;
 800335a:	e003      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	e000      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
	...

08003410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a29      	ldr	r2, [pc, #164]	@ (80034c8 <TIM_Base_SetConfig+0xb8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00b      	beq.n	8003440 <TIM_Base_SetConfig+0x30>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342e:	d007      	beq.n	8003440 <TIM_Base_SetConfig+0x30>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a26      	ldr	r2, [pc, #152]	@ (80034cc <TIM_Base_SetConfig+0xbc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_Base_SetConfig+0x30>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a25      	ldr	r2, [pc, #148]	@ (80034d0 <TIM_Base_SetConfig+0xc0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d108      	bne.n	8003452 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a1c      	ldr	r2, [pc, #112]	@ (80034c8 <TIM_Base_SetConfig+0xb8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_Base_SetConfig+0x62>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003460:	d007      	beq.n	8003472 <TIM_Base_SetConfig+0x62>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a19      	ldr	r2, [pc, #100]	@ (80034cc <TIM_Base_SetConfig+0xbc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_Base_SetConfig+0x62>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a18      	ldr	r2, [pc, #96]	@ (80034d0 <TIM_Base_SetConfig+0xc0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a07      	ldr	r2, [pc, #28]	@ (80034c8 <TIM_Base_SetConfig+0xb8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	615a      	str	r2, [r3, #20]
}
 80034be:	bf00      	nop
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800

080034d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f023 0201 	bic.w	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f023 0302 	bic.w	r3, r3, #2
 800351c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <TIM_OC1_SetConfig+0xc8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d10c      	bne.n	800354a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 0308 	bic.w	r3, r3, #8
 8003536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a13      	ldr	r2, [pc, #76]	@ (800359c <TIM_OC1_SetConfig+0xc8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d111      	bne.n	8003576 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40012c00 	.word	0x40012c00

080035a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f023 0210 	bic.w	r2, r3, #16
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f023 0320 	bic.w	r3, r3, #32
 80035ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003670 <TIM_OC2_SetConfig+0xd0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10d      	bne.n	800361c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800361a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a14      	ldr	r2, [pc, #80]	@ (8003670 <TIM_OC2_SetConfig+0xd0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d113      	bne.n	800364c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800362a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003632:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	621a      	str	r2, [r3, #32]
}
 8003666:	bf00      	nop
 8003668:	371c      	adds	r7, #28
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00

08003674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003744 <TIM_OC3_SetConfig+0xd0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d10d      	bne.n	80036ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a14      	ldr	r2, [pc, #80]	@ (8003744 <TIM_OC3_SetConfig+0xd0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d113      	bne.n	800371e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00

08003748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	031b      	lsls	r3, r3, #12
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a0f      	ldr	r2, [pc, #60]	@ (80037e0 <TIM_OC4_SetConfig+0x98>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d109      	bne.n	80037bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	019b      	lsls	r3, r3, #6
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	40012c00 	.word	0x40012c00

080037e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f023 0201 	bic.w	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4a1f      	ldr	r2, [pc, #124]	@ (800388c <TIM_TI1_SetConfig+0xa8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00b      	beq.n	800382a <TIM_TI1_SetConfig+0x46>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003818:	d007      	beq.n	800382a <TIM_TI1_SetConfig+0x46>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <TIM_TI1_SetConfig+0xac>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <TIM_TI1_SetConfig+0x46>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <TIM_TI1_SetConfig+0xb0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d101      	bne.n	800382e <TIM_TI1_SetConfig+0x4a>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <TIM_TI1_SetConfig+0x4c>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e003      	b.n	800384e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003854:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	b2db      	uxtb	r3, r3
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f023 030a 	bic.w	r3, r3, #10
 8003868:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f003 030a 	and.w	r3, r3, #10
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800

08003898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	f023 0201 	bic.w	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 030a 	bic.w	r3, r3, #10
 80038d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 0210 	bic.w	r2, r3, #16
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	031b      	lsls	r3, r3, #12
 8003938:	b29b      	uxth	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003946:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	621a      	str	r2, [r3, #32]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0210 	bic.w	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	031b      	lsls	r3, r3, #12
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b087      	sub	sp, #28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	031b      	lsls	r3, r3, #12
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	031b      	lsls	r3, r3, #12
 8003a98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f043 0307 	orr.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	609a      	str	r2, [r3, #8]
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	021a      	lsls	r2, r3, #8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	609a      	str	r2, [r3, #8]
}
 8003b20:	bf00      	nop
 8003b22:	371c      	adds	r7, #28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e046      	b.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a16      	ldr	r2, [pc, #88]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b90:	d009      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a12      	ldr	r2, [pc, #72]	@ (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40000400 	.word	0x40000400
 8003be4:	40000800 	.word	0x40000800

08003be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e03d      	b.n	8003c80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e042      	b.n	8003d46 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d106      	bne.n	8003cda <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fc fdbb 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2224      	movs	r2, #36	@ 0x24
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cf0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fd70 	bl	80047d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d06:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b08a      	sub	sp, #40	@ 0x28
 8003d52:	af02      	add	r7, sp, #8
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d16d      	bne.n	8003e4a <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <HAL_UART_Transmit+0x2c>
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e066      	b.n	8003e4c <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2221      	movs	r2, #33	@ 0x21
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d8c:	f7fc febc 	bl	8000b08 <HAL_GetTick>
 8003d90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	88fa      	ldrh	r2, [r7, #6]
 8003d9c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003da6:	d108      	bne.n	8003dba <HAL_UART_Transmit+0x6c>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	e003      	b.n	8003dc2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dc2:	e02a      	b.n	8003e1a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2180      	movs	r1, #128	@ 0x80
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 faf8 	bl	80043c4 <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e036      	b.n	8003e4c <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	3302      	adds	r3, #2
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e007      	b.n	8003e0c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1cf      	bne.n	8003dc4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2140      	movs	r1, #64	@ 0x40
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fac8 	bl	80043c4 <UART_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e006      	b.n	8003e4c <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b0ba      	sub	sp, #232	@ 0xe8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <HAL_UART_IRQHandler+0x66>
 8003ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fbd1 	bl	800465a <UART_Receive_IT>
      return;
 8003eb8:	e25b      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80de 	beq.w	8004080 <HAL_UART_IRQHandler+0x22c>
 8003ec4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ed4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80d1 	beq.w	8004080 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_UART_IRQHandler+0xae>
 8003eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	f043 0201 	orr.w	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_UART_IRQHandler+0xd2>
 8003f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1e:	f043 0202 	orr.w	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00b      	beq.n	8003f4a <HAL_UART_IRQHandler+0xf6>
 8003f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d011      	beq.n	8003f7a <HAL_UART_IRQHandler+0x126>
 8003f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d105      	bne.n	8003f6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f72:	f043 0208 	orr.w	r2, r3, #8
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 81f2 	beq.w	8004368 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x14e>
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb5c 	bl	800465a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <HAL_UART_IRQHandler+0x17a>
 8003fc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d04f      	beq.n	800406e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fa66 	bl	80044a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d041      	beq.n	8004066 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ffc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800400e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004012:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800401a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1d9      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d013      	beq.n	800405e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	4a7e      	ldr	r2, [pc, #504]	@ (8004234 <HAL_UART_IRQHandler+0x3e0>)
 800403c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004042:	4618      	mov	r0, r3
 8004044:	f7fd fd30 	bl	8001aa8 <HAL_DMA_Abort_IT>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004058:	4610      	mov	r0, r2
 800405a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	e00e      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f99c 	bl	800439c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	e00a      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f998 	bl	800439c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	e006      	b.n	800407c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f994 	bl	800439c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800407a:	e175      	b.n	8004368 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407c:	bf00      	nop
    return;
 800407e:	e173      	b.n	8004368 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	2b01      	cmp	r3, #1
 8004086:	f040 814f 	bne.w	8004328 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800408a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 8148 	beq.w	8004328 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8141 	beq.w	8004328 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80b6 	beq.w	8004238 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8145 	beq.w	800436c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040ea:	429a      	cmp	r2, r3
 80040ec:	f080 813e 	bcs.w	800436c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b20      	cmp	r3, #32
 8004100:	f000 8088 	beq.w	8004214 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004112:	e853 3f00 	ldrex	r3, [r3]
 8004116:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800411a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800411e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004122:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004130:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004134:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800413c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004148:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1d9      	bne.n	8004104 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3314      	adds	r3, #20
 8004156:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004160:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004174:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004178:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800417c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e1      	bne.n	8004150 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3314      	adds	r3, #20
 8004192:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800419c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800419e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3314      	adds	r3, #20
 80041ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e3      	bne.n	800418c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	330c      	adds	r3, #12
 80041d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e4:	f023 0310 	bic.w	r3, r3, #16
 80041e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e3      	bne.n	80041d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd fc0f 	bl	8001a32 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004222:	b29b      	uxth	r3, r3
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	b29b      	uxth	r3, r3
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8bf 	bl	80043ae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004230:	e09c      	b.n	800436c <HAL_UART_IRQHandler+0x518>
 8004232:	bf00      	nop
 8004234:	08004565 	.word	0x08004565
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004240:	b29b      	uxth	r3, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 808e 	beq.w	8004370 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 8089 	beq.w	8004370 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800426e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004270:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004274:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004282:	647a      	str	r2, [r7, #68]	@ 0x44
 8004284:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e3      	bne.n	800425e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	623b      	str	r3, [r7, #32]
   return(result);
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80042bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e3      	bne.n	8004296 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004300:	61fa      	str	r2, [r7, #28]
 8004302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	617b      	str	r3, [r7, #20]
   return(result);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e3      	bne.n	80042dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800431a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800431e:	4619      	mov	r1, r3
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f844 	bl	80043ae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004326:	e023      	b.n	8004370 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800432c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004330:	2b00      	cmp	r3, #0
 8004332:	d009      	beq.n	8004348 <HAL_UART_IRQHandler+0x4f4>
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f923 	bl	800458c <UART_Transmit_IT>
    return;
 8004346:	e014      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00e      	beq.n	8004372 <HAL_UART_IRQHandler+0x51e>
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f962 	bl	800462a <UART_EndTransmit_IT>
    return;
 8004366:	e004      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
    return;
 8004368:	bf00      	nop
 800436a:	e002      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
      return;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <HAL_UART_IRQHandler+0x51e>
      return;
 8004370:	bf00      	nop
  }
}
 8004372:	37e8      	adds	r7, #232	@ 0xe8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr

0800438a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	460b      	mov	r3, r1
 80043b8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b090      	sub	sp, #64	@ 0x40
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d4:	e050      	b.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d04c      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80043e4:	f7fc fb90 	bl	8000b08 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d241      	bcs.n	8004478 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800440a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004414:	637a      	str	r2, [r7, #52]	@ 0x34
 8004416:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800441a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e5      	bne.n	80043f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3314      	adds	r3, #20
 800442e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	613b      	str	r3, [r7, #16]
   return(result);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3314      	adds	r3, #20
 8004446:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004448:	623a      	str	r2, [r7, #32]
 800444a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	69f9      	ldr	r1, [r7, #28]
 800444e:	6a3a      	ldr	r2, [r7, #32]
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	61bb      	str	r3, [r7, #24]
   return(result);
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e5      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e00f      	b.n	8004498 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4013      	ands	r3, r2
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	429a      	cmp	r2, r3
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	429a      	cmp	r2, r3
 8004494:	d09f      	beq.n	80043d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3740      	adds	r7, #64	@ 0x40
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b095      	sub	sp, #84	@ 0x54
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80044ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e5      	bne.n	80044a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3314      	adds	r3, #20
 80044e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3314      	adds	r3, #20
 80044fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	2b01      	cmp	r3, #1
 8004516:	d119      	bne.n	800454c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60bb      	str	r3, [r7, #8]
   return(result);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004538:	61ba      	str	r2, [r7, #24]
 800453a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	613b      	str	r3, [r7, #16]
   return(result);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800455a:	bf00      	nop
 800455c:	3754      	adds	r7, #84	@ 0x54
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff ff0c 	bl	800439c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b21      	cmp	r3, #33	@ 0x21
 800459e:	d13e      	bne.n	800461e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a8:	d114      	bne.n	80045d4 <UART_Transmit_IT+0x48>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d110      	bne.n	80045d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	1c9a      	adds	r2, r3, #2
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]
 80045d2:	e008      	b.n	80045e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	1c59      	adds	r1, r3, #1
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6211      	str	r1, [r2, #32]
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	4619      	mov	r1, r3
 80045f4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004608:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004618:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff fe94 	bl	8004378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b08c      	sub	sp, #48	@ 0x30
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b22      	cmp	r3, #34	@ 0x22
 800466c:	f040 80ae 	bne.w	80047cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004678:	d117      	bne.n	80046aa <UART_Receive_IT+0x50>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d113      	bne.n	80046aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	b29b      	uxth	r3, r3
 8004694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004698:	b29a      	uxth	r2, r3
 800469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a2:	1c9a      	adds	r2, r3, #2
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80046a8:	e026      	b.n	80046f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046bc:	d007      	beq.n	80046ce <UART_Receive_IT+0x74>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <UART_Receive_IT+0x82>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e008      	b.n	80046ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29b      	uxth	r3, r3
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4619      	mov	r1, r3
 8004706:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004708:	2b00      	cmp	r3, #0
 800470a:	d15d      	bne.n	80047c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0220 	bic.w	r2, r2, #32
 800471a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800472a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695a      	ldr	r2, [r3, #20]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	2b01      	cmp	r3, #1
 8004750:	d135      	bne.n	80047be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	613b      	str	r3, [r7, #16]
   return(result);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f023 0310 	bic.w	r3, r3, #16
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004778:	623a      	str	r2, [r7, #32]
 800477a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	69f9      	ldr	r1, [r7, #28]
 800477e:	6a3a      	ldr	r2, [r7, #32]
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	61bb      	str	r3, [r7, #24]
   return(result);
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e5      	bne.n	8004758 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b10      	cmp	r3, #16
 8004798:	d10a      	bne.n	80047b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fdf9 	bl	80043ae <HAL_UARTEx_RxEventCallback>
 80047bc:	e002      	b.n	80047c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fde3 	bl	800438a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e002      	b.n	80047ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e000      	b.n	80047ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047cc:	2302      	movs	r3, #2
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3730      	adds	r7, #48	@ 0x30
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004812:	f023 030c 	bic.w	r3, r3, #12
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	430b      	orrs	r3, r1
 800481e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699a      	ldr	r2, [r3, #24]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <UART_SetConfig+0x114>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7fe f93e 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	e002      	b.n	800484e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7fe f926 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 800484c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009a      	lsls	r2, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	4a22      	ldr	r2, [pc, #136]	@ (80048f0 <UART_SetConfig+0x118>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	0119      	lsls	r1, r3, #4
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	fbb2 f2f3 	udiv	r2, r2, r3
 8004884:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <UART_SetConfig+0x118>)
 8004886:	fba3 0302 	umull	r0, r3, r3, r2
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	2064      	movs	r0, #100	@ 0x64
 800488e:	fb00 f303 	mul.w	r3, r0, r3
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	3332      	adds	r3, #50	@ 0x32
 8004898:	4a15      	ldr	r2, [pc, #84]	@ (80048f0 <UART_SetConfig+0x118>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048a4:	4419      	add	r1, r3
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009a      	lsls	r2, r3, #2
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048bc:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <UART_SetConfig+0x118>)
 80048be:	fba3 0302 	umull	r0, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2064      	movs	r0, #100	@ 0x64
 80048c6:	fb00 f303 	mul.w	r3, r0, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	@ 0x32
 80048d0:	4a07      	ldr	r2, [pc, #28]	@ (80048f0 <UART_SetConfig+0x118>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	440a      	add	r2, r1
 80048e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40013800 	.word	0x40013800
 80048f0:	51eb851f 	.word	0x51eb851f

080048f4 <DCM_Proc_Init>:
#include "mcal/uds/server/uds_server.h"
#include "stm32f1xx_hal.h"
#include "ota/ota.h"


void DCM_Proc_Init() {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  UDS_Srv_Init();
 80048f8:	f000 fc60 	bl	80051bc <UDS_Srv_Init>
}
 80048fc:	bf00      	nop
 80048fe:	bd80      	pop	{r7, pc}

08004900 <ECU_reset_Handler>:

resp_code_t ECU_reset_Handler()
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 8004904:	f7fd f885 	bl	8001a12 <HAL_NVIC_SystemReset>
	return POSITIVE_RESPONE;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	bd80      	pop	{r7, pc}

0800490e <DiagSess_Ctl_Handler>:

// To jump to programing or application
resp_code_t DiagSess_Ctl_Handler(diag_sess_t session) { return POSITIVE_RESPONE;}
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	4603      	mov	r3, r0
 8004916:	71fb      	strb	r3, [r7, #7]
 8004918:	2300      	movs	r3, #0
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr

08004924 <Request_Download_Handler>:

// Preparation for download new SW
resp_code_t Request_Download_Handler(uint32_t mem_addr, uint32_t mem_size, uint32_t* block_len)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
	ota_flashing_begin();
 8004930:	f000 fc66 	bl	8005200 <ota_flashing_begin>

	return POSITIVE_RESPONE;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <Transfer_Data_Handler>:

// Transfer data
resp_code_t Transfer_Data_Handler(uint8_t seq_cnt, const uint8_t* data, uint32_t block_size)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b086      	sub	sp, #24
 8004942:	af00      	add	r7, sp, #0
 8004944:	4603      	mov	r3, r0
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	73fb      	strb	r3, [r7, #15]
	uint32_t data_u32 = *((uint32_t*)data);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	617b      	str	r3, [r7, #20]
	ota_flashing_inprogress(data_u32);
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f000 fc76 	bl	8005244 <ota_flashing_inprogress>

	return POSITIVE_RESPONE;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <Transfer_Exit_Handler>:

// Complete transfer
resp_code_t Transfer_Exit_Handler()
{
 8004962:	b580      	push	{r7, lr}
 8004964:	af00      	add	r7, sp, #0
	ota_flashing_end();
 8004966:	f000 fcc9 	bl	80052fc <ota_flashing_end>

	return POSITIVE_RESPONE;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}

08004970 <Check_Memory_Handler>:


// Complete transfer
resp_code_t Check_Memory_Handler(uint32_t* crc) { return POSITIVE_RESPONE;}
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	2300      	movs	r3, #0
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <HAL_CAN_RxFifo0MsgPendingCallback>:
static can_rx_msg_t can_rx_msg_buff[CAN_RX_BUFFER_SIZE];

extern CAN_HandleTypeDef hcan;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08c      	sub	sp, #48	@ 0x30
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  if (hcan->Instance == CAN1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0d      	ldr	r2, [pc, #52]	@ (80049c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d114      	bne.n	80049c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
  {
    can_rx_msg_t rx_it;
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_it.header, rx_it.data);
 8004996:	f107 030c 	add.w	r3, r7, #12
 800499a:	331c      	adds	r3, #28
 800499c:	f107 020c 	add.w	r2, r7, #12
 80049a0:	2100      	movs	r1, #0
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fc fbb5 	bl	8001112 <HAL_CAN_GetRxMessage>
    buffer_push(&can_rx_fifo, &rx_it, sizeof(can_rx_msg_t));
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	2224      	movs	r2, #36	@ 0x24
 80049ae:	4619      	mov	r1, r3
 80049b0:	4806      	ldr	r0, [pc, #24]	@ (80049cc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80049b2:	f000 fd11 	bl	80053d8 <buffer_push>
	HAL_GPIO_TogglePin(PCB_LED_GPIO_Port, PCB_LED_Pin);
 80049b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049ba:	4805      	ldr	r0, [pc, #20]	@ (80049d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80049bc:	f7fd fc88 	bl	80022d0 <HAL_GPIO_TogglePin>
  }
}
 80049c0:	bf00      	nop
 80049c2:	3730      	adds	r7, #48	@ 0x30
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40006400 	.word	0x40006400
 80049cc:	200001a8 	.word	0x200001a8
 80049d0:	40011000 	.word	0x40011000

080049d4 <can_start>:
		buffer_push(&can_rx_fifo, &rx_it, sizeof(can_rx_msg_t));
		HAL_GPIO_TogglePin(PCB_LED_GPIO_Port, PCB_LED_Pin);
	}
}
void can_start(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	@ 0x28
 80049d8:	af00      	add	r7, sp, #0
  init_buffer(&can_rx_fifo, can_rx_msg_buff, CAN_RX_BUFFER_SIZE);
 80049da:	2240      	movs	r2, #64	@ 0x40
 80049dc:	4914      	ldr	r1, [pc, #80]	@ (8004a30 <can_start+0x5c>)
 80049de:	4815      	ldr	r0, [pc, #84]	@ (8004a34 <can_start+0x60>)
 80049e0:	f000 fcb1 	bl	8005346 <init_buffer>
  // TODO: filter now accept for everything
  CAN_FilterTypeDef sFilterConfig = {0};
 80049e4:	463b      	mov	r3, r7
 80049e6:	2228      	movs	r2, #40	@ 0x28
 80049e8:	2100      	movs	r1, #0
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fd98 	bl	8005520 <memset>
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterIdHigh = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterActivation = ENABLE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	623b      	str	r3, [r7, #32]
  HAL_CAN_ConfigFilter(&hcan,&sFilterConfig);
 8004a10:	463b      	mov	r3, r7
 8004a12:	4619      	mov	r1, r3
 8004a14:	4808      	ldr	r0, [pc, #32]	@ (8004a38 <can_start+0x64>)
 8004a16:	f7fc f9a0 	bl	8000d5a <HAL_CAN_ConfigFilter>
  // start can and interrupt here
  HAL_CAN_Start(&hcan);
 8004a1a:	4807      	ldr	r0, [pc, #28]	@ (8004a38 <can_start+0x64>)
 8004a1c:	f7fc fa66 	bl	8000eec <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8004a20:	2102      	movs	r1, #2
 8004a22:	4805      	ldr	r0, [pc, #20]	@ (8004a38 <can_start+0x64>)
 8004a24:	f7fc fc96 	bl	8001354 <HAL_CAN_ActivateNotification>
}
 8004a28:	bf00      	nop
 8004a2a:	3728      	adds	r7, #40	@ 0x28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	200001b4 	.word	0x200001b4
 8004a34:	200001a8 	.word	0x200001a8
 8004a38:	2000007c 	.word	0x2000007c

08004a3c <can_send>:
  HAL_CAN_DeactivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
  HAL_CAN_Stop(&hcan);
}

void can_send(const can_tx_msg_t *msg)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t TxMailbox;
  HAL_CAN_AddTxMessage(&hcan, &msg->header, msg->data, &TxMailbox);
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f103 0218 	add.w	r2, r3, #24
 8004a4c:	f107 030c 	add.w	r3, r7, #12
 8004a50:	4803      	ldr	r0, [pc, #12]	@ (8004a60 <can_send+0x24>)
 8004a52:	f7fc fa8f 	bl	8000f74 <HAL_CAN_AddTxMessage>
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	2000007c 	.word	0x2000007c

08004a64 <can_receive>:

const can_rx_msg_t *can_receive(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  return buffer_front(&can_rx_fifo, sizeof(can_rx_msg_t));
 8004a68:	2124      	movs	r1, #36	@ 0x24
 8004a6a:	4803      	ldr	r0, [pc, #12]	@ (8004a78 <can_receive+0x14>)
 8004a6c:	f000 fc96 	bl	800539c <buffer_front>
 8004a70:	4603      	mov	r3, r0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200001a8 	.word	0x200001a8

08004a7c <can_rx_available>:

int32_t can_rx_available(void) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  return buffer_available(&can_rx_fifo);
 8004a80:	4802      	ldr	r0, [pc, #8]	@ (8004a8c <can_rx_available+0x10>)
 8004a82:	f000 fc78 	bl	8005376 <buffer_available>
 8004a86:	4603      	mov	r3, r0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	200001a8 	.word	0x200001a8

08004a90 <can_process_next>:

void can_process_next(void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  buffer_pop(&can_rx_fifo);
 8004a94:	4802      	ldr	r0, [pc, #8]	@ (8004aa0 <can_process_next+0x10>)
 8004a96:	f000 fcd6 	bl	8005446 <buffer_pop>
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	200001a8 	.word	0x200001a8

08004aa4 <COM_Proc_Init>:
 */


#include "com_proc.h"

void COM_Proc_Init() {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  can_start();
 8004aa8:	f7ff ff94 	bl	80049d4 <can_start>
}
 8004aac:	bf00      	nop
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <COM_Proc_1ms>:

void COM_Proc_1ms() {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
//	can_polling();

  if (can_rx_available() == CAN_SUCCESS) {
 8004ab6:	f7ff ffe1 	bl	8004a7c <can_rx_available>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d113      	bne.n	8004ae8 <COM_Proc_1ms+0x38>
    const can_rx_msg_t*	rx_msg = can_receive();
 8004ac0:	f7ff ffd0 	bl	8004a64 <can_receive>
 8004ac4:	6038      	str	r0, [r7, #0]
    for (int i = 0; i < sizeof(recv_handler)/sizeof(recv_handler_t); ++i) {
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	e008      	b.n	8004ade <COM_Proc_1ms+0x2e>
      recv_handler[i](rx_msg);
 8004acc:	4a08      	ldr	r2, [pc, #32]	@ (8004af0 <COM_Proc_1ms+0x40>)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad4:	6838      	ldr	r0, [r7, #0]
 8004ad6:	4798      	blx	r3
    for (int i = 0; i < sizeof(recv_handler)/sizeof(recv_handler_t); ++i) {
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3301      	adds	r3, #1
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f3      	beq.n	8004acc <COM_Proc_1ms+0x1c>
    }
    can_process_next();
 8004ae4:	f7ff ffd4 	bl	8004a90 <can_process_next>
  }
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	2000000c 	.word	0x2000000c

08004af4 <set_isotp_link>:
#include "isotp.h"

// This can be extended to have more than one link i.e,. func_addr and rx_link
static isotp_link_t* link;

void set_isotp_link(isotp_link_t* tplink) {
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  link = tplink;
 8004afc:	4a05      	ldr	r2, [pc, #20]	@ (8004b14 <set_isotp_link+0x20>)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6013      	str	r3, [r2, #0]
  link->total_byte = 0;
 8004b02:	4b04      	ldr	r3, [pc, #16]	@ (8004b14 <set_isotp_link+0x20>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2200      	movs	r2, #0
 8004b08:	611a      	str	r2, [r3, #16]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	20000ab4 	.word	0x20000ab4

08004b18 <send_single_frame>:

// Function to send ISO-TP single frame
void send_single_frame(const uint8_t *data, uint32_t len)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	@ 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  can_tx_msg_t frame = {0};
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	2220      	movs	r2, #32
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fcf8 	bl	8005520 <memset>
  frame.header.IDE = CAN_ID_STD;
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
  frame.header.StdId = link->tx_addr;
 8004b34:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <send_single_frame+0x54>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60bb      	str	r3, [r7, #8]
  frame.data[0] = len; // DLC (Data Length Code)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	f887 3020 	strb.w	r3, [r7, #32]
  memcpy(frame.data + 1, data, len);
 8004b44:	f107 0308 	add.w	r3, r7, #8
 8004b48:	3318      	adds	r3, #24
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fd19 	bl	8005588 <memcpy>
  frame.header.DLC = 8;
 8004b56:	2308      	movs	r3, #8
 8004b58:	61bb      	str	r3, [r7, #24]
  can_send(&frame);
 8004b5a:	f107 0308 	add.w	r3, r7, #8
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff ff6c 	bl	8004a3c <can_send>
}
 8004b64:	bf00      	nop
 8004b66:	3728      	adds	r7, #40	@ 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000ab4 	.word	0x20000ab4

08004b70 <send_first_frame>:

// Send first frame
void send_first_frame(const uint8_t *data, uint32_t len)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	@ 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  can_tx_msg_t frame = {0};
 8004b7a:	f107 0308 	add.w	r3, r7, #8
 8004b7e:	2220      	movs	r2, #32
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fccc 	bl	8005520 <memset>
  frame.header.IDE = CAN_ID_STD;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
  frame.header.StdId = link->tx_addr;
 8004b8c:	4b11      	ldr	r3, [pc, #68]	@ (8004bd4 <send_first_frame+0x64>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60bb      	str	r3, [r7, #8]
  frame.data[0] = (0x10 | len >> 8); // should limit len <= FFF
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	0a1b      	lsrs	r3, r3, #8
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f043 0310 	orr.w	r3, r3, #16
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f887 3020 	strb.w	r3, [r7, #32]
  frame.data[1] = (len & 0xFF);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

  memcpy(frame.data + 2, data, 6);
 8004bac:	f107 0308 	add.w	r3, r7, #8
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	2206      	movs	r2, #6
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 fce5 	bl	8005588 <memcpy>
  frame.header.DLC = 8;
 8004bbe:	2308      	movs	r3, #8
 8004bc0:	61bb      	str	r3, [r7, #24]
  can_send(&frame);
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff ff38 	bl	8004a3c <can_send>
}
 8004bcc:	bf00      	nop
 8004bce:	3728      	adds	r7, #40	@ 0x28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000ab4 	.word	0x20000ab4

08004bd8 <send_multi_frame>:

// Function to send ISO-TP multi frame
void send_multi_frame(const uint8_t *data, uint32_t len)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	@ 0x30
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  can_tx_msg_t frame = {0};
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	2220      	movs	r2, #32
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fc98 	bl	8005520 <memset>
  frame.header.IDE = CAN_ID_STD;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	613b      	str	r3, [r7, #16]
  frame.header.StdId = link->tx_addr;
 8004bf4:	4b28      	ldr	r3, [pc, #160]	@ (8004c98 <send_multi_frame+0xc0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	60bb      	str	r3, [r7, #8]
  uint8_t seq_num = 1;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint16_t remaining_bytes = len;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  uint8_t offset = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  while (remaining_bytes > 0)
 8004c0c:	e03c      	b.n	8004c88 <send_multi_frame+0xb0>
  {
    uint8_t bytes_to_send = (remaining_bytes > 7) ? 7 : remaining_bytes;
 8004c0e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c10:	2b07      	cmp	r3, #7
 8004c12:	bf28      	it	cs
 8004c14:	2307      	movcs	r3, #7
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    frame.data[0] = (0x20 | (seq_num & 0x0F));
 8004c1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	b25b      	sxtb	r3, r3
 8004c26:	f043 0320 	orr.w	r3, r3, #32
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f887 3020 	strb.w	r3, [r7, #32]

    memcpy(frame.data + 1, data + offset, bytes_to_send);
 8004c32:	f107 0308 	add.w	r3, r7, #8
 8004c36:	3318      	adds	r3, #24
 8004c38:	3301      	adds	r3, #1
 8004c3a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4411      	add	r1, r2
 8004c42:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fc9e 	bl	8005588 <memcpy>
    frame.header.DLC = bytes_to_send + 1;
 8004c4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c50:	3301      	adds	r3, #1
 8004c52:	61bb      	str	r3, [r7, #24]
    can_send(&frame);
 8004c54:	f107 0308 	add.w	r3, r7, #8
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff feef 	bl	8004a3c <can_send>

    seq_num++;
 8004c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c62:	3301      	adds	r3, #1
 8004c64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    offset += bytes_to_send;
 8004c68:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004c6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c70:	4413      	add	r3, r2
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    remaining_bytes -= bytes_to_send;
 8004c76:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    HAL_Delay(1);
 8004c82:	2001      	movs	r0, #1
 8004c84:	f7fb ff4a 	bl	8000b1c <HAL_Delay>
  while (remaining_bytes > 0)
 8004c88:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1bf      	bne.n	8004c0e <send_multi_frame+0x36>
  }
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	3730      	adds	r7, #48	@ 0x30
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20000ab4 	.word	0x20000ab4

08004c9c <send_fc_frame>:

void send_fc_frame(uint32_t id, uint8_t flag, uint8_t blk, uint8_t st_min) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	@ 0x28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	70fb      	strb	r3, [r7, #3]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70bb      	strb	r3, [r7, #2]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	707b      	strb	r3, [r7, #1]
	can_tx_msg_t frame = {0};
 8004cb6:	f107 0308 	add.w	r3, r7, #8
 8004cba:	2220      	movs	r2, #32
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fc2e 	bl	8005520 <memset>
	frame.header.IDE = CAN_ID_STD;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
	frame.header.StdId = link->tx_addr;
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <send_fc_frame+0x64>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	60bb      	str	r3, [r7, #8]
	frame.data[0] = (0x30 | flag); // should limit len <= FFF
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f887 3020 	strb.w	r3, [r7, #32]
	frame.data[1] = blk;
 8004cdc:	78bb      	ldrb	r3, [r7, #2]
 8004cde:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	frame.data[2] = st_min;
 8004ce2:	787b      	ldrb	r3, [r7, #1]
 8004ce4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	frame.header.DLC = 8;
 8004ce8:	2308      	movs	r3, #8
 8004cea:	61bb      	str	r3, [r7, #24]
	can_send(&frame);
 8004cec:	f107 0308 	add.w	r3, r7, #8
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fea3 	bl	8004a3c <can_send>
}
 8004cf6:	bf00      	nop
 8004cf8:	3728      	adds	r7, #40	@ 0x28
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000ab4 	.word	0x20000ab4

08004d04 <send_isotp>:

void send_isotp(const uint8_t *data, uint32_t len)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  if (len <= 7)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b07      	cmp	r3, #7
 8004d12:	d804      	bhi.n	8004d1e <send_isotp+0x1a>
  {
    send_single_frame(data, len);
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fefe 	bl	8004b18 <send_single_frame>
  else
  {
    send_first_frame(data, len);
    send_multi_frame(data + 6, len - 6);
  }
}
 8004d1c:	e00b      	b.n	8004d36 <send_isotp+0x32>
    send_first_frame(data, len);
 8004d1e:	6839      	ldr	r1, [r7, #0]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff ff25 	bl	8004b70 <send_first_frame>
    send_multi_frame(data + 6, len - 6);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	1d9a      	adds	r2, r3, #6
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	3b06      	subs	r3, #6
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f7ff ff51 	bl	8004bd8 <send_multi_frame>
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <handle_single_frame>:

void handle_single_frame(const can_rx_msg_t *frame) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  link->recv_cb(frame->header.StdId, frame->data + 1, (frame->data[0] & 0x07));
 8004d48:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <handle_single_frame+0x2c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6810      	ldr	r0, [r2, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	321c      	adds	r2, #28
 8004d56:	1c51      	adds	r1, r2, #1
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	7f12      	ldrb	r2, [r2, #28]
 8004d5c:	f002 0207 	and.w	r2, r2, #7
 8004d60:	b292      	uxth	r2, r2
 8004d62:	4798      	blx	r3
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20000ab4 	.word	0x20000ab4

08004d70 <handle_first_frame>:

//
void handle_first_frame(const can_rx_msg_t *frame) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  link->total_byte = ((uint32_t)(frame->data[0] & 0x0F) << 8) | frame->data[1];
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	7f1b      	ldrb	r3, [r3, #28]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	7f5b      	ldrb	r3, [r3, #29]
 8004d86:	4619      	mov	r1, r3
 8004d88:	4b18      	ldr	r3, [pc, #96]	@ (8004dec <handle_first_frame+0x7c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	611a      	str	r2, [r3, #16]
  memcpy(link->rx_buff, frame->data + 2, frame->header.DLC - 2);
 8004d90:	4b16      	ldr	r3, [pc, #88]	@ (8004dec <handle_first_frame+0x7c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6898      	ldr	r0, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	331c      	adds	r3, #28
 8004d9a:	1c99      	adds	r1, r3, #2
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	3b02      	subs	r3, #2
 8004da2:	461a      	mov	r2, r3
 8004da4:	f000 fbf0 	bl	8005588 <memcpy>
  link->recv_byte = 6;
 8004da8:	4b10      	ldr	r3, [pc, #64]	@ (8004dec <handle_first_frame+0x7c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2206      	movs	r2, #6
 8004dae:	60da      	str	r2, [r3, #12]
  link->seq_num = 1;
 8004db0:	4b0e      	ldr	r3, [pc, #56]	@ (8004dec <handle_first_frame+0x7c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2201      	movs	r2, #1
 8004db6:	751a      	strb	r2, [r3, #20]
  send_fc_frame(link->tx_addr, 0, ((link->total_byte - 6)/7) + 1, 1);
 8004db8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dec <handle_first_frame+0x7c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6858      	ldr	r0, [r3, #4]
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004dec <handle_first_frame+0x7c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	1f9a      	subs	r2, r3, #6
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004df0 <handle_first_frame+0x80>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	1ad2      	subs	r2, r2, r3
 8004dce:	0852      	lsrs	r2, r2, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	089b      	lsrs	r3, r3, #2
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	2301      	movs	r3, #1
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f7ff ff5d 	bl	8004c9c <send_fc_frame>
}
 8004de2:	bf00      	nop
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000ab4 	.word	0x20000ab4
 8004df0:	24924925 	.word	0x24924925

08004df4 <handle_consec_frame>:

void handle_consec_frame(const can_rx_msg_t *frame) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if (link->seq_num == (frame->data[0] & 0x0F)) {
 8004dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	7d1b      	ldrb	r3, [r3, #20]
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	7f1b      	ldrb	r3, [r3, #28]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d146      	bne.n	8004e9e <handle_consec_frame+0xaa>
    memcpy(link->rx_buff + link->recv_byte, frame->data + 1, frame->header.DLC - 1);
 8004e10:	4b25      	ldr	r3, [pc, #148]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	4b24      	ldr	r3, [pc, #144]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	18d0      	adds	r0, r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	331c      	adds	r3, #28
 8004e22:	1c59      	adds	r1, r3, #1
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f000 fbac 	bl	8005588 <memcpy>
    link->recv_byte += frame->header.DLC - 1;
 8004e30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	441a      	add	r2, r3
 8004e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3a01      	subs	r2, #1
 8004e42:	60da      	str	r2, [r3, #12]
    link->seq_num++;
 8004e44:	4b18      	ldr	r3, [pc, #96]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	7d1a      	ldrb	r2, [r3, #20]
 8004e4a:	3201      	adds	r2, #1
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	751a      	strb	r2, [r3, #20]
    link->seq_num &= 0x0F;
 8004e50:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	7d1a      	ldrb	r2, [r3, #20]
 8004e56:	4b14      	ldr	r3, [pc, #80]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f002 020f 	and.w	r2, r2, #15
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	751a      	strb	r2, [r3, #20]
    if (link->recv_byte >= link->total_byte) {
 8004e62:	4b11      	ldr	r3, [pc, #68]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d315      	bcc.n	8004e9e <handle_consec_frame+0xaa>
      link->recv_cb(link->rx_addr, link->rx_buff, link->total_byte);
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	4a0b      	ldr	r2, [pc, #44]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	6810      	ldr	r0, [r2, #0]
 8004e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	6891      	ldr	r1, [r2, #8]
 8004e84:	4a08      	ldr	r2, [pc, #32]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	6912      	ldr	r2, [r2, #16]
 8004e8a:	b292      	uxth	r2, r2
 8004e8c:	4798      	blx	r3
      link->total_byte = 0;
 8004e8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2200      	movs	r2, #0
 8004e94:	611a      	str	r2, [r3, #16]
      link->recv_byte = 0;
 8004e96:	4b04      	ldr	r3, [pc, #16]	@ (8004ea8 <handle_consec_frame+0xb4>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	60da      	str	r2, [r3, #12]
    }
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000ab4 	.word	0x20000ab4

08004eac <isotp_can_recv>:

void isotp_can_recv(const can_rx_msg_t *frame)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  if (link->rx_addr == frame->header.StdId) // assuming all data is std frame
 8004eb4:	4b13      	ldr	r3, [pc, #76]	@ (8004f04 <isotp_can_recv+0x58>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d11c      	bne.n	8004efc <isotp_can_recv+0x50>
  {
    if (frame->data[0] >> 4 == 0) // single frame
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	7f1b      	ldrb	r3, [r3, #28]
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d103      	bne.n	8004ed6 <isotp_can_recv+0x2a>
    {
      handle_single_frame(frame);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff ff36 	bl	8004d40 <handle_single_frame>
    else if (frame->data[0] >> 4 == 2) // consecutive frame
    {
      handle_consec_frame(frame);
    }
  }
}
 8004ed4:	e012      	b.n	8004efc <isotp_can_recv+0x50>
    else if (frame->data[0] >> 4 == 1) // first frame
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	7f1b      	ldrb	r3, [r3, #28]
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d103      	bne.n	8004eea <isotp_can_recv+0x3e>
      handle_first_frame(frame);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff ff44 	bl	8004d70 <handle_first_frame>
}
 8004ee8:	e008      	b.n	8004efc <isotp_can_recv+0x50>
    else if (frame->data[0] >> 4 == 2) // consecutive frame
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	7f1b      	ldrb	r3, [r3, #28]
 8004eee:	091b      	lsrs	r3, r3, #4
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d102      	bne.n	8004efc <isotp_can_recv+0x50>
      handle_consec_frame(frame);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff ff7c 	bl	8004df4 <handle_consec_frame>
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000ab4 	.word	0x20000ab4

08004f08 <tp_recv_handler>:

static uint8_t srv_payload[64];
static isotp_link_t srv_link;

void tp_recv_handler(uint32_t id, const uint8_t *data, uint16_t len)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	4613      	mov	r3, r2
 8004f14:	80fb      	strh	r3, [r7, #6]
  uint8_t ret;
  uint32_t resp;
  uint32_t resp_len = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
  switch (data[0])
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	3b10      	subs	r3, #16
 8004f20:	2b27      	cmp	r3, #39	@ 0x27
 8004f22:	f200 813c 	bhi.w	800519e <tp_recv_handler+0x296>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <tp_recv_handler+0x24>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004ff9 	.word	0x08004ff9
 8004f30:	08004fcd 	.word	0x08004fcd
 8004f34:	0800519f 	.word	0x0800519f
 8004f38:	0800519f 	.word	0x0800519f
 8004f3c:	0800519f 	.word	0x0800519f
 8004f40:	0800519f 	.word	0x0800519f
 8004f44:	0800519f 	.word	0x0800519f
 8004f48:	0800519f 	.word	0x0800519f
 8004f4c:	0800519f 	.word	0x0800519f
 8004f50:	0800519f 	.word	0x0800519f
 8004f54:	0800519f 	.word	0x0800519f
 8004f58:	0800519f 	.word	0x0800519f
 8004f5c:	0800519f 	.word	0x0800519f
 8004f60:	0800519f 	.word	0x0800519f
 8004f64:	0800519f 	.word	0x0800519f
 8004f68:	0800519f 	.word	0x0800519f
 8004f6c:	0800519f 	.word	0x0800519f
 8004f70:	0800519f 	.word	0x0800519f
 8004f74:	0800519f 	.word	0x0800519f
 8004f78:	0800519f 	.word	0x0800519f
 8004f7c:	0800519f 	.word	0x0800519f
 8004f80:	0800519f 	.word	0x0800519f
 8004f84:	0800519f 	.word	0x0800519f
 8004f88:	0800519f 	.word	0x0800519f
 8004f8c:	0800519f 	.word	0x0800519f
 8004f90:	0800519f 	.word	0x0800519f
 8004f94:	0800519f 	.word	0x0800519f
 8004f98:	0800519f 	.word	0x0800519f
 8004f9c:	0800519f 	.word	0x0800519f
 8004fa0:	0800519f 	.word	0x0800519f
 8004fa4:	0800519f 	.word	0x0800519f
 8004fa8:	0800519f 	.word	0x0800519f
 8004fac:	0800519f 	.word	0x0800519f
 8004fb0:	08005031 	.word	0x08005031
 8004fb4:	0800519f 	.word	0x0800519f
 8004fb8:	0800519f 	.word	0x0800519f
 8004fbc:	080050b1 	.word	0x080050b1
 8004fc0:	0800519f 	.word	0x0800519f
 8004fc4:	08005139 	.word	0x08005139
 8004fc8:	08005179 	.word	0x08005179
  {
  case ECU_RESET_SID:
    ret = ECU_reset_Handler();
 8004fcc:	f7ff fc98 	bl	8004900 <ECU_reset_Handler>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	76fb      	strb	r3, [r7, #27]
    if (ret == POSITIVE_RESPONE) {
 8004fd4:	7efb      	ldrb	r3, [r7, #27]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <tp_recv_handler+0xe4>
    	srv_payload[0] = ECU_RESET_SID + 0x40;
 8004fda:	4b77      	ldr	r3, [pc, #476]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8004fdc:	2251      	movs	r2, #81	@ 0x51
 8004fde:	701a      	strb	r2, [r3, #0]
    	srv_payload[1] = 0x01;
 8004fe0:	4b75      	ldr	r3, [pc, #468]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	705a      	strb	r2, [r3, #1]
      resp_len = 2;
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }
    break;
 8004fea:	e0dd      	b.n	80051a8 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 8004fec:	4b72      	ldr	r3, [pc, #456]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8004fee:	227f      	movs	r2, #127	@ 0x7f
 8004ff0:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
    break;
 8004ff6:	e0d7      	b.n	80051a8 <tp_recv_handler+0x2a0>
  case DIAG_SESS_CTL_SID:
    ret = DiagSess_Ctl_Handler(data[1]);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff fc85 	bl	800490e <DiagSess_Ctl_Handler>
 8005004:	4603      	mov	r3, r0
 8005006:	76fb      	strb	r3, [r7, #27]
    if (ret == POSITIVE_RESPONE) {
 8005008:	7efb      	ldrb	r3, [r7, #27]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <tp_recv_handler+0x11c>
    	srv_payload[0] = DIAG_SESS_CTL_SID + 0x40;
 800500e:	4b6a      	ldr	r3, [pc, #424]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005010:	2250      	movs	r2, #80	@ 0x50
 8005012:	701a      	strb	r2, [r3, #0]
    	srv_payload[1] = data[1];
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	3301      	adds	r3, #1
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	4b67      	ldr	r3, [pc, #412]	@ (80051b8 <tp_recv_handler+0x2b0>)
 800501c:	705a      	strb	r2, [r3, #1]
      resp_len = 2;
 800501e:	2302      	movs	r3, #2
 8005020:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }
    break;
 8005022:	e0c1      	b.n	80051a8 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 8005024:	4b64      	ldr	r3, [pc, #400]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005026:	227f      	movs	r2, #127	@ 0x7f
 8005028:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 800502a:	2301      	movs	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
    break;
 800502e:	e0bb      	b.n	80051a8 <tp_recv_handler+0x2a0>
  case ROUTINE_CTL_SID:
    if (data[1] == 0xFE && data[2] == 0xF2) {
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	3301      	adds	r3, #1
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2bfe      	cmp	r3, #254	@ 0xfe
 8005038:	d133      	bne.n	80050a2 <tp_recv_handler+0x19a>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3302      	adds	r3, #2
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	2bf2      	cmp	r3, #242	@ 0xf2
 8005042:	d12e      	bne.n	80050a2 <tp_recv_handler+0x19a>
      ret = Check_Memory_Handler(&resp);
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fc91 	bl	8004970 <Check_Memory_Handler>
 800504e:	4603      	mov	r3, r0
 8005050:	76fb      	strb	r3, [r7, #27]
      if (ret == POSITIVE_RESPONE) {
 8005052:	7efb      	ldrb	r3, [r7, #27]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d11e      	bne.n	8005096 <tp_recv_handler+0x18e>
    	  srv_payload[0] = ROUTINE_CTL_SID + 0x40;
 8005058:	4b57      	ldr	r3, [pc, #348]	@ (80051b8 <tp_recv_handler+0x2b0>)
 800505a:	2271      	movs	r2, #113	@ 0x71
 800505c:	701a      	strb	r2, [r3, #0]
        srv_payload[1] = 0xFE;
 800505e:	4b56      	ldr	r3, [pc, #344]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005060:	22fe      	movs	r2, #254	@ 0xfe
 8005062:	705a      	strb	r2, [r3, #1]
        srv_payload[2] = 0xF2;
 8005064:	4b54      	ldr	r3, [pc, #336]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005066:	22f2      	movs	r2, #242	@ 0xf2
 8005068:	709a      	strb	r2, [r3, #2]
        srv_payload[3] = (resp >> 24) & 0xFF;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	b2da      	uxtb	r2, r3
 8005070:	4b51      	ldr	r3, [pc, #324]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005072:	70da      	strb	r2, [r3, #3]
        srv_payload[4] = (resp >> 16) & 0xFF;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	b2da      	uxtb	r2, r3
 800507a:	4b4f      	ldr	r3, [pc, #316]	@ (80051b8 <tp_recv_handler+0x2b0>)
 800507c:	711a      	strb	r2, [r3, #4]
        srv_payload[5] = (resp >> 8) & 0xFF;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	b2da      	uxtb	r2, r3
 8005084:	4b4c      	ldr	r3, [pc, #304]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005086:	715a      	strb	r2, [r3, #5]
        srv_payload[6] = resp & 0xFF;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	4b4a      	ldr	r3, [pc, #296]	@ (80051b8 <tp_recv_handler+0x2b0>)
 800508e:	719a      	strb	r2, [r3, #6]
        resp_len = 7;
 8005090:	2307      	movs	r3, #7
 8005092:	61fb      	str	r3, [r7, #28]
      if (ret == POSITIVE_RESPONE) {
 8005094:	e00b      	b.n	80050ae <tp_recv_handler+0x1a6>
      } else {
    	  srv_payload[0] = NEGATIVE_RESPONE;
 8005096:	4b48      	ldr	r3, [pc, #288]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005098:	227f      	movs	r2, #127	@ 0x7f
 800509a:	701a      	strb	r2, [r3, #0]
        resp_len = 1;
 800509c:	2301      	movs	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
      if (ret == POSITIVE_RESPONE) {
 80050a0:	e005      	b.n	80050ae <tp_recv_handler+0x1a6>
      }
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
 80050a2:	4b45      	ldr	r3, [pc, #276]	@ (80051b8 <tp_recv_handler+0x2b0>)
 80050a4:	227f      	movs	r2, #127	@ 0x7f
 80050a6:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 80050a8:	2301      	movs	r3, #1
 80050aa:	61fb      	str	r3, [r7, #28]
    }
    break;
 80050ac:	e07c      	b.n	80051a8 <tp_recv_handler+0x2a0>
 80050ae:	e07b      	b.n	80051a8 <tp_recv_handler+0x2a0>
  case REQUEST_DOWNLOAD_SID:

    ret = Request_Download_Handler(
      ((uint32_t)data[3] << 24 | (uint32_t)data[4] << 16) | (uint32_t)data[5] << 8 | (uint32_t)data[6],
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	3303      	adds	r3, #3
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	061a      	lsls	r2, r3, #24
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	3304      	adds	r3, #4
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	3305      	adds	r3, #5
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	021b      	lsls	r3, r3, #8
 80050ca:	4313      	orrs	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	3206      	adds	r2, #6
 80050d0:	7812      	ldrb	r2, [r2, #0]
    ret = Request_Download_Handler(
 80050d2:	ea43 0002 	orr.w	r0, r3, r2
      ((uint32_t)data[7] << 24 | (uint32_t)data[8] << 16) | (uint32_t)data[9] << 8 | (uint32_t)data[10],
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	3307      	adds	r3, #7
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	061a      	lsls	r2, r3, #24
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	3308      	adds	r3, #8
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	431a      	orrs	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	3309      	adds	r3, #9
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	4313      	orrs	r3, r2
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	320a      	adds	r2, #10
 80050f6:	7812      	ldrb	r2, [r2, #0]
    ret = Request_Download_Handler(
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f107 0214 	add.w	r2, r7, #20
 80050fe:	4619      	mov	r1, r3
 8005100:	f7ff fc10 	bl	8004924 <Request_Download_Handler>
 8005104:	4603      	mov	r3, r0
 8005106:	76fb      	strb	r3, [r7, #27]
      &resp);
    if (ret == POSITIVE_RESPONE) {
 8005108:	7efb      	ldrb	r3, [r7, #27]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10e      	bne.n	800512c <tp_recv_handler+0x224>
    	srv_payload[0] = REQUEST_DOWNLOAD_SID + 0x40;
 800510e:	4b2a      	ldr	r3, [pc, #168]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005110:	2274      	movs	r2, #116	@ 0x74
 8005112:	701a      	strb	r2, [r3, #0]
      srv_payload[1] = (resp >> 8) & 0xFF;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4b27      	ldr	r3, [pc, #156]	@ (80051b8 <tp_recv_handler+0x2b0>)
 800511c:	705a      	strb	r2, [r3, #1]
      srv_payload[2] = resp & 0xFF;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	b2da      	uxtb	r2, r3
 8005122:	4b25      	ldr	r3, [pc, #148]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005124:	709a      	strb	r2, [r3, #2]
      resp_len = 3;
 8005126:	2303      	movs	r3, #3
 8005128:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }

    break;
 800512a:	e03d      	b.n	80051a8 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 800512c:	4b22      	ldr	r3, [pc, #136]	@ (80051b8 <tp_recv_handler+0x2b0>)
 800512e:	227f      	movs	r2, #127	@ 0x7f
 8005130:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 8005132:	2301      	movs	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
    break;
 8005136:	e037      	b.n	80051a8 <tp_recv_handler+0x2a0>
  case TRANSFER_DATA_SID:
    ret = Transfer_Data_Handler(data[1], data + 2, len - 2);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	3301      	adds	r3, #1
 800513c:	7818      	ldrb	r0, [r3, #0]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	1c99      	adds	r1, r3, #2
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	3b02      	subs	r3, #2
 8005146:	461a      	mov	r2, r3
 8005148:	f7ff fbf9 	bl	800493e <Transfer_Data_Handler>
 800514c:	4603      	mov	r3, r0
 800514e:	76fb      	strb	r3, [r7, #27]
    if (ret == POSITIVE_RESPONE) {
 8005150:	7efb      	ldrb	r3, [r7, #27]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <tp_recv_handler+0x264>
    	srv_payload[0] = TRANSFER_DATA_SID + 0x40;
 8005156:	4b18      	ldr	r3, [pc, #96]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005158:	2276      	movs	r2, #118	@ 0x76
 800515a:	701a      	strb	r2, [r3, #0]
      srv_payload[1] = data[1];
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	3301      	adds	r3, #1
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005164:	705a      	strb	r2, [r3, #1]
      resp_len = 2;
 8005166:	2302      	movs	r3, #2
 8005168:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }

    break;
 800516a:	e01d      	b.n	80051a8 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 800516c:	4b12      	ldr	r3, [pc, #72]	@ (80051b8 <tp_recv_handler+0x2b0>)
 800516e:	227f      	movs	r2, #127	@ 0x7f
 8005170:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 8005172:	2301      	movs	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
    break;
 8005176:	e017      	b.n	80051a8 <tp_recv_handler+0x2a0>
  case TRANSFER_EXIT_SID:
    ret = Transfer_Exit_Handler();
 8005178:	f7ff fbf3 	bl	8004962 <Transfer_Exit_Handler>
 800517c:	4603      	mov	r3, r0
 800517e:	76fb      	strb	r3, [r7, #27]
    if (ret == POSITIVE_RESPONE) {
 8005180:	7efb      	ldrb	r3, [r7, #27]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d105      	bne.n	8005192 <tp_recv_handler+0x28a>
    	srv_payload[0] = TRANSFER_EXIT_SID + 0x40;
 8005186:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005188:	2277      	movs	r2, #119	@ 0x77
 800518a:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 800518c:	2301      	movs	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
    } else {
    	srv_payload[0] = NEGATIVE_RESPONE;
      resp_len = 1;
    }
    break;
 8005190:	e00a      	b.n	80051a8 <tp_recv_handler+0x2a0>
    	srv_payload[0] = NEGATIVE_RESPONE;
 8005192:	4b09      	ldr	r3, [pc, #36]	@ (80051b8 <tp_recv_handler+0x2b0>)
 8005194:	227f      	movs	r2, #127	@ 0x7f
 8005196:	701a      	strb	r2, [r3, #0]
      resp_len = 1;
 8005198:	2301      	movs	r3, #1
 800519a:	61fb      	str	r3, [r7, #28]
    break;
 800519c:	e004      	b.n	80051a8 <tp_recv_handler+0x2a0>
  default:
	  srv_payload[0] = NEGATIVE_RESPONE;
 800519e:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <tp_recv_handler+0x2b0>)
 80051a0:	227f      	movs	r2, #127	@ 0x7f
 80051a2:	701a      	strb	r2, [r3, #0]
    resp_len = 1;
 80051a4:	2301      	movs	r3, #1
 80051a6:	61fb      	str	r3, [r7, #28]
  }
  send_isotp(srv_payload, resp_len);
 80051a8:	69f9      	ldr	r1, [r7, #28]
 80051aa:	4803      	ldr	r0, [pc, #12]	@ (80051b8 <tp_recv_handler+0x2b0>)
 80051ac:	f7ff fdaa 	bl	8004d04 <send_isotp>
}
 80051b0:	bf00      	nop
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000ab8 	.word	0x20000ab8

080051bc <UDS_Srv_Init>:

void UDS_Srv_Init() {
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  srv_link.recv_cb = tp_recv_handler;
 80051c0:	4b09      	ldr	r3, [pc, #36]	@ (80051e8 <UDS_Srv_Init+0x2c>)
 80051c2:	4a0a      	ldr	r2, [pc, #40]	@ (80051ec <UDS_Srv_Init+0x30>)
 80051c4:	619a      	str	r2, [r3, #24]
  srv_link.rx_buff = srv_payload;
 80051c6:	4b08      	ldr	r3, [pc, #32]	@ (80051e8 <UDS_Srv_Init+0x2c>)
 80051c8:	4a09      	ldr	r2, [pc, #36]	@ (80051f0 <UDS_Srv_Init+0x34>)
 80051ca:	609a      	str	r2, [r3, #8]
  srv_link.rx_addr = UDS_SOURCE_ADDR;
 80051cc:	4b06      	ldr	r3, [pc, #24]	@ (80051e8 <UDS_Srv_Init+0x2c>)
 80051ce:	f240 7219 	movw	r2, #1817	@ 0x719
 80051d2:	601a      	str	r2, [r3, #0]
  srv_link.tx_addr = UDS_TARGET_ADDR;
 80051d4:	4b04      	ldr	r3, [pc, #16]	@ (80051e8 <UDS_Srv_Init+0x2c>)
 80051d6:	f240 7291 	movw	r2, #1937	@ 0x791
 80051da:	605a      	str	r2, [r3, #4]
  set_isotp_link(&srv_link);
 80051dc:	4802      	ldr	r0, [pc, #8]	@ (80051e8 <UDS_Srv_Init+0x2c>)
 80051de:	f7ff fc89 	bl	8004af4 <set_isotp_link>
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000af8 	.word	0x20000af8
 80051ec:	08004f09 	.word	0x08004f09
 80051f0:	20000ab8 	.word	0x20000ab8

080051f4 <ota_init>:
    return (calculated_crc == expected_crc);
}


void ota_init()
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
//	{
//		HAL_UART_Transmit(&huart2, "Boot End\r\n", sizeof("Boot End\r\n"), 1000);
//		HAL_Delay(100);
//		goto_application();
//	}
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <ota_flashing_begin>:


void ota_flashing_begin(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	ota_flashing_state = FLASHING_REQUESTED;
 8005204:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <ota_flashing_begin+0x34>)
 8005206:	2201      	movs	r2, #1
 8005208:	701a      	strb	r2, [r3, #0]

	HAL_FLASH_Unlock();
 800520a:	f7fc fd35 	bl	8001c78 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 800520e:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <ota_flashing_begin+0x38>)
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks 		= FLASH_BANK_1;
 8005214:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <ota_flashing_begin+0x38>)
 8005216:	2201      	movs	r2, #1
 8005218:	605a      	str	r2, [r3, #4]
	EraseInitStruct.PageAddress	= APPPLICATION_START_ADDR;
 800521a:	4b07      	ldr	r3, [pc, #28]	@ (8005238 <ota_flashing_begin+0x38>)
 800521c:	4a07      	ldr	r2, [pc, #28]	@ (800523c <ota_flashing_begin+0x3c>)
 800521e:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages		= APPPLICATION_SIZE / 1024;
 8005220:	4b05      	ldr	r3, [pc, #20]	@ (8005238 <ota_flashing_begin+0x38>)
 8005222:	2228      	movs	r2, #40	@ 0x28
 8005224:	60da      	str	r2, [r3, #12]
	HAL_FLASHEx_Erase( &EraseInitStruct, &PageError );
 8005226:	4906      	ldr	r1, [pc, #24]	@ (8005240 <ota_flashing_begin+0x40>)
 8005228:	4803      	ldr	r0, [pc, #12]	@ (8005238 <ota_flashing_begin+0x38>)
 800522a:	f7fc fe0d 	bl	8001e48 <HAL_FLASHEx_Erase>
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000b14 	.word	0x20000b14
 8005238:	20000b1c 	.word	0x20000b1c
 800523c:	08006000 	.word	0x08006000
 8005240:	20000b2c 	.word	0x20000b2c

08005244 <ota_flashing_inprogress>:


void ota_flashing_inprogress(uint32_t data)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b08d      	sub	sp, #52	@ 0x34
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
	if (ota_flashing_state == FLASHING_REQUESTED)
 800524c:	4926      	ldr	r1, [pc, #152]	@ (80052e8 <ota_flashing_inprogress+0xa4>)
 800524e:	7809      	ldrb	r1, [r1, #0]
 8005250:	2901      	cmp	r1, #1
 8005252:	d102      	bne.n	800525a <ota_flashing_inprogress+0x16>
	{
		ota_flashing_state = FLASHING_INPROGRESS;
 8005254:	4924      	ldr	r1, [pc, #144]	@ (80052e8 <ota_flashing_inprogress+0xa4>)
 8005256:	2002      	movs	r0, #2
 8005258:	7008      	strb	r0, [r1, #0]
	}

	if (ota_flashing_state == FLASHING_INPROGRESS)
 800525a:	4923      	ldr	r1, [pc, #140]	@ (80052e8 <ota_flashing_inprogress+0xa4>)
 800525c:	7809      	ldrb	r1, [r1, #0]
 800525e:	2902      	cmp	r1, #2
 8005260:	d13d      	bne.n	80052de <ota_flashing_inprogress+0x9a>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, APPPLICATION_START_ADDR + addr_index, data);
 8005262:	4922      	ldr	r1, [pc, #136]	@ (80052ec <ota_flashing_inprogress+0xa8>)
 8005264:	6809      	ldr	r1, [r1, #0]
 8005266:	f101 6100 	add.w	r1, r1, #134217728	@ 0x8000000
 800526a:	f501 41c0 	add.w	r1, r1, #24576	@ 0x6000
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	2400      	movs	r4, #0
 8005272:	4602      	mov	r2, r0
 8005274:	4623      	mov	r3, r4
 8005276:	2002      	movs	r0, #2
 8005278:	f7fc fc8e 	bl	8001b98 <HAL_FLASH_Program>
		addr_index += 4;
 800527c:	4b1b      	ldr	r3, [pc, #108]	@ (80052ec <ota_flashing_inprogress+0xa8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3304      	adds	r3, #4
 8005282:	4a1a      	ldr	r2, [pc, #104]	@ (80052ec <ota_flashing_inprogress+0xa8>)
 8005284:	6013      	str	r3, [r2, #0]

		static uint32_t counter = 0;
		counter++;
 8005286:	4b1a      	ldr	r3, [pc, #104]	@ (80052f0 <ota_flashing_inprogress+0xac>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3301      	adds	r3, #1
 800528c:	4a18      	ldr	r2, [pc, #96]	@ (80052f0 <ota_flashing_inprogress+0xac>)
 800528e:	6013      	str	r3, [r2, #0]
		uint8_t uart_data[30] = {0};
 8005290:	2300      	movs	r3, #0
 8005292:	60bb      	str	r3, [r7, #8]
 8005294:	f107 030c 	add.w	r3, r7, #12
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]
 80052a4:	615a      	str	r2, [r3, #20]
 80052a6:	831a      	strh	r2, [r3, #24]
		sprintf((char*)uart_data, "SID 0x36 %02x %02x %02x %02x\r\n", (data>>24)&255, (data>>16)&255, (data>>8)&255, (data>>0)&255);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	0e19      	lsrs	r1, r3, #24
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	b2dc      	uxtb	r4, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	0a1b      	lsrs	r3, r3, #8
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	f107 0008 	add.w	r0, r7, #8
 80052c0:	9201      	str	r2, [sp, #4]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	4623      	mov	r3, r4
 80052c6:	460a      	mov	r2, r1
 80052c8:	490a      	ldr	r1, [pc, #40]	@ (80052f4 <ota_flashing_inprogress+0xb0>)
 80052ca:	f000 f909 	bl	80054e0 <siprintf>
		HAL_UART_Transmit(&huart2, uart_data, sizeof(uart_data), 1000);
 80052ce:	f107 0108 	add.w	r1, r7, #8
 80052d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052d6:	221e      	movs	r2, #30
 80052d8:	4807      	ldr	r0, [pc, #28]	@ (80052f8 <ota_flashing_inprogress+0xb4>)
 80052da:	f7fe fd38 	bl	8003d4e <HAL_UART_Transmit>
	}
}
 80052de:	bf00      	nop
 80052e0:	372c      	adds	r7, #44	@ 0x2c
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd90      	pop	{r4, r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20000b14 	.word	0x20000b14
 80052ec:	20000b18 	.word	0x20000b18
 80052f0:	20000b30 	.word	0x20000b30
 80052f4:	08005e64 	.word	0x08005e64
 80052f8:	20000134 	.word	0x20000134

080052fc <ota_flashing_end>:


void ota_flashing_end(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 8005300:	f7fc fce0 	bl	8001cc4 <HAL_FLASH_Lock>
	ota_flashing_state = FLASHING_IDLE;
 8005304:	4b03      	ldr	r3, [pc, #12]	@ (8005314 <ota_flashing_end+0x18>)
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_SystemReset();
 800530a:	f7fc fb82 	bl	8001a12 <HAL_NVIC_SystemReset>
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000b14 	.word	0x20000b14

08005318 <buffer_rotate>:
 * [ ] [x] [x] [x]
 *
 */

static uint16_t buffer_rotate(uint16_t point, uint16_t max)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	4603      	mov	r3, r0
 8005320:	460a      	mov	r2, r1
 8005322:	80fb      	strh	r3, [r7, #6]
 8005324:	4613      	mov	r3, r2
 8005326:	80bb      	strh	r3, [r7, #4]
  uint16_t ret = point + 1;
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	3301      	adds	r3, #1
 800532c:	81fb      	strh	r3, [r7, #14]
  if (ret == max)
 800532e:	89fa      	ldrh	r2, [r7, #14]
 8005330:	88bb      	ldrh	r3, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d101      	bne.n	800533a <buffer_rotate+0x22>
    ret = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	81fb      	strh	r3, [r7, #14]
  return ret;
 800533a:	89fb      	ldrh	r3, [r7, #14]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <init_buffer>:

void init_buffer(buff_handler_t handler, void *buff, uint16_t size)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
  handler->buff = buff;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	601a      	str	r2, [r3, #0]
  handler->buff_size = size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	88fa      	ldrh	r2, [r7, #6]
 800535e:	811a      	strh	r2, [r3, #8]
  handler->head = 0u;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	809a      	strh	r2, [r3, #4]
  handler->tail = 0u;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	80da      	strh	r2, [r3, #6]
}
 800536c:	bf00      	nop
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <buffer_available>:

int32_t buffer_available(const buff_handler_t handler)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  return (handler->head == handler->tail) ? -1 : 0;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	889a      	ldrh	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	88db      	ldrh	r3, [r3, #6]
 8005386:	429a      	cmp	r2, r3
 8005388:	d102      	bne.n	8005390 <buffer_available+0x1a>
 800538a:	f04f 33ff 	mov.w	r3, #4294967295
 800538e:	e000      	b.n	8005392 <buffer_available+0x1c>
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <buffer_front>:

message_t buffer_front(buff_handler_t handler, uint16_t msg_size)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	807b      	strh	r3, [r7, #2]
  message_t ret = NULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	60fb      	str	r3, [r7, #12]
  if (buffer_available(handler) != -1)
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff ffe2 	bl	8005376 <buffer_available>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d009      	beq.n	80053ce <buffer_front+0x32>
  {
    ret = handler->buff + handler->head * msg_size;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	8892      	ldrh	r2, [r2, #4]
 80053c2:	4611      	mov	r1, r2
 80053c4:	887a      	ldrh	r2, [r7, #2]
 80053c6:	fb01 f202 	mul.w	r2, r1, r2
 80053ca:	4413      	add	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80053ce:	68fb      	ldr	r3, [r7, #12]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <buffer_push>:

int32_t buffer_push(buff_handler_t handler, message_t msg, uint16_t msg_size)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  if (buffer_rotate(handler->tail, handler->buff_size) != handler->head)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	88da      	ldrh	r2, [r3, #6]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	891b      	ldrh	r3, [r3, #8]
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f7ff ff91 	bl	8005318 <buffer_rotate>
 80053f6:	4603      	mov	r3, r0
 80053f8:	461a      	mov	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	889b      	ldrh	r3, [r3, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d01b      	beq.n	800543a <buffer_push+0x62>
  {
    us_memcpy(handler->buff + handler->tail * msg_size, msg, msg_size);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	88d2      	ldrh	r2, [r2, #6]
 800540a:	4611      	mov	r1, r2
 800540c:	88fa      	ldrh	r2, [r7, #6]
 800540e:	fb01 f202 	mul.w	r2, r1, r2
 8005412:	4413      	add	r3, r2
 8005414:	88fa      	ldrh	r2, [r7, #6]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f833 	bl	8005484 <us_memcpy>
    handler->tail = buffer_rotate(handler->tail, handler->buff_size);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	88da      	ldrh	r2, [r3, #6]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	891b      	ldrh	r3, [r3, #8]
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f7ff ff75 	bl	8005318 <buffer_rotate>
 800542e:	4603      	mov	r3, r0
 8005430:	461a      	mov	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	80da      	strh	r2, [r3, #6]
    return 0;
 8005436:	2300      	movs	r3, #0
 8005438:	e001      	b.n	800543e <buffer_push+0x66>
  }
  return -1;
 800543a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <buffer_pop>:

int32_t buffer_pop(buff_handler_t handler)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  if (buffer_available(handler) != -1)
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff ff91 	bl	8005376 <buffer_available>
 8005454:	4603      	mov	r3, r0
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d00d      	beq.n	8005478 <buffer_pop+0x32>
  {
    handler->head = buffer_rotate(handler->head, handler->buff_size);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	889a      	ldrh	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	891b      	ldrh	r3, [r3, #8]
 8005464:	4619      	mov	r1, r3
 8005466:	4610      	mov	r0, r2
 8005468:	f7ff ff56 	bl	8005318 <buffer_rotate>
 800546c:	4603      	mov	r3, r0
 800546e:	461a      	mov	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	809a      	strh	r2, [r3, #4]
    return 0;
 8005474:	2300      	movs	r3, #0
 8005476:	e001      	b.n	800547c <buffer_pop+0x36>
  }
  return -1;
 8005478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <us_memcpy>:
 */

#include "us_memcpy.h"

void us_memcpy(void *dst, const void *src, uint32_t size)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  // Copy longwords, taking advantage of STM ability to read/write unaligned data
  while (size >= 4)
 8005490:	e00c      	b.n	80054ac <us_memcpy+0x28>
  {
    *(uint32_t *)dst = *(
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	601a      	str	r2, [r3, #0]
        const uint32_t *)src;
    dst = (uint8_t *)dst + 4;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3304      	adds	r3, #4
 800549e:	60fb      	str	r3, [r7, #12]
    src = (const uint8_t *)src + 4;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	3304      	adds	r3, #4
 80054a4:	60bb      	str	r3, [r7, #8]
    size -= 4;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	3b04      	subs	r3, #4
 80054aa:	607b      	str	r3, [r7, #4]
  while (size >= 4)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d8ef      	bhi.n	8005492 <us_memcpy+0xe>
  }
  // Copy the couple of leftover bytes
  while (size--)
 80054b2:	e009      	b.n	80054c8 <us_memcpy+0x44>
  {
    *(uint8_t *)dst = *(
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	701a      	strb	r2, [r3, #0]
        const uint8_t *)src;
    dst = (uint8_t *)dst + 1;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
    src = (const uint8_t *)src + 1;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	3301      	adds	r3, #1
 80054c6:	60bb      	str	r3, [r7, #8]
  while (size--)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	1e5a      	subs	r2, r3, #1
 80054cc:	607a      	str	r2, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <us_memcpy+0x30>
  }
}
 80054d2:	bf00      	nop
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr
	...

080054e0 <siprintf>:
 80054e0:	b40e      	push	{r1, r2, r3}
 80054e2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054e6:	b500      	push	{lr}
 80054e8:	b09c      	sub	sp, #112	@ 0x70
 80054ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80054ec:	9002      	str	r0, [sp, #8]
 80054ee:	9006      	str	r0, [sp, #24]
 80054f0:	9107      	str	r1, [sp, #28]
 80054f2:	9104      	str	r1, [sp, #16]
 80054f4:	4808      	ldr	r0, [pc, #32]	@ (8005518 <siprintf+0x38>)
 80054f6:	4909      	ldr	r1, [pc, #36]	@ (800551c <siprintf+0x3c>)
 80054f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054fc:	9105      	str	r1, [sp, #20]
 80054fe:	6800      	ldr	r0, [r0, #0]
 8005500:	a902      	add	r1, sp, #8
 8005502:	9301      	str	r3, [sp, #4]
 8005504:	f000 f9a0 	bl	8005848 <_svfiprintf_r>
 8005508:	2200      	movs	r2, #0
 800550a:	9b02      	ldr	r3, [sp, #8]
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	b01c      	add	sp, #112	@ 0x70
 8005510:	f85d eb04 	ldr.w	lr, [sp], #4
 8005514:	b003      	add	sp, #12
 8005516:	4770      	bx	lr
 8005518:	20000010 	.word	0x20000010
 800551c:	ffff0208 	.word	0xffff0208

08005520 <memset>:
 8005520:	4603      	mov	r3, r0
 8005522:	4402      	add	r2, r0
 8005524:	4293      	cmp	r3, r2
 8005526:	d100      	bne.n	800552a <memset+0xa>
 8005528:	4770      	bx	lr
 800552a:	f803 1b01 	strb.w	r1, [r3], #1
 800552e:	e7f9      	b.n	8005524 <memset+0x4>

08005530 <__errno>:
 8005530:	4b01      	ldr	r3, [pc, #4]	@ (8005538 <__errno+0x8>)
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000010 	.word	0x20000010

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	2600      	movs	r6, #0
 8005540:	4d0c      	ldr	r5, [pc, #48]	@ (8005574 <__libc_init_array+0x38>)
 8005542:	4c0d      	ldr	r4, [pc, #52]	@ (8005578 <__libc_init_array+0x3c>)
 8005544:	1b64      	subs	r4, r4, r5
 8005546:	10a4      	asrs	r4, r4, #2
 8005548:	42a6      	cmp	r6, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	f000 fc78 	bl	8005e40 <_init>
 8005550:	2600      	movs	r6, #0
 8005552:	4d0a      	ldr	r5, [pc, #40]	@ (800557c <__libc_init_array+0x40>)
 8005554:	4c0a      	ldr	r4, [pc, #40]	@ (8005580 <__libc_init_array+0x44>)
 8005556:	1b64      	subs	r4, r4, r5
 8005558:	10a4      	asrs	r4, r4, #2
 800555a:	42a6      	cmp	r6, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f855 3b04 	ldr.w	r3, [r5], #4
 8005564:	4798      	blx	r3
 8005566:	3601      	adds	r6, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f855 3b04 	ldr.w	r3, [r5], #4
 800556e:	4798      	blx	r3
 8005570:	3601      	adds	r6, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	08005ee4 	.word	0x08005ee4
 8005578:	08005ee4 	.word	0x08005ee4
 800557c:	08005ee4 	.word	0x08005ee4
 8005580:	08005ee8 	.word	0x08005ee8

08005584 <__retarget_lock_acquire_recursive>:
 8005584:	4770      	bx	lr

08005586 <__retarget_lock_release_recursive>:
 8005586:	4770      	bx	lr

08005588 <memcpy>:
 8005588:	440a      	add	r2, r1
 800558a:	4291      	cmp	r1, r2
 800558c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005590:	d100      	bne.n	8005594 <memcpy+0xc>
 8005592:	4770      	bx	lr
 8005594:	b510      	push	{r4, lr}
 8005596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800559a:	4291      	cmp	r1, r2
 800559c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a0:	d1f9      	bne.n	8005596 <memcpy+0xe>
 80055a2:	bd10      	pop	{r4, pc}

080055a4 <_free_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4605      	mov	r5, r0
 80055a8:	2900      	cmp	r1, #0
 80055aa:	d040      	beq.n	800562e <_free_r+0x8a>
 80055ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b0:	1f0c      	subs	r4, r1, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bfb8      	it	lt
 80055b6:	18e4      	addlt	r4, r4, r3
 80055b8:	f000 f8de 	bl	8005778 <__malloc_lock>
 80055bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005630 <_free_r+0x8c>)
 80055be:	6813      	ldr	r3, [r2, #0]
 80055c0:	b933      	cbnz	r3, 80055d0 <_free_r+0x2c>
 80055c2:	6063      	str	r3, [r4, #4]
 80055c4:	6014      	str	r4, [r2, #0]
 80055c6:	4628      	mov	r0, r5
 80055c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055cc:	f000 b8da 	b.w	8005784 <__malloc_unlock>
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	d908      	bls.n	80055e6 <_free_r+0x42>
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	1821      	adds	r1, r4, r0
 80055d8:	428b      	cmp	r3, r1
 80055da:	bf01      	itttt	eq
 80055dc:	6819      	ldreq	r1, [r3, #0]
 80055de:	685b      	ldreq	r3, [r3, #4]
 80055e0:	1809      	addeq	r1, r1, r0
 80055e2:	6021      	streq	r1, [r4, #0]
 80055e4:	e7ed      	b.n	80055c2 <_free_r+0x1e>
 80055e6:	461a      	mov	r2, r3
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b10b      	cbz	r3, 80055f0 <_free_r+0x4c>
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	d9fa      	bls.n	80055e6 <_free_r+0x42>
 80055f0:	6811      	ldr	r1, [r2, #0]
 80055f2:	1850      	adds	r0, r2, r1
 80055f4:	42a0      	cmp	r0, r4
 80055f6:	d10b      	bne.n	8005610 <_free_r+0x6c>
 80055f8:	6820      	ldr	r0, [r4, #0]
 80055fa:	4401      	add	r1, r0
 80055fc:	1850      	adds	r0, r2, r1
 80055fe:	4283      	cmp	r3, r0
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	d1e0      	bne.n	80055c6 <_free_r+0x22>
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4408      	add	r0, r1
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	6053      	str	r3, [r2, #4]
 800560e:	e7da      	b.n	80055c6 <_free_r+0x22>
 8005610:	d902      	bls.n	8005618 <_free_r+0x74>
 8005612:	230c      	movs	r3, #12
 8005614:	602b      	str	r3, [r5, #0]
 8005616:	e7d6      	b.n	80055c6 <_free_r+0x22>
 8005618:	6820      	ldr	r0, [r4, #0]
 800561a:	1821      	adds	r1, r4, r0
 800561c:	428b      	cmp	r3, r1
 800561e:	bf01      	itttt	eq
 8005620:	6819      	ldreq	r1, [r3, #0]
 8005622:	685b      	ldreq	r3, [r3, #4]
 8005624:	1809      	addeq	r1, r1, r0
 8005626:	6021      	streq	r1, [r4, #0]
 8005628:	6063      	str	r3, [r4, #4]
 800562a:	6054      	str	r4, [r2, #4]
 800562c:	e7cb      	b.n	80055c6 <_free_r+0x22>
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	20000c78 	.word	0x20000c78

08005634 <sbrk_aligned>:
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	4e0f      	ldr	r6, [pc, #60]	@ (8005674 <sbrk_aligned+0x40>)
 8005638:	460c      	mov	r4, r1
 800563a:	6831      	ldr	r1, [r6, #0]
 800563c:	4605      	mov	r5, r0
 800563e:	b911      	cbnz	r1, 8005646 <sbrk_aligned+0x12>
 8005640:	f000 fbaa 	bl	8005d98 <_sbrk_r>
 8005644:	6030      	str	r0, [r6, #0]
 8005646:	4621      	mov	r1, r4
 8005648:	4628      	mov	r0, r5
 800564a:	f000 fba5 	bl	8005d98 <_sbrk_r>
 800564e:	1c43      	adds	r3, r0, #1
 8005650:	d103      	bne.n	800565a <sbrk_aligned+0x26>
 8005652:	f04f 34ff 	mov.w	r4, #4294967295
 8005656:	4620      	mov	r0, r4
 8005658:	bd70      	pop	{r4, r5, r6, pc}
 800565a:	1cc4      	adds	r4, r0, #3
 800565c:	f024 0403 	bic.w	r4, r4, #3
 8005660:	42a0      	cmp	r0, r4
 8005662:	d0f8      	beq.n	8005656 <sbrk_aligned+0x22>
 8005664:	1a21      	subs	r1, r4, r0
 8005666:	4628      	mov	r0, r5
 8005668:	f000 fb96 	bl	8005d98 <_sbrk_r>
 800566c:	3001      	adds	r0, #1
 800566e:	d1f2      	bne.n	8005656 <sbrk_aligned+0x22>
 8005670:	e7ef      	b.n	8005652 <sbrk_aligned+0x1e>
 8005672:	bf00      	nop
 8005674:	20000c74 	.word	0x20000c74

08005678 <_malloc_r>:
 8005678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800567c:	1ccd      	adds	r5, r1, #3
 800567e:	f025 0503 	bic.w	r5, r5, #3
 8005682:	3508      	adds	r5, #8
 8005684:	2d0c      	cmp	r5, #12
 8005686:	bf38      	it	cc
 8005688:	250c      	movcc	r5, #12
 800568a:	2d00      	cmp	r5, #0
 800568c:	4606      	mov	r6, r0
 800568e:	db01      	blt.n	8005694 <_malloc_r+0x1c>
 8005690:	42a9      	cmp	r1, r5
 8005692:	d904      	bls.n	800569e <_malloc_r+0x26>
 8005694:	230c      	movs	r3, #12
 8005696:	6033      	str	r3, [r6, #0]
 8005698:	2000      	movs	r0, #0
 800569a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800569e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005774 <_malloc_r+0xfc>
 80056a2:	f000 f869 	bl	8005778 <__malloc_lock>
 80056a6:	f8d8 3000 	ldr.w	r3, [r8]
 80056aa:	461c      	mov	r4, r3
 80056ac:	bb44      	cbnz	r4, 8005700 <_malloc_r+0x88>
 80056ae:	4629      	mov	r1, r5
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7ff ffbf 	bl	8005634 <sbrk_aligned>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	4604      	mov	r4, r0
 80056ba:	d158      	bne.n	800576e <_malloc_r+0xf6>
 80056bc:	f8d8 4000 	ldr.w	r4, [r8]
 80056c0:	4627      	mov	r7, r4
 80056c2:	2f00      	cmp	r7, #0
 80056c4:	d143      	bne.n	800574e <_malloc_r+0xd6>
 80056c6:	2c00      	cmp	r4, #0
 80056c8:	d04b      	beq.n	8005762 <_malloc_r+0xea>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	4639      	mov	r1, r7
 80056ce:	4630      	mov	r0, r6
 80056d0:	eb04 0903 	add.w	r9, r4, r3
 80056d4:	f000 fb60 	bl	8005d98 <_sbrk_r>
 80056d8:	4581      	cmp	r9, r0
 80056da:	d142      	bne.n	8005762 <_malloc_r+0xea>
 80056dc:	6821      	ldr	r1, [r4, #0]
 80056de:	4630      	mov	r0, r6
 80056e0:	1a6d      	subs	r5, r5, r1
 80056e2:	4629      	mov	r1, r5
 80056e4:	f7ff ffa6 	bl	8005634 <sbrk_aligned>
 80056e8:	3001      	adds	r0, #1
 80056ea:	d03a      	beq.n	8005762 <_malloc_r+0xea>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	442b      	add	r3, r5
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	f8d8 3000 	ldr.w	r3, [r8]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	bb62      	cbnz	r2, 8005754 <_malloc_r+0xdc>
 80056fa:	f8c8 7000 	str.w	r7, [r8]
 80056fe:	e00f      	b.n	8005720 <_malloc_r+0xa8>
 8005700:	6822      	ldr	r2, [r4, #0]
 8005702:	1b52      	subs	r2, r2, r5
 8005704:	d420      	bmi.n	8005748 <_malloc_r+0xd0>
 8005706:	2a0b      	cmp	r2, #11
 8005708:	d917      	bls.n	800573a <_malloc_r+0xc2>
 800570a:	1961      	adds	r1, r4, r5
 800570c:	42a3      	cmp	r3, r4
 800570e:	6025      	str	r5, [r4, #0]
 8005710:	bf18      	it	ne
 8005712:	6059      	strne	r1, [r3, #4]
 8005714:	6863      	ldr	r3, [r4, #4]
 8005716:	bf08      	it	eq
 8005718:	f8c8 1000 	streq.w	r1, [r8]
 800571c:	5162      	str	r2, [r4, r5]
 800571e:	604b      	str	r3, [r1, #4]
 8005720:	4630      	mov	r0, r6
 8005722:	f000 f82f 	bl	8005784 <__malloc_unlock>
 8005726:	f104 000b 	add.w	r0, r4, #11
 800572a:	1d23      	adds	r3, r4, #4
 800572c:	f020 0007 	bic.w	r0, r0, #7
 8005730:	1ac2      	subs	r2, r0, r3
 8005732:	bf1c      	itt	ne
 8005734:	1a1b      	subne	r3, r3, r0
 8005736:	50a3      	strne	r3, [r4, r2]
 8005738:	e7af      	b.n	800569a <_malloc_r+0x22>
 800573a:	6862      	ldr	r2, [r4, #4]
 800573c:	42a3      	cmp	r3, r4
 800573e:	bf0c      	ite	eq
 8005740:	f8c8 2000 	streq.w	r2, [r8]
 8005744:	605a      	strne	r2, [r3, #4]
 8005746:	e7eb      	b.n	8005720 <_malloc_r+0xa8>
 8005748:	4623      	mov	r3, r4
 800574a:	6864      	ldr	r4, [r4, #4]
 800574c:	e7ae      	b.n	80056ac <_malloc_r+0x34>
 800574e:	463c      	mov	r4, r7
 8005750:	687f      	ldr	r7, [r7, #4]
 8005752:	e7b6      	b.n	80056c2 <_malloc_r+0x4a>
 8005754:	461a      	mov	r2, r3
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	42a3      	cmp	r3, r4
 800575a:	d1fb      	bne.n	8005754 <_malloc_r+0xdc>
 800575c:	2300      	movs	r3, #0
 800575e:	6053      	str	r3, [r2, #4]
 8005760:	e7de      	b.n	8005720 <_malloc_r+0xa8>
 8005762:	230c      	movs	r3, #12
 8005764:	4630      	mov	r0, r6
 8005766:	6033      	str	r3, [r6, #0]
 8005768:	f000 f80c 	bl	8005784 <__malloc_unlock>
 800576c:	e794      	b.n	8005698 <_malloc_r+0x20>
 800576e:	6005      	str	r5, [r0, #0]
 8005770:	e7d6      	b.n	8005720 <_malloc_r+0xa8>
 8005772:	bf00      	nop
 8005774:	20000c78 	.word	0x20000c78

08005778 <__malloc_lock>:
 8005778:	4801      	ldr	r0, [pc, #4]	@ (8005780 <__malloc_lock+0x8>)
 800577a:	f7ff bf03 	b.w	8005584 <__retarget_lock_acquire_recursive>
 800577e:	bf00      	nop
 8005780:	20000c70 	.word	0x20000c70

08005784 <__malloc_unlock>:
 8005784:	4801      	ldr	r0, [pc, #4]	@ (800578c <__malloc_unlock+0x8>)
 8005786:	f7ff befe 	b.w	8005586 <__retarget_lock_release_recursive>
 800578a:	bf00      	nop
 800578c:	20000c70 	.word	0x20000c70

08005790 <__ssputs_r>:
 8005790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005794:	461f      	mov	r7, r3
 8005796:	688e      	ldr	r6, [r1, #8]
 8005798:	4682      	mov	sl, r0
 800579a:	42be      	cmp	r6, r7
 800579c:	460c      	mov	r4, r1
 800579e:	4690      	mov	r8, r2
 80057a0:	680b      	ldr	r3, [r1, #0]
 80057a2:	d82d      	bhi.n	8005800 <__ssputs_r+0x70>
 80057a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057ac:	d026      	beq.n	80057fc <__ssputs_r+0x6c>
 80057ae:	6965      	ldr	r5, [r4, #20]
 80057b0:	6909      	ldr	r1, [r1, #16]
 80057b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057b6:	eba3 0901 	sub.w	r9, r3, r1
 80057ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057be:	1c7b      	adds	r3, r7, #1
 80057c0:	444b      	add	r3, r9
 80057c2:	106d      	asrs	r5, r5, #1
 80057c4:	429d      	cmp	r5, r3
 80057c6:	bf38      	it	cc
 80057c8:	461d      	movcc	r5, r3
 80057ca:	0553      	lsls	r3, r2, #21
 80057cc:	d527      	bpl.n	800581e <__ssputs_r+0x8e>
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7ff ff52 	bl	8005678 <_malloc_r>
 80057d4:	4606      	mov	r6, r0
 80057d6:	b360      	cbz	r0, 8005832 <__ssputs_r+0xa2>
 80057d8:	464a      	mov	r2, r9
 80057da:	6921      	ldr	r1, [r4, #16]
 80057dc:	f7ff fed4 	bl	8005588 <memcpy>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	6126      	str	r6, [r4, #16]
 80057ee:	444e      	add	r6, r9
 80057f0:	6026      	str	r6, [r4, #0]
 80057f2:	463e      	mov	r6, r7
 80057f4:	6165      	str	r5, [r4, #20]
 80057f6:	eba5 0509 	sub.w	r5, r5, r9
 80057fa:	60a5      	str	r5, [r4, #8]
 80057fc:	42be      	cmp	r6, r7
 80057fe:	d900      	bls.n	8005802 <__ssputs_r+0x72>
 8005800:	463e      	mov	r6, r7
 8005802:	4632      	mov	r2, r6
 8005804:	4641      	mov	r1, r8
 8005806:	6820      	ldr	r0, [r4, #0]
 8005808:	f000 faac 	bl	8005d64 <memmove>
 800580c:	2000      	movs	r0, #0
 800580e:	68a3      	ldr	r3, [r4, #8]
 8005810:	1b9b      	subs	r3, r3, r6
 8005812:	60a3      	str	r3, [r4, #8]
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	4433      	add	r3, r6
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581e:	462a      	mov	r2, r5
 8005820:	f000 fad8 	bl	8005dd4 <_realloc_r>
 8005824:	4606      	mov	r6, r0
 8005826:	2800      	cmp	r0, #0
 8005828:	d1e0      	bne.n	80057ec <__ssputs_r+0x5c>
 800582a:	4650      	mov	r0, sl
 800582c:	6921      	ldr	r1, [r4, #16]
 800582e:	f7ff feb9 	bl	80055a4 <_free_r>
 8005832:	230c      	movs	r3, #12
 8005834:	f8ca 3000 	str.w	r3, [sl]
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	f04f 30ff 	mov.w	r0, #4294967295
 800583e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	e7e9      	b.n	800581a <__ssputs_r+0x8a>
	...

08005848 <_svfiprintf_r>:
 8005848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584c:	4698      	mov	r8, r3
 800584e:	898b      	ldrh	r3, [r1, #12]
 8005850:	4607      	mov	r7, r0
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	460d      	mov	r5, r1
 8005856:	4614      	mov	r4, r2
 8005858:	b09d      	sub	sp, #116	@ 0x74
 800585a:	d510      	bpl.n	800587e <_svfiprintf_r+0x36>
 800585c:	690b      	ldr	r3, [r1, #16]
 800585e:	b973      	cbnz	r3, 800587e <_svfiprintf_r+0x36>
 8005860:	2140      	movs	r1, #64	@ 0x40
 8005862:	f7ff ff09 	bl	8005678 <_malloc_r>
 8005866:	6028      	str	r0, [r5, #0]
 8005868:	6128      	str	r0, [r5, #16]
 800586a:	b930      	cbnz	r0, 800587a <_svfiprintf_r+0x32>
 800586c:	230c      	movs	r3, #12
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	f04f 30ff 	mov.w	r0, #4294967295
 8005874:	b01d      	add	sp, #116	@ 0x74
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587a:	2340      	movs	r3, #64	@ 0x40
 800587c:	616b      	str	r3, [r5, #20]
 800587e:	2300      	movs	r3, #0
 8005880:	9309      	str	r3, [sp, #36]	@ 0x24
 8005882:	2320      	movs	r3, #32
 8005884:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005888:	2330      	movs	r3, #48	@ 0x30
 800588a:	f04f 0901 	mov.w	r9, #1
 800588e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005892:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005a2c <_svfiprintf_r+0x1e4>
 8005896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800589a:	4623      	mov	r3, r4
 800589c:	469a      	mov	sl, r3
 800589e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058a2:	b10a      	cbz	r2, 80058a8 <_svfiprintf_r+0x60>
 80058a4:	2a25      	cmp	r2, #37	@ 0x25
 80058a6:	d1f9      	bne.n	800589c <_svfiprintf_r+0x54>
 80058a8:	ebba 0b04 	subs.w	fp, sl, r4
 80058ac:	d00b      	beq.n	80058c6 <_svfiprintf_r+0x7e>
 80058ae:	465b      	mov	r3, fp
 80058b0:	4622      	mov	r2, r4
 80058b2:	4629      	mov	r1, r5
 80058b4:	4638      	mov	r0, r7
 80058b6:	f7ff ff6b 	bl	8005790 <__ssputs_r>
 80058ba:	3001      	adds	r0, #1
 80058bc:	f000 80a7 	beq.w	8005a0e <_svfiprintf_r+0x1c6>
 80058c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058c2:	445a      	add	r2, fp
 80058c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80058c6:	f89a 3000 	ldrb.w	r3, [sl]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 809f 	beq.w	8005a0e <_svfiprintf_r+0x1c6>
 80058d0:	2300      	movs	r3, #0
 80058d2:	f04f 32ff 	mov.w	r2, #4294967295
 80058d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058da:	f10a 0a01 	add.w	sl, sl, #1
 80058de:	9304      	str	r3, [sp, #16]
 80058e0:	9307      	str	r3, [sp, #28]
 80058e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80058e8:	4654      	mov	r4, sl
 80058ea:	2205      	movs	r2, #5
 80058ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058f0:	484e      	ldr	r0, [pc, #312]	@ (8005a2c <_svfiprintf_r+0x1e4>)
 80058f2:	f000 fa61 	bl	8005db8 <memchr>
 80058f6:	9a04      	ldr	r2, [sp, #16]
 80058f8:	b9d8      	cbnz	r0, 8005932 <_svfiprintf_r+0xea>
 80058fa:	06d0      	lsls	r0, r2, #27
 80058fc:	bf44      	itt	mi
 80058fe:	2320      	movmi	r3, #32
 8005900:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005904:	0711      	lsls	r1, r2, #28
 8005906:	bf44      	itt	mi
 8005908:	232b      	movmi	r3, #43	@ 0x2b
 800590a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800590e:	f89a 3000 	ldrb.w	r3, [sl]
 8005912:	2b2a      	cmp	r3, #42	@ 0x2a
 8005914:	d015      	beq.n	8005942 <_svfiprintf_r+0xfa>
 8005916:	4654      	mov	r4, sl
 8005918:	2000      	movs	r0, #0
 800591a:	f04f 0c0a 	mov.w	ip, #10
 800591e:	9a07      	ldr	r2, [sp, #28]
 8005920:	4621      	mov	r1, r4
 8005922:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005926:	3b30      	subs	r3, #48	@ 0x30
 8005928:	2b09      	cmp	r3, #9
 800592a:	d94b      	bls.n	80059c4 <_svfiprintf_r+0x17c>
 800592c:	b1b0      	cbz	r0, 800595c <_svfiprintf_r+0x114>
 800592e:	9207      	str	r2, [sp, #28]
 8005930:	e014      	b.n	800595c <_svfiprintf_r+0x114>
 8005932:	eba0 0308 	sub.w	r3, r0, r8
 8005936:	fa09 f303 	lsl.w	r3, r9, r3
 800593a:	4313      	orrs	r3, r2
 800593c:	46a2      	mov	sl, r4
 800593e:	9304      	str	r3, [sp, #16]
 8005940:	e7d2      	b.n	80058e8 <_svfiprintf_r+0xa0>
 8005942:	9b03      	ldr	r3, [sp, #12]
 8005944:	1d19      	adds	r1, r3, #4
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	9103      	str	r1, [sp, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	bfbb      	ittet	lt
 800594e:	425b      	neglt	r3, r3
 8005950:	f042 0202 	orrlt.w	r2, r2, #2
 8005954:	9307      	strge	r3, [sp, #28]
 8005956:	9307      	strlt	r3, [sp, #28]
 8005958:	bfb8      	it	lt
 800595a:	9204      	strlt	r2, [sp, #16]
 800595c:	7823      	ldrb	r3, [r4, #0]
 800595e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005960:	d10a      	bne.n	8005978 <_svfiprintf_r+0x130>
 8005962:	7863      	ldrb	r3, [r4, #1]
 8005964:	2b2a      	cmp	r3, #42	@ 0x2a
 8005966:	d132      	bne.n	80059ce <_svfiprintf_r+0x186>
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	3402      	adds	r4, #2
 800596c:	1d1a      	adds	r2, r3, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	9203      	str	r2, [sp, #12]
 8005972:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005976:	9305      	str	r3, [sp, #20]
 8005978:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005a30 <_svfiprintf_r+0x1e8>
 800597c:	2203      	movs	r2, #3
 800597e:	4650      	mov	r0, sl
 8005980:	7821      	ldrb	r1, [r4, #0]
 8005982:	f000 fa19 	bl	8005db8 <memchr>
 8005986:	b138      	cbz	r0, 8005998 <_svfiprintf_r+0x150>
 8005988:	2240      	movs	r2, #64	@ 0x40
 800598a:	9b04      	ldr	r3, [sp, #16]
 800598c:	eba0 000a 	sub.w	r0, r0, sl
 8005990:	4082      	lsls	r2, r0
 8005992:	4313      	orrs	r3, r2
 8005994:	3401      	adds	r4, #1
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800599c:	2206      	movs	r2, #6
 800599e:	4825      	ldr	r0, [pc, #148]	@ (8005a34 <_svfiprintf_r+0x1ec>)
 80059a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059a4:	f000 fa08 	bl	8005db8 <memchr>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d036      	beq.n	8005a1a <_svfiprintf_r+0x1d2>
 80059ac:	4b22      	ldr	r3, [pc, #136]	@ (8005a38 <_svfiprintf_r+0x1f0>)
 80059ae:	bb1b      	cbnz	r3, 80059f8 <_svfiprintf_r+0x1b0>
 80059b0:	9b03      	ldr	r3, [sp, #12]
 80059b2:	3307      	adds	r3, #7
 80059b4:	f023 0307 	bic.w	r3, r3, #7
 80059b8:	3308      	adds	r3, #8
 80059ba:	9303      	str	r3, [sp, #12]
 80059bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059be:	4433      	add	r3, r6
 80059c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c2:	e76a      	b.n	800589a <_svfiprintf_r+0x52>
 80059c4:	460c      	mov	r4, r1
 80059c6:	2001      	movs	r0, #1
 80059c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059cc:	e7a8      	b.n	8005920 <_svfiprintf_r+0xd8>
 80059ce:	2300      	movs	r3, #0
 80059d0:	f04f 0c0a 	mov.w	ip, #10
 80059d4:	4619      	mov	r1, r3
 80059d6:	3401      	adds	r4, #1
 80059d8:	9305      	str	r3, [sp, #20]
 80059da:	4620      	mov	r0, r4
 80059dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059e0:	3a30      	subs	r2, #48	@ 0x30
 80059e2:	2a09      	cmp	r2, #9
 80059e4:	d903      	bls.n	80059ee <_svfiprintf_r+0x1a6>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0c6      	beq.n	8005978 <_svfiprintf_r+0x130>
 80059ea:	9105      	str	r1, [sp, #20]
 80059ec:	e7c4      	b.n	8005978 <_svfiprintf_r+0x130>
 80059ee:	4604      	mov	r4, r0
 80059f0:	2301      	movs	r3, #1
 80059f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80059f6:	e7f0      	b.n	80059da <_svfiprintf_r+0x192>
 80059f8:	ab03      	add	r3, sp, #12
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	462a      	mov	r2, r5
 80059fe:	4638      	mov	r0, r7
 8005a00:	4b0e      	ldr	r3, [pc, #56]	@ (8005a3c <_svfiprintf_r+0x1f4>)
 8005a02:	a904      	add	r1, sp, #16
 8005a04:	f3af 8000 	nop.w
 8005a08:	1c42      	adds	r2, r0, #1
 8005a0a:	4606      	mov	r6, r0
 8005a0c:	d1d6      	bne.n	80059bc <_svfiprintf_r+0x174>
 8005a0e:	89ab      	ldrh	r3, [r5, #12]
 8005a10:	065b      	lsls	r3, r3, #25
 8005a12:	f53f af2d 	bmi.w	8005870 <_svfiprintf_r+0x28>
 8005a16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a18:	e72c      	b.n	8005874 <_svfiprintf_r+0x2c>
 8005a1a:	ab03      	add	r3, sp, #12
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	462a      	mov	r2, r5
 8005a20:	4638      	mov	r0, r7
 8005a22:	4b06      	ldr	r3, [pc, #24]	@ (8005a3c <_svfiprintf_r+0x1f4>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	f000 f87d 	bl	8005b24 <_printf_i>
 8005a2a:	e7ed      	b.n	8005a08 <_svfiprintf_r+0x1c0>
 8005a2c:	08005eae 	.word	0x08005eae
 8005a30:	08005eb4 	.word	0x08005eb4
 8005a34:	08005eb8 	.word	0x08005eb8
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	08005791 	.word	0x08005791

08005a40 <_printf_common>:
 8005a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	4616      	mov	r6, r2
 8005a46:	4698      	mov	r8, r3
 8005a48:	688a      	ldr	r2, [r1, #8]
 8005a4a:	690b      	ldr	r3, [r1, #16]
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	bfb8      	it	lt
 8005a52:	4613      	movlt	r3, r2
 8005a54:	6033      	str	r3, [r6, #0]
 8005a56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a60:	b10a      	cbz	r2, 8005a66 <_printf_common+0x26>
 8005a62:	3301      	adds	r3, #1
 8005a64:	6033      	str	r3, [r6, #0]
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	0699      	lsls	r1, r3, #26
 8005a6a:	bf42      	ittt	mi
 8005a6c:	6833      	ldrmi	r3, [r6, #0]
 8005a6e:	3302      	addmi	r3, #2
 8005a70:	6033      	strmi	r3, [r6, #0]
 8005a72:	6825      	ldr	r5, [r4, #0]
 8005a74:	f015 0506 	ands.w	r5, r5, #6
 8005a78:	d106      	bne.n	8005a88 <_printf_common+0x48>
 8005a7a:	f104 0a19 	add.w	sl, r4, #25
 8005a7e:	68e3      	ldr	r3, [r4, #12]
 8005a80:	6832      	ldr	r2, [r6, #0]
 8005a82:	1a9b      	subs	r3, r3, r2
 8005a84:	42ab      	cmp	r3, r5
 8005a86:	dc2b      	bgt.n	8005ae0 <_printf_common+0xa0>
 8005a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a8c:	6822      	ldr	r2, [r4, #0]
 8005a8e:	3b00      	subs	r3, #0
 8005a90:	bf18      	it	ne
 8005a92:	2301      	movne	r3, #1
 8005a94:	0692      	lsls	r2, r2, #26
 8005a96:	d430      	bmi.n	8005afa <_printf_common+0xba>
 8005a98:	4641      	mov	r1, r8
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aa0:	47c8      	blx	r9
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d023      	beq.n	8005aee <_printf_common+0xae>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	6922      	ldr	r2, [r4, #16]
 8005aaa:	f003 0306 	and.w	r3, r3, #6
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	bf14      	ite	ne
 8005ab2:	2500      	movne	r5, #0
 8005ab4:	6833      	ldreq	r3, [r6, #0]
 8005ab6:	f04f 0600 	mov.w	r6, #0
 8005aba:	bf08      	it	eq
 8005abc:	68e5      	ldreq	r5, [r4, #12]
 8005abe:	f104 041a 	add.w	r4, r4, #26
 8005ac2:	bf08      	it	eq
 8005ac4:	1aed      	subeq	r5, r5, r3
 8005ac6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005aca:	bf08      	it	eq
 8005acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	bfc4      	itt	gt
 8005ad4:	1a9b      	subgt	r3, r3, r2
 8005ad6:	18ed      	addgt	r5, r5, r3
 8005ad8:	42b5      	cmp	r5, r6
 8005ada:	d11a      	bne.n	8005b12 <_printf_common+0xd2>
 8005adc:	2000      	movs	r0, #0
 8005ade:	e008      	b.n	8005af2 <_printf_common+0xb2>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	4652      	mov	r2, sl
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	47c8      	blx	r9
 8005aea:	3001      	adds	r0, #1
 8005aec:	d103      	bne.n	8005af6 <_printf_common+0xb6>
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295
 8005af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af6:	3501      	adds	r5, #1
 8005af8:	e7c1      	b.n	8005a7e <_printf_common+0x3e>
 8005afa:	2030      	movs	r0, #48	@ 0x30
 8005afc:	18e1      	adds	r1, r4, r3
 8005afe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b08:	4422      	add	r2, r4
 8005b0a:	3302      	adds	r3, #2
 8005b0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b10:	e7c2      	b.n	8005a98 <_printf_common+0x58>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4622      	mov	r2, r4
 8005b16:	4641      	mov	r1, r8
 8005b18:	4638      	mov	r0, r7
 8005b1a:	47c8      	blx	r9
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d0e6      	beq.n	8005aee <_printf_common+0xae>
 8005b20:	3601      	adds	r6, #1
 8005b22:	e7d9      	b.n	8005ad8 <_printf_common+0x98>

08005b24 <_printf_i>:
 8005b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b28:	7e0f      	ldrb	r7, [r1, #24]
 8005b2a:	4691      	mov	r9, r2
 8005b2c:	2f78      	cmp	r7, #120	@ 0x78
 8005b2e:	4680      	mov	r8, r0
 8005b30:	460c      	mov	r4, r1
 8005b32:	469a      	mov	sl, r3
 8005b34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b3a:	d807      	bhi.n	8005b4c <_printf_i+0x28>
 8005b3c:	2f62      	cmp	r7, #98	@ 0x62
 8005b3e:	d80a      	bhi.n	8005b56 <_printf_i+0x32>
 8005b40:	2f00      	cmp	r7, #0
 8005b42:	f000 80d3 	beq.w	8005cec <_printf_i+0x1c8>
 8005b46:	2f58      	cmp	r7, #88	@ 0x58
 8005b48:	f000 80ba 	beq.w	8005cc0 <_printf_i+0x19c>
 8005b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b54:	e03a      	b.n	8005bcc <_printf_i+0xa8>
 8005b56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b5a:	2b15      	cmp	r3, #21
 8005b5c:	d8f6      	bhi.n	8005b4c <_printf_i+0x28>
 8005b5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b64 <_printf_i+0x40>)
 8005b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b64:	08005bbd 	.word	0x08005bbd
 8005b68:	08005bd1 	.word	0x08005bd1
 8005b6c:	08005b4d 	.word	0x08005b4d
 8005b70:	08005b4d 	.word	0x08005b4d
 8005b74:	08005b4d 	.word	0x08005b4d
 8005b78:	08005b4d 	.word	0x08005b4d
 8005b7c:	08005bd1 	.word	0x08005bd1
 8005b80:	08005b4d 	.word	0x08005b4d
 8005b84:	08005b4d 	.word	0x08005b4d
 8005b88:	08005b4d 	.word	0x08005b4d
 8005b8c:	08005b4d 	.word	0x08005b4d
 8005b90:	08005cd3 	.word	0x08005cd3
 8005b94:	08005bfb 	.word	0x08005bfb
 8005b98:	08005c8d 	.word	0x08005c8d
 8005b9c:	08005b4d 	.word	0x08005b4d
 8005ba0:	08005b4d 	.word	0x08005b4d
 8005ba4:	08005cf5 	.word	0x08005cf5
 8005ba8:	08005b4d 	.word	0x08005b4d
 8005bac:	08005bfb 	.word	0x08005bfb
 8005bb0:	08005b4d 	.word	0x08005b4d
 8005bb4:	08005b4d 	.word	0x08005b4d
 8005bb8:	08005c95 	.word	0x08005c95
 8005bbc:	6833      	ldr	r3, [r6, #0]
 8005bbe:	1d1a      	adds	r2, r3, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6032      	str	r2, [r6, #0]
 8005bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e09e      	b.n	8005d0e <_printf_i+0x1ea>
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	1d19      	adds	r1, r3, #4
 8005bd6:	6031      	str	r1, [r6, #0]
 8005bd8:	0606      	lsls	r6, r0, #24
 8005bda:	d501      	bpl.n	8005be0 <_printf_i+0xbc>
 8005bdc:	681d      	ldr	r5, [r3, #0]
 8005bde:	e003      	b.n	8005be8 <_printf_i+0xc4>
 8005be0:	0645      	lsls	r5, r0, #25
 8005be2:	d5fb      	bpl.n	8005bdc <_printf_i+0xb8>
 8005be4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	da03      	bge.n	8005bf4 <_printf_i+0xd0>
 8005bec:	232d      	movs	r3, #45	@ 0x2d
 8005bee:	426d      	negs	r5, r5
 8005bf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf4:	230a      	movs	r3, #10
 8005bf6:	4859      	ldr	r0, [pc, #356]	@ (8005d5c <_printf_i+0x238>)
 8005bf8:	e011      	b.n	8005c1e <_printf_i+0xfa>
 8005bfa:	6821      	ldr	r1, [r4, #0]
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	0608      	lsls	r0, r1, #24
 8005c00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c04:	d402      	bmi.n	8005c0c <_printf_i+0xe8>
 8005c06:	0649      	lsls	r1, r1, #25
 8005c08:	bf48      	it	mi
 8005c0a:	b2ad      	uxthmi	r5, r5
 8005c0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c0e:	6033      	str	r3, [r6, #0]
 8005c10:	bf14      	ite	ne
 8005c12:	230a      	movne	r3, #10
 8005c14:	2308      	moveq	r3, #8
 8005c16:	4851      	ldr	r0, [pc, #324]	@ (8005d5c <_printf_i+0x238>)
 8005c18:	2100      	movs	r1, #0
 8005c1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c1e:	6866      	ldr	r6, [r4, #4]
 8005c20:	2e00      	cmp	r6, #0
 8005c22:	bfa8      	it	ge
 8005c24:	6821      	ldrge	r1, [r4, #0]
 8005c26:	60a6      	str	r6, [r4, #8]
 8005c28:	bfa4      	itt	ge
 8005c2a:	f021 0104 	bicge.w	r1, r1, #4
 8005c2e:	6021      	strge	r1, [r4, #0]
 8005c30:	b90d      	cbnz	r5, 8005c36 <_printf_i+0x112>
 8005c32:	2e00      	cmp	r6, #0
 8005c34:	d04b      	beq.n	8005cce <_printf_i+0x1aa>
 8005c36:	4616      	mov	r6, r2
 8005c38:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c3c:	fb03 5711 	mls	r7, r3, r1, r5
 8005c40:	5dc7      	ldrb	r7, [r0, r7]
 8005c42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c46:	462f      	mov	r7, r5
 8005c48:	42bb      	cmp	r3, r7
 8005c4a:	460d      	mov	r5, r1
 8005c4c:	d9f4      	bls.n	8005c38 <_printf_i+0x114>
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d10b      	bne.n	8005c6a <_printf_i+0x146>
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	07df      	lsls	r7, r3, #31
 8005c56:	d508      	bpl.n	8005c6a <_printf_i+0x146>
 8005c58:	6923      	ldr	r3, [r4, #16]
 8005c5a:	6861      	ldr	r1, [r4, #4]
 8005c5c:	4299      	cmp	r1, r3
 8005c5e:	bfde      	ittt	le
 8005c60:	2330      	movle	r3, #48	@ 0x30
 8005c62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c6a:	1b92      	subs	r2, r2, r6
 8005c6c:	6122      	str	r2, [r4, #16]
 8005c6e:	464b      	mov	r3, r9
 8005c70:	4621      	mov	r1, r4
 8005c72:	4640      	mov	r0, r8
 8005c74:	f8cd a000 	str.w	sl, [sp]
 8005c78:	aa03      	add	r2, sp, #12
 8005c7a:	f7ff fee1 	bl	8005a40 <_printf_common>
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d14a      	bne.n	8005d18 <_printf_i+0x1f4>
 8005c82:	f04f 30ff 	mov.w	r0, #4294967295
 8005c86:	b004      	add	sp, #16
 8005c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	f043 0320 	orr.w	r3, r3, #32
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	2778      	movs	r7, #120	@ 0x78
 8005c96:	4832      	ldr	r0, [pc, #200]	@ (8005d60 <_printf_i+0x23c>)
 8005c98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	6831      	ldr	r1, [r6, #0]
 8005ca0:	061f      	lsls	r7, r3, #24
 8005ca2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ca6:	d402      	bmi.n	8005cae <_printf_i+0x18a>
 8005ca8:	065f      	lsls	r7, r3, #25
 8005caa:	bf48      	it	mi
 8005cac:	b2ad      	uxthmi	r5, r5
 8005cae:	6031      	str	r1, [r6, #0]
 8005cb0:	07d9      	lsls	r1, r3, #31
 8005cb2:	bf44      	itt	mi
 8005cb4:	f043 0320 	orrmi.w	r3, r3, #32
 8005cb8:	6023      	strmi	r3, [r4, #0]
 8005cba:	b11d      	cbz	r5, 8005cc4 <_printf_i+0x1a0>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	e7ab      	b.n	8005c18 <_printf_i+0xf4>
 8005cc0:	4826      	ldr	r0, [pc, #152]	@ (8005d5c <_printf_i+0x238>)
 8005cc2:	e7e9      	b.n	8005c98 <_printf_i+0x174>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	f023 0320 	bic.w	r3, r3, #32
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	e7f6      	b.n	8005cbc <_printf_i+0x198>
 8005cce:	4616      	mov	r6, r2
 8005cd0:	e7bd      	b.n	8005c4e <_printf_i+0x12a>
 8005cd2:	6833      	ldr	r3, [r6, #0]
 8005cd4:	6825      	ldr	r5, [r4, #0]
 8005cd6:	1d18      	adds	r0, r3, #4
 8005cd8:	6961      	ldr	r1, [r4, #20]
 8005cda:	6030      	str	r0, [r6, #0]
 8005cdc:	062e      	lsls	r6, r5, #24
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	d501      	bpl.n	8005ce6 <_printf_i+0x1c2>
 8005ce2:	6019      	str	r1, [r3, #0]
 8005ce4:	e002      	b.n	8005cec <_printf_i+0x1c8>
 8005ce6:	0668      	lsls	r0, r5, #25
 8005ce8:	d5fb      	bpl.n	8005ce2 <_printf_i+0x1be>
 8005cea:	8019      	strh	r1, [r3, #0]
 8005cec:	2300      	movs	r3, #0
 8005cee:	4616      	mov	r6, r2
 8005cf0:	6123      	str	r3, [r4, #16]
 8005cf2:	e7bc      	b.n	8005c6e <_printf_i+0x14a>
 8005cf4:	6833      	ldr	r3, [r6, #0]
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	1d1a      	adds	r2, r3, #4
 8005cfa:	6032      	str	r2, [r6, #0]
 8005cfc:	681e      	ldr	r6, [r3, #0]
 8005cfe:	6862      	ldr	r2, [r4, #4]
 8005d00:	4630      	mov	r0, r6
 8005d02:	f000 f859 	bl	8005db8 <memchr>
 8005d06:	b108      	cbz	r0, 8005d0c <_printf_i+0x1e8>
 8005d08:	1b80      	subs	r0, r0, r6
 8005d0a:	6060      	str	r0, [r4, #4]
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	2300      	movs	r3, #0
 8005d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d16:	e7aa      	b.n	8005c6e <_printf_i+0x14a>
 8005d18:	4632      	mov	r2, r6
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	4640      	mov	r0, r8
 8005d1e:	6923      	ldr	r3, [r4, #16]
 8005d20:	47d0      	blx	sl
 8005d22:	3001      	adds	r0, #1
 8005d24:	d0ad      	beq.n	8005c82 <_printf_i+0x15e>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	079b      	lsls	r3, r3, #30
 8005d2a:	d413      	bmi.n	8005d54 <_printf_i+0x230>
 8005d2c:	68e0      	ldr	r0, [r4, #12]
 8005d2e:	9b03      	ldr	r3, [sp, #12]
 8005d30:	4298      	cmp	r0, r3
 8005d32:	bfb8      	it	lt
 8005d34:	4618      	movlt	r0, r3
 8005d36:	e7a6      	b.n	8005c86 <_printf_i+0x162>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4632      	mov	r2, r6
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	4640      	mov	r0, r8
 8005d40:	47d0      	blx	sl
 8005d42:	3001      	adds	r0, #1
 8005d44:	d09d      	beq.n	8005c82 <_printf_i+0x15e>
 8005d46:	3501      	adds	r5, #1
 8005d48:	68e3      	ldr	r3, [r4, #12]
 8005d4a:	9903      	ldr	r1, [sp, #12]
 8005d4c:	1a5b      	subs	r3, r3, r1
 8005d4e:	42ab      	cmp	r3, r5
 8005d50:	dcf2      	bgt.n	8005d38 <_printf_i+0x214>
 8005d52:	e7eb      	b.n	8005d2c <_printf_i+0x208>
 8005d54:	2500      	movs	r5, #0
 8005d56:	f104 0619 	add.w	r6, r4, #25
 8005d5a:	e7f5      	b.n	8005d48 <_printf_i+0x224>
 8005d5c:	08005ebf 	.word	0x08005ebf
 8005d60:	08005ed0 	.word	0x08005ed0

08005d64 <memmove>:
 8005d64:	4288      	cmp	r0, r1
 8005d66:	b510      	push	{r4, lr}
 8005d68:	eb01 0402 	add.w	r4, r1, r2
 8005d6c:	d902      	bls.n	8005d74 <memmove+0x10>
 8005d6e:	4284      	cmp	r4, r0
 8005d70:	4623      	mov	r3, r4
 8005d72:	d807      	bhi.n	8005d84 <memmove+0x20>
 8005d74:	1e43      	subs	r3, r0, #1
 8005d76:	42a1      	cmp	r1, r4
 8005d78:	d008      	beq.n	8005d8c <memmove+0x28>
 8005d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d82:	e7f8      	b.n	8005d76 <memmove+0x12>
 8005d84:	4601      	mov	r1, r0
 8005d86:	4402      	add	r2, r0
 8005d88:	428a      	cmp	r2, r1
 8005d8a:	d100      	bne.n	8005d8e <memmove+0x2a>
 8005d8c:	bd10      	pop	{r4, pc}
 8005d8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d96:	e7f7      	b.n	8005d88 <memmove+0x24>

08005d98 <_sbrk_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4d05      	ldr	r5, [pc, #20]	@ (8005db4 <_sbrk_r+0x1c>)
 8005d9e:	4604      	mov	r4, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	602b      	str	r3, [r5, #0]
 8005da4:	f7fa fdf0 	bl	8000988 <_sbrk>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_sbrk_r+0x1a>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_sbrk_r+0x1a>
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	20000c6c 	.word	0x20000c6c

08005db8 <memchr>:
 8005db8:	4603      	mov	r3, r0
 8005dba:	b510      	push	{r4, lr}
 8005dbc:	b2c9      	uxtb	r1, r1
 8005dbe:	4402      	add	r2, r0
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	d101      	bne.n	8005dca <memchr+0x12>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	e003      	b.n	8005dd2 <memchr+0x1a>
 8005dca:	7804      	ldrb	r4, [r0, #0]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	428c      	cmp	r4, r1
 8005dd0:	d1f6      	bne.n	8005dc0 <memchr+0x8>
 8005dd2:	bd10      	pop	{r4, pc}

08005dd4 <_realloc_r>:
 8005dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd8:	4680      	mov	r8, r0
 8005dda:	4615      	mov	r5, r2
 8005ddc:	460c      	mov	r4, r1
 8005dde:	b921      	cbnz	r1, 8005dea <_realloc_r+0x16>
 8005de0:	4611      	mov	r1, r2
 8005de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005de6:	f7ff bc47 	b.w	8005678 <_malloc_r>
 8005dea:	b92a      	cbnz	r2, 8005df8 <_realloc_r+0x24>
 8005dec:	f7ff fbda 	bl	80055a4 <_free_r>
 8005df0:	2400      	movs	r4, #0
 8005df2:	4620      	mov	r0, r4
 8005df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df8:	f000 f81a 	bl	8005e30 <_malloc_usable_size_r>
 8005dfc:	4285      	cmp	r5, r0
 8005dfe:	4606      	mov	r6, r0
 8005e00:	d802      	bhi.n	8005e08 <_realloc_r+0x34>
 8005e02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e06:	d8f4      	bhi.n	8005df2 <_realloc_r+0x1e>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4640      	mov	r0, r8
 8005e0c:	f7ff fc34 	bl	8005678 <_malloc_r>
 8005e10:	4607      	mov	r7, r0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0ec      	beq.n	8005df0 <_realloc_r+0x1c>
 8005e16:	42b5      	cmp	r5, r6
 8005e18:	462a      	mov	r2, r5
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	bf28      	it	cs
 8005e1e:	4632      	movcs	r2, r6
 8005e20:	f7ff fbb2 	bl	8005588 <memcpy>
 8005e24:	4621      	mov	r1, r4
 8005e26:	4640      	mov	r0, r8
 8005e28:	f7ff fbbc 	bl	80055a4 <_free_r>
 8005e2c:	463c      	mov	r4, r7
 8005e2e:	e7e0      	b.n	8005df2 <_realloc_r+0x1e>

08005e30 <_malloc_usable_size_r>:
 8005e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e34:	1f18      	subs	r0, r3, #4
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bfbc      	itt	lt
 8005e3a:	580b      	ldrlt	r3, [r1, r0]
 8005e3c:	18c0      	addlt	r0, r0, r3
 8005e3e:	4770      	bx	lr

08005e40 <_init>:
 8005e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e42:	bf00      	nop
 8005e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e46:	bc08      	pop	{r3}
 8005e48:	469e      	mov	lr, r3
 8005e4a:	4770      	bx	lr

08005e4c <_fini>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	bf00      	nop
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr
